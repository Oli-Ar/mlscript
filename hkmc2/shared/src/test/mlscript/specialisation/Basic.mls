:js


:ds
:sjs
fun id1(a) = a
fun id2(b) = b
let x = 1
id1(x)
id1(1)
id2("2")
//│ Specialising block { ‹› fun member:id1‹116›(Param(‹›,a‹117›,None), ) = a‹117›#666; ‹› fun member:id2‹115›(Param(‹›,b‹119›,None), ) = b‹119›#666; let globalThis:block#1‹114›.x; globalThis:block#1‹114›.x = 1; globalThis:block#1‹114›#666(.)id1‹member:id1‹116››(globalThis:block#1‹114›.x#666); globalThis:block#1‹114›#666(.)id1‹member:id1‹116››(1); globalThis:block#1‹114›#666(.)id2‹member:id2‹115››("2") }
//│ | Specialising ‹› fun member:id1‹116›(Param(‹›,a‹117›,None), ) = a‹117›#666
//│ | Specialising ‹› fun member:id2‹115›(Param(‹›,b‹119›,None), ) = b‹119›#666
//│ | Specialising let globalThis:block#1‹114›.x
//│ | Specialising globalThis:block#1‹114›.x = 1
//│ | Specialising globalThis:block#1‹114›#666(.)id1‹member:id1‹116››(globalThis:block#1‹114›.x#666)
//│ | Specialising term globalThis:block#1‹114›#666(.)id1‹member:id1‹116››(globalThis:block#1‹114›.x#666)
//│ | Specialising globalThis:block#1‹114›#666(.)id1‹member:id1‹116››(1)
//│ | Specialising term globalThis:block#1‹114›#666(.)id1‹member:id1‹116››(1)
//│ | Specialising block end. 
//│ | >  
//│ | Specialising term globalThis:block#1‹114›#666(.)id2‹member:id2‹115››("2")
//│ | Ctx: x -> Binding(globalThis:block#1‹114›.x,Some(Ref(globalThis:import#Prelude‹125›)))
//│ | Work Queue: Queue(TermDefinition(Some(globalThis:block#1‹114›),Fun,member:id1‹116›,List(ParamList(‹›,List(Param(‹›,a‹117›,None)),None)),None,Some(Ref(a‹117›)),‹result of member:id1‹116››‹118›,‹›,List()), TermDefinition(Some(globalThis:block#1‹114›),Fun,member:id2‹115›,List(ParamList(‹›,List(Param(‹›,b‹119›,None)),None)),None,Some(Ref(b‹119›)),‹result of member:id2‹115››‹120›,‹›,List()))
//│ | Applications: Map(id1 -> List(Ref(globalThis:import#Prelude‹125›)), id2 -> List(Ref(globalThis:import#Prelude‹126›)))
//│ JS (unsanitized):
//│ let tmp, tmp1;
//│ function id2_Str_09aKInnLz0(b) {
//│   return b;
//│ }
//│ function id1_Int_DRaDBEukH1(a) {
//│   return a;
//│ }
//│ function id1(a) {
//│   return a;
//│ }
//│ function id2(b) {
//│   return b;
//│ }
//│ this.x = 1;
//│ tmp = this.id1_Int_DRaDBEukH1(this.x);
//│ tmp1 = this.id1_Int_DRaDBEukH1(1);
//│ this.id2_Str_09aKInnLz0("2")
//│ = '2'
//│ x = 1
