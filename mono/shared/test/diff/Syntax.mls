
// The most primitive if expressions must work.
fun neg(#x) = 0 - x
fun abs(#x) = if x > 0 then x else neg of x
//│ |#fun| |neg|(|##|x|)| |#=| |0| |-| |x|↵|#fun| |abs|(|##|x|)| |#=| |#if| |x| |>| |0| |#then| |x| |#else| |neg| |#of| |x|
//│ Parsed: {fun neg = #x, => - 0 x; fun abs = #x, => if (> x 0) then x else neg (x,)}
//│ fun neg = new Lambda_0 () 
//│ fun abs = new Lambda_1 () 
//│ class Lambda_1 { fun apply = if ((> x) 0) then x else (neg x) }
//│ class Lambda_0 { fun apply = ((- 0) x) }

// UCS is not supported by the monomorphizer.
if
  true  then "true"
  false then "false"
//│ |#if|→|true| |#then| |"true"|↵|false| |#then| |"false"|
//│ Parsed: {if ‹(true) then "true"; (false) then "false"›}
//│ unsupported IfBlock

fun inc(#x) = x + 1
fun dbl(#x) = x * 2
fun app(f, x) = f(x)
class Box(value) {
  fun map(f) = Box(f(value))
  fun get = this.value
}
new Box(0) {
  fun get = this.value + 1
}
//│ |#fun| |inc|(|##|x|)| |#=| |x| |+| |1|↵|#fun| |dbl|(|##|x|)| |#=| |x| |*| |2|↵|#fun| |app|(|f|,| |x|)| |#=| |f|(|x|)|↵|#class| |Box|(|value|)| |{|→|#fun| |map|(|f|)| |#=| |Box|(|f|(|value|)|)|↵|#fun| |get| |#=| |this|.|value|←|↵|}|↵|#new| |Box|(|0|)| |{|→|#fun| |get| |#=| |this|.|value| |+| |1|←|↵|}|
//│ Parsed: {fun inc = #x, => + x 1; fun dbl = #x, => * x 2; fun app = f, x, => f (x,); class Box(value,) {fun map = f, => Box (f (value,),); fun get = . this value}; new Box(0,) {fun get = + (. this value) 1}}
//│ fun inc = new Lambda_0 () 
//│ fun dbl = new Lambda_1 () 
//│ fun app = new Lambda_2 () 
//│ (Box_0 )
//│ class Box_0 { fun map = new Lambda_3 () 
//│ fun get = ((. this) value) }
//│ class Lambda_1 { fun apply = ((* x) 2) }
//│ class Lambda_0 { fun apply = ((+ x) 1) }
//│ class Lambda_3 { fun apply = (Box (f value)) }
//│ class Lambda_2 { fun apply = (f x) }


fun pow(#n, x) =
  if n > 1 then pow(n - 1, x) * x
  else 1
//│ |#fun| |pow|(|##|n|,| |x|)| |#=|→|#if| |n| |>| |1| |#then| |pow|(|n| |-| |1|,| |x|)| |*| |x|↵|#else| |1|
//│ Parsed: {fun pow = #n, x, => {if (> n 1) then * (pow (- n 1, x,)) x else 1}}
//│ fun pow = new Lambda_0 () 
//│ class Lambda_0 { fun apply = if ((> n) 1) then ((* (pow ((- n) 1) x)) x) else 1 }

pow(0, 123)
//│ |pow|(|0|,| |123|)|
//│ Parsed: {pow (0, 123,)}
//│ (pow 0 123)


