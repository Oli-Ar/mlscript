
// * Strangely, why Y does not work (cycle check error),
// * Z type checks find thanks to recursive types...


def z: (('a -> 'b) -> (('a -> 'b) & 'c)) -> 'c
//│ z: (('a -> 'b) -> ('a -> 'b & 'c)) -> 'c
//│  = <missing implementation>

// :e
def z =
  (fun f -> (fun x -> f (fun v -> (x x) v)) (fun x -> f (fun v -> (x x) v)))
//│ ((forall 'a, 'b, 'c. ('b -> 'c
//│   where
//│     'a <: 'a -> 'b -> 'c)) -> 'd) -> 'd
//│   <:  z:
//│ (('a -> 'b) -> ('a -> 'b & 'c)) -> 'c
//│  = [Function: z]


def pow1 = z (fun pow0 -> fun n -> fun x ->
    if n > 0 then pow0 (n - 1) x * x
    else 1
  )
//│ pow1: int -> (int & 'a) -> (forall 'a, 'b. (int
//│   where
//│     'b <: int -> 'a -> int))
//│     = [Function (anonymous)]

pow1 3 4
//│ res: int
//│   where
//│     'a <: int -> 4 -> int
//│    = 64


def pow pow n x =
    if n > 0 then pow (n - 1) x * x
    else 1
//│ pow: 'a -> int -> (int & 'b) -> (forall 'a, 'b. (int
//│   where
//│     'a <: int -> 'b -> int))
//│    = [Function: pow]

def pow = z pow
pow 3 4
//│ pow: int -> (int & 'a) -> (forall 'a, 'b. (int
//│   where
//│     'b <: int -> 'a -> int))
//│    = [Function (anonymous)]
//│ res: int
//│   where
//│     'a <: int -> 4 -> int
//│    = 64


def oops = z (fun f -> f)
//│ oops: anything -> nothing
//│     = [Function (anonymous)]

:re
oops 1
//│ res: nothing
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded


// Now with constrained-arg-gen these work!?

:NoRecursiveTypes

// :e
def z =
  (fun f -> (fun x -> f (fun v -> (x x) v)) (fun x -> f (fun v -> (x x) v)))
//│ ((forall 'a, 'b, 'c. ('b -> 'c
//│   where
//│     'a <: 'a -> 'b -> 'c)) -> 'd) -> 'd
//│   <:  z:
//│ (('a -> 'b) -> ('a -> 'b & 'c)) -> 'c
//│ ╔══[ERROR] Cyclic-looking constraint while typing def definition
//│ ║  l.73: 	def z =
//│ ║        	^^^^^^^
//│ ║  l.74: 	  (fun f -> (fun x -> f (fun v -> (x x) v)) (fun x -> f (fun v -> (x x) v)))
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 1. {(α279' -> α283'') where: α277' <: ((‹∀ 2. {(α281''' -> α282''') where: α279' <: ((α279',) -> α280''')}›,) -> α283'')}›  <:  ((α279',) -> α297')    PolymorphicType  FunctionType
//│ ╙──  ... looks like:  ‹∀ 1. {(α247'' -> α251'') where: α277' <: ((‹∀ 2. {(α248''' -> α250''') where: α279' <: ((α247'',) -> α249''')}›,) -> α251'')}›  <:  ((α247'',) -> α280''')
//│  = [Function: z1]

:NoCycleCheck

// // Exceeds recursion depth limit:
// :e
def z =
  (fun f -> (fun x -> f (fun v -> (x x) v)) (fun x -> f (fun v -> (x x) v)))
//│ ((forall 'a, 'b, 'c. ('b -> 'c
//│   where
//│     'a <: 'a -> 'b -> 'c)) -> 'd) -> 'd
//│   <:  z:
//│ (('a -> 'b) -> ('a -> 'b & 'c)) -> 'c
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?d, ?e, ?f, ?g, ?h, ?i, ?j, ?k, ?l. ?j -> ?i <: forall ?a, ?b, ?c. ((?a -> ?b) -> (?a -> ?b & ?c)) -> ?c` exceeded recursion depth limit (400)
//│ ║  l.94: 	def z =
//│ ║        	^^^^^^^
//│ ║  l.95: 	  (fun f -> (fun x -> f (fun v -> (x x) v)) (fun x -> f (fun v -> (x x) v)))
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  ‹∀ 1. {(α338' -> α342'') where: α336' <: ((‹∀ 2. {(α340''' -> α341''') where: α338' <: ((α338',) -> α339''')}›,) -> α342'')}›  <!<  ((α338',) -> α440')
//│ ╟── while constraining:  α338'  <!<  ((α338',) -> α440')
//│ ╟── while constraining:  {(α441' -> α442') where: α338' <: ((α338',) -> α440')}  <!<  (‘a' -> ‘b')
//│ ╟── while constraining:  ‹∀ 2. {(α340''' -> α341''') where: α338' <: ((α338',) -> α339''')}›  <!<  (‘a' -> ‘b')
//│ ╟── while constraining:  (‹∀ 2. {(α340''' -> α341''') where: α338' <: ((α338',) -> α339''')}›,)  <!<  ((‘a' -> ‘b'),)
//│ ╟── while constraining:  ((‘a' -> ‘b') -> ((‘a' -> ‘b') & ‘c'))  <!<  ((‹∀ 2. {(α340''' -> α341''') where: α338' <: ((α338',) -> α339''')}›,) -> α439')
//│ ╟── while constraining:  α336'  <!<  ((‹∀ 2. {(α340''' -> α341''') where: α338' <: ((α338',) -> α339''')}›,) -> α439')
//│ ╟── while constraining:  {(α338' -> α439') where: α336' <: ((‹∀ 2. {(α340''' -> α341''') where: α338' <: ((α338',) -> α339''')}›,) -> α439')}  <!<  ((α338',) -> α436')
//│ ╟── while constraining:  ‹∀ 1. {(α338' -> α342'') where: α336' <: ((‹∀ 2. {(α340''' -> α341''') where: α338' <: ((α338',) -> α339''')}›,) -> α342'')}›  <!<  ((α338',) -> α436')
//│ ╟── while constraining:  α338'  <!<  ((α338',) -> α436')
//│ ╟── while constraining:  {(α437' -> α438') where: α338' <: ((α338',) -> α436')}  <!<  (‘a' -> ‘b')
//│ ╟── while constraining:  ‹∀ 2. {(α340''' -> α341''') where: α338' <: ((α338',) -> α339''')}›  <!<  (‘a' -> ‘b')
//│ ╟── while constraining:  (‹∀ 2. {(α340''' -> α341''') where: α338' <: ((α338',) -> α339''')}›,)  <!<  ((‘a' -> ‘b'),)
//│ ╟── while constraining:  ((‘a' -> ‘b') -> ((‘a' -> ‘b') & ‘c'))  <!<  ((‹∀ 2. {(α340''' -> α341''') where: α338' <: ((α338',) -> α339''')}›,) -> α435')
//│ ╟── while constraining:  α336'  <!<  ((‹∀ 2. {(α340''' -> α341''') where: α338' <: ((α338',) -> α339''')}›,) -> α435')
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  α337'  <!<  α338'
//│ ╟── while constraining:  (α337',)  <!<  (α338',)
//│ ╟── while constraining:  (α338' -> α351')  <!<  ((α337',) -> α348')
//│ ╟── while constraining:  {(α338' -> α351') where: α336' <: ((‹∀ 2. {(α340''' -> α341''') where: α338' <: ((α338',) -> α339''')}›,) -> α351')}  <!<  ((α337',) -> α348')
//│ ╟── while constraining:  ‹∀ 1. {(α338' -> α342'') where: α336' <: ((‹∀ 2. {(α340''' -> α341''') where: α338' <: ((α338',) -> α339''')}›,) -> α342'')}›  <!<  ((α337',) -> α348')
//│ ╟── while constraining:  α337'  <!<  ((α337',) -> α348')
//│ ╟── while constraining:  {(α349' -> α350') where: α337' <: ((α337',) -> α348')}  <!<  (‘a' -> ‘b')
//│ ╟── while constraining:  ‹∀ 1. {(α344'' -> α345'') where: α337' <: ((α337',) -> α343'')}›  <!<  (‘a' -> ‘b')
//│ ╟── while constraining:  (‹∀ 1. {(α344'' -> α345'') where: α337' <: ((α337',) -> α343'')}›,)  <!<  ((‘a' -> ‘b'),)
//│ ╟── while constraining:  ((‘a' -> ‘b') -> ((‘a' -> ‘b') & ‘c'))  <!<  ((‹∀ 1. {(α344'' -> α345'') where: α337' <: ((α337',) -> α343'')}›,) -> α346')
//│ ╟── while constraining:  ((‘a' -> ‘b') -> ((‘a' -> ‘b') & ‘c'))  <!<  α336'
//│ ╟── while constraining:  (((‘a' -> ‘b') -> ((‘a' -> ‘b') & ‘c')),)  <!<  (α336',)
//│ ╟── while constraining:  (α336' -> α347')  <!<  (((‘a' -> ‘b') -> ((‘a' -> ‘b') & ‘c')) -> ‘c')
//│ ╟── while constraining:  ‹∀ 0. (α300' -> α311')›  <!<  (((‘a' -> ‘b') -> ((‘a' -> ‘b') & ‘c')) -> ‘c')
//│ ╙── while constraining:  ‹∀ 0. (α300' -> α311')›  <!<  ‹∀ 0. ((('a21' -> 'b22') -> (('a21' -> 'b22') & 'c23')) -> 'c23')›
//│  = [Function: z2]

