
// * Strangely, why Y does not work (cycle check error),
// * Z type checks find thanks to recursive types...


def z: (('a -> 'b) -> (('a -> 'b) & 'c)) -> 'c
//│ z: (('a -> 'b) -> ('a -> 'b & 'c)) -> 'c
//│  = <missing implementation>

:e // due to tapping
def z =
  (fun f -> (fun x -> f (fun v -> (x x) v)) (fun x -> f (fun v -> (x x) v)))
//│ ╔══[ERROR] Cyclic-looking constraint while typing application; a type annotation may be required
//│ ║  l.12: 	  (fun f -> (fun x -> f (fun v -> (x x) v)) (fun x -> f (fun v -> (x x) v)))
//│ ║        	            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 1. (α42'' -> α49'')›  <:  α42_61'    PolymorphicType  TypeVariable
//│ ╙──  ... looks like:  ‹∀ 1. (α42'' -> α49'')›  <:  α42''
//│ ((anything -> nothing) -> anything) -> error
//│   <:  z:
//│ (('a -> 'b) -> ('a -> 'b & 'c)) -> 'c
//│  = [Function: z]


def pow1 = z (fun pow0 -> fun n -> fun x ->
    if n > 0 then pow0 (n - 1) x * x
    else 1
  )
//│ pow1: int -> int -> int
//│     = [Function (anonymous)]

pow1 3 4
//│ res: int
//│    = 64


def pow pow n x =
    if n > 0 then pow (n - 1) x * x
    else 1
//│ pow: (int -> 'a -> int) -> int -> (int & 'a) -> int
//│    = [Function: pow]

def pow = z pow
pow 3 4
//│ pow: int -> int -> int
//│    = [Function (anonymous)]
//│ res: int
//│    = 64


def oops = z (fun f -> f)
//│ oops: anything -> nothing
//│     = [Function (anonymous)]

:re
oops 1
//│ res: nothing
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded



:NoRecursiveTypes

:e
def z =
  (fun f -> (fun x -> f (fun v -> (x x) v)) (fun x -> f (fun v -> (x x) v)))
//│ ╔══[ERROR] Cyclic-looking constraint while typing application; a type annotation may be required
//│ ║  l.67: 	  (fun f -> (fun x -> f (fun v -> (x x) v)) (fun x -> f (fun v -> (x x) v)))
//│ ║        	            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 1. (α211'' -> α218'')›  <:  α211_230'    PolymorphicType  TypeVariable
//│ ╙──  ... looks like:  ‹∀ 1. (α211'' -> α218'')›  <:  α211''
//│ ((anything -> nothing) -> anything) -> error
//│   <:  z:
//│ (('a -> 'b) -> ('a -> 'b & 'c)) -> 'c
//│  = [Function: z1]

:NoCycleCheck

// Exceeds recursion depth limit:
// :e
// FIXME should be caught by cycle checker!
def z =
  (fun f -> (fun x -> f (fun v -> (x x) v)) (fun x -> f (fun v -> (x x) v)))
//│ ╔══[ERROR] Subtyping constraint of the form `?a -> ?b <: (forall ?c, ?d, ?e, ?f, ?g. ?c -> ?g) -> ?h` exceeded recursion depth limit (300)
//│ ║  l.85: 	  (fun f -> (fun x -> f (fun v -> (x x) v)) (fun x -> f (fun v -> (x x) v)))
//│ ║        	            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  ‹∀ 1. (α281'' -> α288'')›  <!<  α281_340'
//│ ╟── while constraining:  α281_335'  <!<  α281_340'
//│ ╟── while constraining:  (α281_335',)  <!<  (α281_340',)
//│ ╟── while constraining:  (α281_340' -> α288_344')  <!<  ((α281_335',) -> α285_336')
//│ ╟── while constraining:  ‹∀ 1. (α281'' -> α288'')›  <!<  ((α281_335',) -> α285_336')
//│ ╟── while constraining:  ‹∀ 1. (α281'' -> α288'')›  <!<  α281_335'
//│ ╟── while constraining:  α281_330'  <!<  α281_335'
//│ ╟── while constraining:  (α281_330',)  <!<  (α281_335',)
//│ ╟── while constraining:  (α281_335' -> α288_339')  <!<  ((α281_330',) -> α285_331')
//│ ╟── while constraining:  ‹∀ 1. (α281'' -> α288'')›  <!<  ((α281_330',) -> α285_331')
//│ ╟── while constraining:  ‹∀ 1. (α281'' -> α288'')›  <!<  α281_330'
//│ ╟── while constraining:  α281_325'  <!<  α281_330'
//│ ╟── while constraining:  (α281_325',)  <!<  (α281_330',)
//│ ╟── while constraining:  (α281_330' -> α288_334')  <!<  ((α281_325',) -> α285_326')
//│ ╟── while constraining:  ‹∀ 1. (α281'' -> α288'')›  <!<  ((α281_325',) -> α285_326')
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  (α281_305' -> α288_309')  <!<  ((α281_300',) -> α285_301')
//│ ╟── while constraining:  ‹∀ 1. (α281'' -> α288'')›  <!<  ((α281_300',) -> α285_301')
//│ ╟── while constraining:  ‹∀ 1. (α281'' -> α288'')›  <!<  α281_300'
//│ ╟── while constraining:  α281_295'  <!<  α281_300'
//│ ╟── while constraining:  (α281_295',)  <!<  (α281_300',)
//│ ╟── while constraining:  (α281_300' -> α288_304')  <!<  ((α281_295',) -> α285_296')
//│ ╟── while constraining:  ‹∀ 1. (α281'' -> α288'')›  <!<  ((α281_295',) -> α285_296')
//│ ╟── while constraining:  ‹∀ 1. (α281'' -> α288'')›  <!<  α281_295'
//│ ╟── while constraining:  α273'  <!<  α281_295'
//│ ╟── while constraining:  (α273',)  <!<  (α281_295',)
//│ ╟── while constraining:  (α281_295' -> α288_299')  <!<  ((α273',) -> α277')
//│ ╟── while constraining:  ‹∀ 1. (α281'' -> α288'')›  <!<  ((α273',) -> α277')
//│ ╟── while constraining:  ‹∀ 1. (α281'' -> α288'')›  <!<  α273'
//│ ╟── while constraining:  (‹∀ 1. (α281'' -> α288'')›,)  <!<  (α273',)
//│ ╙── while constraining:  (α273' -> α280')  <!<  ((‹∀ 1. (α281'' -> α288'')›,) -> α294')
//│ ((anything -> nothing) -> anything) -> error
//│   <:  z:
//│ (('a -> 'b) -> ('a -> 'b & 'c)) -> 'c
//│  = [Function: z2]

