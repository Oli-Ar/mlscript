
// * Strangely, why Y does not work (cycle check error),
// * Z type checks find thanks to recursive types...


def z: (('a -> 'b) -> (('a -> 'b) & 'c)) -> 'c
//│ z: (('a -> 'b) -> ('a -> 'b & 'c)) -> 'c
//│  = <missing implementation>

:e // due to tapping
def z =
  (fun f -> (fun x -> f (fun v -> (x x) v)) (fun x -> f (fun v -> (x x) v)))
//│ ╔══[ERROR] Cyclic-looking constraint while typing application
//│ ║  l.12: 	  (fun f -> (fun x -> f (fun v -> (x x) v)) (fun x -> f (fun v -> (x x) v)))
//│ ║        	            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 1. (α39'' -> α43'')›  <:  α39_50'    PolymorphicType  TypeVariable
//│ ╙──  ... looks like:  ‹∀ 1. (α39'' -> α43'')›  <:  α39''
//│ ((anything -> nothing) -> anything & (anything -> nothing) -> 'a) -> (error | 'a)
//│   <:  z:
//│ (('a -> 'b) -> ('a -> 'b & 'c)) -> 'c
//│  = [Function: z]


def pow1 = z (fun pow0 -> fun n -> fun x ->
    if n > 0 then pow0 (n - 1) x * x
    else 1
  )
//│ pow1: int -> int -> int
//│     = [Function (anonymous)]

pow1 3 4
//│ res: int
//│    = 64


def pow pow n x =
    if n > 0 then pow (n - 1) x * x
    else 1
//│ pow: (int -> 'a -> int) -> int -> (int & 'a) -> int
//│    = [Function: pow]

def pow = z pow
pow 3 4
//│ pow: int -> int -> int
//│    = [Function (anonymous)]
//│ res: int
//│    = 64


def oops = z (fun f -> f)
//│ oops: anything -> nothing
//│     = [Function (anonymous)]

:re
oops 1
//│ res: nothing
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded



:NoRecursiveTypes

:e
def z =
  (fun f -> (fun x -> f (fun v -> (x x) v)) (fun x -> f (fun v -> (x x) v)))
//│ ╔══[ERROR] Cyclic-looking constraint while typing application
//│ ║  l.67: 	  (fun f -> (fun x -> f (fun v -> (x x) v)) (fun x -> f (fun v -> (x x) v)))
//│ ║        	            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 1. (α187'' -> α191'')›  <:  α187_198'    PolymorphicType  TypeVariable
//│ ╙──  ... looks like:  ‹∀ 1. (α187'' -> α191'')›  <:  α187''
//│ ((anything -> nothing) -> anything & (anything -> nothing) -> 'a) -> (error | 'a)
//│   <:  z:
//│ (('a -> 'b) -> ('a -> 'b & 'c)) -> 'c
//│  = [Function: z1]

:NoCycleCheck

// Exceeds recursion depth limit:
:e
def z =
  (fun f -> (fun x -> f (fun v -> (x x) v)) (fun x -> f (fun v -> (x x) v)))
//│ ╔══[ERROR] Subtyping constraint of the form `?a -> ?b <: (forall ?c, ?d, ?e, ?f, ?g. ?f -> ?e) -> ?h` exceeded recursion depth limit (300)
//│ ║  l.84: 	  (fun f -> (fun x -> f (fun v -> (x x) v)) (fun x -> f (fun v -> (x x) v)))
//│ ║        	            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  ‹∀ 1. (α236'' -> α240'')›  <!<  α236_287'
//│ ╟── while constraining:  α236_282'  <!<  α236_287'
//│ ╟── while constraining:  (α236_282',)  <!<  (α236_287',)
//│ ╟── while constraining:  (α236_287' -> α240_291')  <!<  ((α236_282',) -> α238_283''')
//│ ╟── while constraining:  ‹∀ 1. (α236'' -> α240'')›  <!<  ((α236_282',) -> α238_283''')
//│ ╟── while constraining:  ‹∀ 1. (α236'' -> α240'')›  <!<  α236_282'
//│ ╟── while constraining:  α236_277'  <!<  α236_282'
//│ ╟── while constraining:  (α236_277',)  <!<  (α236_282',)
//│ ╟── while constraining:  (α236_282' -> α240_286')  <!<  ((α236_277',) -> α238_278''')
//│ ╟── while constraining:  ‹∀ 1. (α236'' -> α240'')›  <!<  ((α236_277',) -> α238_278''')
//│ ╟── while constraining:  ‹∀ 1. (α236'' -> α240'')›  <!<  α236_277'
//│ ╟── while constraining:  α236_272'  <!<  α236_277'
//│ ╟── while constraining:  (α236_272',)  <!<  (α236_277',)
//│ ╟── while constraining:  (α236_277' -> α240_281')  <!<  ((α236_272',) -> α238_273''')
//│ ╟── while constraining:  ‹∀ 1. (α236'' -> α240'')›  <!<  ((α236_272',) -> α238_273''')
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  (α236_252' -> α240_256')  <!<  ((α236_247',) -> α238_248''')
//│ ╟── while constraining:  ‹∀ 1. (α236'' -> α240'')›  <!<  ((α236_247',) -> α238_248''')
//│ ╟── while constraining:  ‹∀ 1. (α236'' -> α240'')›  <!<  α236_247'
//│ ╟── while constraining:  α236_242'  <!<  α236_247'
//│ ╟── while constraining:  (α236_242',)  <!<  (α236_247',)
//│ ╟── while constraining:  (α236_247' -> α240_251')  <!<  ((α236_242',) -> α238_243''')
//│ ╟── while constraining:  ‹∀ 1. (α236'' -> α240'')›  <!<  ((α236_242',) -> α238_243''')
//│ ╟── while constraining:  ‹∀ 1. (α236'' -> α240'')›  <!<  α236_242'
//│ ╟── while constraining:  α231'  <!<  α236_242'
//│ ╟── while constraining:  (α231',)  <!<  (α236_242',)
//│ ╟── while constraining:  (α236_242' -> α240_246')  <!<  ((α231',) -> α233'')
//│ ╟── while constraining:  ‹∀ 1. (α236'' -> α240'')›  <!<  ((α231',) -> α233'')
//│ ╟── while constraining:  ‹∀ 1. (α236'' -> α240'')›  <!<  α231'
//│ ╟── while constraining:  (‹∀ 1. (α236'' -> α240'')›,)  <!<  (α231',)
//│ ╙── while constraining:  (α231' -> α235')  <!<  ((‹∀ 1. (α236'' -> α240'')›,) -> α241')
//│ ((anything -> nothing) -> anything) -> error
//│   <:  z:
//│ (('a -> 'b) -> ('a -> 'b & 'c)) -> 'c
//│  = [Function: z2]

