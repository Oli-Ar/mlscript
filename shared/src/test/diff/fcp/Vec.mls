
:GeneralizeCurriedFunctions
:ArgGen // Type of cons is much simpler without this...

:AllowTypeErrors // FIXME


class Z
class S[P]
  method Inv: P -> P
  method Inv = id
//│ Defined class Z
//│ Defined class S[=P]
//│ Declared S.Inv: S['P] -> 'P -> 'P
//│ Defined S.Inv: S['P] -> (forall 'a. 'a -> 'a)

:IrregularTypes

class Cons[A, N]: { size: S[N]; head: A; tail: Vec[A, N] }
class Nil: { size: Z }
type Vec[A, N] = forall 'r. (forall 'p. (Nil & { size: N } | Cons[A, S['p]] & Cons[A, N]) -> 'r) -> 'r
//│ Defined class Cons[+A, =N]
//│ Defined class Nil
//│ Defined type alias Vec[+A, =N]

type AnyVec[A] = forall 'r. (forall 'p. Nil | Cons[A, S['p]] -> 'r) -> 'r
//│ Defined type alias AnyVec[+A]

def Nil = Nil { size = Z{} }
def Cons head tail = Cons { head; tail; size = S{} }
//│ Nil: Nil
//│ Cons: 'head -> (forall 'A, 'N, 'tail. (Vec['A, 'N] & 'tail) -> (Cons['A | 'head, 'N] with {head: 'head, tail: 'tail}))


def nil k = k Nil
def cons h t k = k (Cons h t)
//│ nil: (Nil -> 'a) -> 'a
//│ cons: anything -> (forall 'A, 'N, 'N0, 'tail, 'a. (Vec['A, in 'N out 'N | 'N0] & 'tail) -> (forall 'a. ((forall 'P. Cons['A, 'P] with {head: nothing, tail: 'tail}) -> 'a) -> 'a))
//│   where
//│     'P :> 'N
//│        <: 'N0

nil_ty = nil : Vec[int, Z]
//│ nil_ty: Vec[int, Z]

def cons_ty : forall 'a. 'a -> Vec['a, 'n] -> Vec['a, S['n]]
//│ cons_ty: 'a -> Vec['a, 'n] -> Vec['a, S['n]]

cons_ty = cons : forall 'a. 'a -> Vec['a, 'n] -> Vec['a, S['n]]
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.49: 	cons_ty = cons : forall 'a. 'a -> Vec['a, 'n] -> Vec['a, S['n]]
//│ ║        	          ^^^^
//│ ╙── expression of type `Z & ‘n` is not an instance of type `S`
//│ 'a -> Vec['a, 'n] -> Vec['a, S['n]]
//│   <:  cons_ty:
//│ 'a -> Vec['a, 'n] -> Vec['a, S['n]]

cons_ty2 = cons : forall 'a. 'a -> Vec['a, 'n] -> Vec['a, S['n]]
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.58: 	cons_ty2 = cons : forall 'a. 'a -> Vec['a, 'n] -> Vec['a, S['n]]
//│ ║        	           ^^^^
//│ ╙── expression of type `Z & ‘n` is not an instance of type `S`
//│ cons_ty2: 'a -> Vec['a, 'n] -> Vec['a, S['n]]

type Cons_ty = forall 'a. 'a -> Vec['a, 'n] -> Vec['a, S['n]]
//│ Defined type alias Cons_ty

cons_ty = cons : Cons_ty
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.68: 	cons_ty = cons : Cons_ty
//│ ║        	          ^^^^
//│ ╟── type `‘a` is not an instance of type `'a`
//│ ║  l.65: 	type Cons_ty = forall 'a. 'a -> Vec['a, 'n] -> Vec['a, S['n]]
//│ ║        	                      ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.65: 	type Cons_ty = forall 'a. 'a -> Vec['a, 'n] -> Vec['a, S['n]]
//│ ╙──      	                      ^^
//│ Cons_ty
//│   <:  cons_ty:
//│ 'a -> Vec['a, 'n] -> Vec['a, S['n]]
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.68: 	cons_ty = cons : Cons_ty
//│ ║        	^^^^^^^^^^^^^^
//│ ╙── expression of type `‘n_531 & ~s` is not an instance of type `S`

cons_ty3 = cons : Cons_ty
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.86: 	cons_ty3 = cons : Cons_ty
//│ ║        	           ^^^^
//│ ╟── type `‘a` is not an instance of type `'a`
//│ ║  l.65: 	type Cons_ty = forall 'a. 'a -> Vec['a, 'n] -> Vec['a, S['n]]
//│ ║        	                      ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.65: 	type Cons_ty = forall 'a. 'a -> Vec['a, 'n] -> Vec['a, S['n]]
//│ ╙──      	                      ^^
//│ cons_ty3: Cons_ty

def cons h (t: Vec['a, 'n]) k = k (Cons h t)
//│ cons: anything -> (forall 'a, 'n. Vec['a, 'n] -> (forall 'b. ((Cons['a, 'n] with {head: nothing, tail: Vec['a, 'n]}) -> 'b) -> 'b))

cons : Cons_ty
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.101: 	cons : Cons_ty
//│ ║         	^^^^
//│ ╙── expression of type `‘n` does not match type `S[?] | ~Z`
//│ res: Cons_ty

def cons h (t: Vec['a, 'n]) k = k (Cons h t)
//│ cons: anything -> (forall 'a, 'n. Vec['a, 'n] -> (forall 'b. ((Cons['a, 'n] with {head: nothing, tail: Vec['a, 'n]}) -> 'b) -> 'b))

cons : Cons_ty
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.111: 	cons : Cons_ty
//│ ║         	^^^^
//│ ╟── type `‘a` is not an instance of type `'a`
//│ ║  l.65: 	type Cons_ty = forall 'a. 'a -> Vec['a, 'n] -> Vec['a, S['n]]
//│ ║        	                      ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.65: 	type Cons_ty = forall 'a. 'a -> Vec['a, 'n] -> Vec['a, S['n]]
//│ ╙──      	                      ^^
//│ res: Cons_ty


// v0 = nil

// v0_ty = v0 : Vec[int, Z]

v1_ = Cons 1 nil
//│ v1_: Cons[1, 'P] with {tail: forall 'a. (Nil -> 'a) -> 'a}

v1_ty = v1_ : Cons[int, Z]
//│ v1_ty: Cons[int, Z]

v1_0 = cons 1 nil
//│ v1_0: ((Cons[nothing, 'P] with {tail: Vec[nothing, 'P]}) -> 'a) -> 'a

v1_0 : Vec[int, S[Z]]
//│ res: Vec[int, S[Z]]

v1_1 k = k v1_
//│ v1_1: ((forall 'P. Cons[1, 'P] with {tail: forall 'a. (Nil -> 'a) -> 'a}) -> 'b) -> 'b

:e
v1_1 : Vec[int, S[Z]]
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.144: 	v1_1 : Vec[int, S[Z]]
//│ ║         	^^^^
//│ ╟── application of type `Z` does not match type `nothing`
//│ ║  l.29: 	def Nil = Nil { size = Z{} }
//│ ║        	                       ^^^
//│ ╟── Note: class Z is defined at:
//│ ║  l.8: 	class Z
//│ ╙──     	      ^
//│ res: Vec[int, S[Z]]


v1_tty = cons_ty 1 nil_ty
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.157: 	v1_tty = cons_ty 1 nil_ty
//│ ║         	         ^^^^^^^^^^^^^^^^
//│ ╟── type `Z` is not an instance of type `'n`
//│ ║  l.43: 	nil_ty = nil : Vec[int, Z]
//│ ╙──      	                        ^
//│ v1_tty: error

v1_tty = cons_ty2 1 nil_ty
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.166: 	v1_tty = cons_ty2 1 nil_ty
//│ ║         	         ^^^^^^^^^^^^^^^^^
//│ ╟── type `Z` is not an instance of type `'n`
//│ ║  l.43: 	nil_ty = nil : Vec[int, Z]
//│ ╙──      	                        ^
//│ v1_tty: error

v1_tty = cons_ty3 1 nil_ty
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.175: 	v1_tty = cons_ty3 1 nil_ty
//│ ║         	         ^^^^^^^^^^^^^^^^^
//│ ╟── type `Z` does not match type `{S#P :> ?a <: ?b} | ~Z`
//│ ║  l.43: 	nil_ty = nil : Vec[int, Z]
//│ ╙──      	                        ^
//│ v1_tty: error


v2 = cons 1 (cons 2 nil)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.185: 	v2 = cons 1 (cons 2 nil)
//│ ║         	     ^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `‘n` is not an instance of type `S`
//│ ╟── Note: constraint arises from applied type reference:
//│ ║  l.21: 	type Vec[A, N] = forall 'r. (forall 'p. (Nil & { size: N } | Cons[A, S['p]] & Cons[A, N]) -> 'r) -> 'r
//│ ╙──      	                                                                     ^^^^^
//│ v2: error


def impossible x = case x of {}
//│ impossible: nothing -> nothing

def head1 vec = vec (fun v -> case v of {
  | Nil -> impossible v.size
  | Cons -> v.head
  })
//│ head1: ((forall 'head. ((Cons[?, ?]\size\tail with {head: 'head}) | Nil & {size: nothing}) -> 'head) -> 'a) -> 'a

def head1_ty : Vec['a, S['p]] -> 'a
head1_ty = head1
//│ head1_ty: Vec['a, S['p]] -> 'a
//│ ((forall 'head. ((Cons[?, ?]\size\tail with {head: 'head}) | Nil & {size: nothing}) -> 'head) -> 'a) -> 'a
//│   <:  head1_ty:
//│ Vec['a, S['p]] -> 'a

// FIXME works without `:GeneralizeCurriedFunctions`!
def head2 (vec: Vec['a, S['p]]) = vec (fun v -> case v of {
  | Nil -> impossible v.size
  | Cons -> v.head
  })
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.213: 	def head2 (vec: Vec['a, S['p]]) = vec (fun v -> case v of {
//│ ║         	                                  ^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.214: 	  | Nil -> impossible v.size
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.215: 	  | Cons -> v.head
//│ ║         	^^^^^^^^^^^^^^^^^^
//│ ║  l.216: 	  })
//│ ║         	^^^^
//│ ╟── type `‘a` is not an instance of type `'r`
//│ ║  l.213: 	def head2 (vec: Vec['a, S['p]]) = vec (fun v -> case v of {
//│ ║         	                    ^^
//│ ╟── but it flows into field selection with expected type `‘r`
//│ ║  l.215: 	  | Cons -> v.head
//│ ║         	            ^^^^^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.21: 	type Vec[A, N] = forall 'r. (forall 'p. (Nil & { size: N } | Cons[A, S['p]] & Cons[A, N]) -> 'r) -> 'r
//│ ╙──      	                        ^^
//│ head2: Vec[?, S['p]] -> error

head1 v1
head1 v2
//│ ╔══[ERROR] identifier not found: v1
//│ ║  l.237: 	head1 v1
//│ ╙──       	      ^^
//│ res: error
//│ res: error

:e
head1 nil
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.246: 	head1 nil
//│ ║         	^^^^^^^^^
//│ ╟── application of type `Z` does not match type `nothing`
//│ ║  l.29: 	def Nil = Nil { size = Z{} }
//│ ║        	                       ^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.196: 	def impossible x = case x of {}
//│ ║         	                        ^
//│ ╟── from field selection:
//│ ║  l.200: 	  | Nil -> impossible v.size
//│ ║         	                      ^^^^^^
//│ ╟── Note: class Z is defined at:
//│ ║  l.8: 	class Z
//│ ╙──     	      ^
//│ res: error


rec def sum vec = vec (fun v -> case v of {
  | Nil -> 0
  | Cons -> v.head + sum v.tail
  })
//│ sum: 'a -> 'b
//│   where
//│     'a <: (((Cons[?, ?]\size with {head: int, tail: 'a}) | Nil) -> int) -> (int & 'b)

def sum_ty : Vec[int, 'n] -> int
//│ sum_ty: Vec[int, 'n] -> int

// FIXME should be a cycle error
sum_ty = sum
//│ 'a -> 'b
//│   where
//│     'a <: (((Cons[?, ?]\size with {head: int, tail: 'a}) | Nil) -> int) -> (int & 'b)
//│   <:  sum_ty:
//│ Vec[int, 'n] -> int
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a, ?sum, ?b, ?c, ?d, ?tail, ?head, ?e, ?f, ?g. ?sum <: forall ?n. Vec[int, ?n] -> int` exceeded recursion depth limit (300)
//│ ║  l.277: 	sum_ty = sum
//│ ║         	^^^^^^^^^^^^
//│ ╟── while constraining:  ‹∀ 0. (‹∀ 1. (((Nil & {size: (‘n' | S[((((((((((‘p_1762' & ‘p_1765') & ‘p_1768') & ‘p_1771') & ‘p_1774') & ‘p_1777') & ‘p_1780') & ‘p_1783') & ‘p_1786') & ‘p_1789') & ‘p_1792')])}) | (Cons[int<number>,S['p43'']] & Cons[int<number>,(‘n' | S[((((((((((‘p_1762' & ‘p_1765') & ‘p_1768') & ‘p_1771') & ‘p_1774') & ‘p_1777') & ‘p_1780') & ‘p_1783') & ‘p_1786') & ‘p_1789') & ‘p_1792')])])) -> 'r42')› -> 'r42')›  <!<  (((α1706_1752' -> (0<int,number> | α1713_1757')),) -> α1714_1758')
//│ ╟── while constraining:  Vec[int<number>,(‘n' | S[((((((((((‘p_1762' & ‘p_1765') & ‘p_1768') & ‘p_1771') & ‘p_1774') & ‘p_1777') & ‘p_1780') & ‘p_1783') & ‘p_1786') & ‘p_1789') & ‘p_1792')])]  <!<  (((α1706_1752' -> (0<int,number> | α1713_1757')),) -> α1714_1758')
//│ ╟── while constraining:  Vec[int<number>,(‘n' | S[((((((((((‘p_1762' & ‘p_1765') & ‘p_1768') & ‘p_1771') & ‘p_1774') & ‘p_1777') & ‘p_1780') & ‘p_1783') & ‘p_1786') & ‘p_1789') & ‘p_1792')])]  <!<  α1705_1751'
//│ ╟── while constraining:  Vec[int<number>,(‘n' | S[((((((((((‘p_1762' & ‘p_1765') & ‘p_1768') & ‘p_1771') & ‘p_1774') & ‘p_1777') & ‘p_1780') & ‘p_1783') & ‘p_1786') & ‘p_1789') & ‘p_1792')])]  <!<  tail1711_1755'
//│ ╟── while constraining:  (cons<> & {Cons#N: mut (S[((((((((((‘p_1762' & ‘p_1765') & ‘p_1768') & ‘p_1771') & ‘p_1774') & ‘p_1777') & ‘p_1780') & ‘p_1783') & ‘p_1786') & ‘p_1789') & ‘p_1792')] | ‘n')..((S[‘p_1792'] & ‘n') | S[((((((((((‘p_1762' & ‘p_1765') & ‘p_1768') & ‘p_1771') & ‘p_1774') & ‘p_1777') & ‘p_1780') & ‘p_1783') & ‘p_1786') & ‘p_1789') | ‘p_1792')]), size: S[(‘n' | S[((((((((((‘p_1762' & ‘p_1765') & ‘p_1768') & ‘p_1771') & ‘p_1774') & ‘p_1777') & ‘p_1780') & ‘p_1783') & ‘p_1786') & ‘p_1789') & ‘p_1792')])], Cons#A: mut ..int<number>, tail: Vec[int<number>,(‘n' | S[((((((((((‘p_1762' & ‘p_1765') & ‘p_1768') & ‘p_1771') & ‘p_1774') & ‘p_1777') & ‘p_1780') & ‘p_1783') & ‘p_1786') & ‘p_1789') & ‘p_1792')])], head: int<number>})  <!<  {tail: tail1711_1755'}
//│ ╟── while constraining:  (cons<> & {Cons#N: mut (S[((((((((((‘p_1762' & ‘p_1765') & ‘p_1768') & ‘p_1771') & ‘p_1774') & ‘p_1777') & ‘p_1780') & ‘p_1783') & ‘p_1786') & ‘p_1789') & ‘p_1792')] | ‘n')..((S[‘p_1792'] & ‘n') | S[((((((((((‘p_1762' & ‘p_1765') & ‘p_1768') & ‘p_1771') & ‘p_1774') & ‘p_1777') & ‘p_1780') & ‘p_1783') & ‘p_1786') & ‘p_1789') | ‘p_1792')]), size: S[(‘n' | S[((((((((((‘p_1762' & ‘p_1765') & ‘p_1768') & ‘p_1771') & ‘p_1774') & ‘p_1777') & ‘p_1780') & ‘p_1783') & ‘p_1786') & ‘p_1789') & ‘p_1792')])], Cons#A: mut ..int<number>, tail: Vec[int<number>,(‘n' | S[((((((((((‘p_1762' & ‘p_1765') & ‘p_1768') & ‘p_1771') & ‘p_1774') & ‘p_1777') & ‘p_1780') & ‘p_1783') & ‘p_1786') & ‘p_1789') & ‘p_1792')])], head: int<number>})  <!<  α1708_1754'
//│ ╟── while constraining:  (Cons[int<number>,S[‘p_1792'..‘p_1792']..S[‘p_1792'..‘p_1792']] & Cons[int<number>,(‘n' | S[(((((((((‘p_1762' & ‘p_1765') & ‘p_1768') & ‘p_1771') & ‘p_1774') & ‘p_1777') & ‘p_1780') & ‘p_1783') & ‘p_1786') & ‘p_1789')])])  <!<  ((nil<> & α1707_1753') | ((cons<> & α1708_1754') & ~(nil<>)))
//│ ╟── while constraining:  ((Nil & {size: (‘n' | S[(((((((((‘p_1762' & ‘p_1765') & ‘p_1768') & ‘p_1771') & ‘p_1774') & ‘p_1777') & ‘p_1780') & ‘p_1783') & ‘p_1786') & ‘p_1789')])}) | (Cons[int<number>,S[‘p_1792'..‘p_1792']..S[‘p_1792'..‘p_1792']] & Cons[int<number>,(‘n' | S[(((((((((‘p_1762' & ‘p_1765') & ‘p_1768') & ‘p_1771') & ‘p_1774') & ‘p_1777') & ‘p_1780') & ‘p_1783') & ‘p_1786') & ‘p_1789')])]))  <!<  ((nil<> & α1707_1753') | ((cons<> & α1708_1754') & ~(nil<>)))
//│ ╟── while constraining:  ((Nil & {size: (‘n' | S[(((((((((‘p_1762' & ‘p_1765') & ‘p_1768') & ‘p_1771') & ‘p_1774') & ‘p_1777') & ‘p_1780') & ‘p_1783') & ‘p_1786') & ‘p_1789')])}) | (Cons[int<number>,S[‘p_1792'..‘p_1792']..S[‘p_1792'..‘p_1792']] & Cons[int<number>,(‘n' | S[(((((((((‘p_1762' & ‘p_1765') & ‘p_1768') & ‘p_1771') & ‘p_1774') & ‘p_1777') & ‘p_1780') & ‘p_1783') & ‘p_1786') & ‘p_1789')])]))  <!<  α1706_1752'
//│ ╟── while constraining:  ((Nil & {size: (‘n' | S[(((((((((‘p_1762' & ‘p_1765') & ‘p_1768') & ‘p_1771') & ‘p_1774') & ‘p_1777') & ‘p_1780') & ‘p_1783') & ‘p_1786') & ‘p_1789')])}) | (Cons[int<number>,S[‘p'']] & Cons[int<number>,(‘n' | S[(((((((((‘p_1762' & ‘p_1765') & ‘p_1768') & ‘p_1771') & ‘p_1774') & ‘p_1777') & ‘p_1780') & ‘p_1783') & ‘p_1786') & ‘p_1789')])]))  <!<  α1706_1752'
//│ ╟── while constraining:  (α1706_1752' -> (0<int,number> | α1713_1757'))  <!<  ‹∀ 1. (((Nil & {size: (‘n' | S[(((((((((‘p_1762' & ‘p_1765') & ‘p_1768') & ‘p_1771') & ‘p_1774') & ‘p_1777') & ‘p_1780') & ‘p_1783') & ‘p_1786') & ‘p_1789')])}) | (Cons[int<number>,S['p43_1790'']] & Cons[int<number>,(‘n' | S[(((((((((‘p_1762' & ‘p_1765') & ‘p_1768') & ‘p_1771') & ‘p_1774') & ‘p_1777') & ‘p_1780') & ‘p_1783') & ‘p_1786') & ‘p_1789')])])) -> 'r42_1791')›
//│ ╟── while constraining:  ((α1706_1752' -> (0<int,number> | α1713_1757')),)  <!<  (‹∀ 1. (((Nil & {size: (‘n' | S[(((((((((‘p_1762' & ‘p_1765') & ‘p_1768') & ‘p_1771') & ‘p_1774') & ‘p_1777') & ‘p_1780') & ‘p_1783') & ‘p_1786') & ‘p_1789')])}) | (Cons[int<number>,S['p43_1790'']] & Cons[int<number>,(‘n' | S[(((((((((‘p_1762' & ‘p_1765') & ‘p_1768') & ‘p_1771') & ‘p_1774') & ‘p_1777') & ‘p_1780') & ‘p_1783') & ‘p_1786') & ‘p_1789')])])) -> 'r42_1791')›,)
//│ ╟── while constraining:  (‹∀ 1. (((Nil & {size: (‘n' | S[(((((((((‘p_1762' & ‘p_1765') & ‘p_1768') & ‘p_1771') & ‘p_1774') & ‘p_1777') & ‘p_1780') & ‘p_1783') & ‘p_1786') & ‘p_1789')])}) | (Cons[int<number>,S['p43_1790'']] & Cons[int<number>,(‘n' | S[(((((((((‘p_1762' & ‘p_1765') & ‘p_1768') & ‘p_1771') & ‘p_1774') & ‘p_1777') & ‘p_1780') & ‘p_1783') & ‘p_1786') & ‘p_1789')])])) -> 'r42_1791')› -> 'r42_1791')  <!<  (((α1706_1752' -> (0<int,number> | α1713_1757')),) -> α1714_1758')
//│ ╟── while constraining:  ‹∀ 0. (‹∀ 1. (((Nil & {size: (‘n' | S[(((((((((‘p_1762' & ‘p_1765') & ‘p_1768') & ‘p_1771') & ‘p_1774') & ‘p_1777') & ‘p_1780') & ‘p_1783') & ‘p_1786') & ‘p_1789')])}) | (Cons[int<number>,S['p43'']] & Cons[int<number>,(‘n' | S[(((((((((‘p_1762' & ‘p_1765') & ‘p_1768') & ‘p_1771') & ‘p_1774') & ‘p_1777') & ‘p_1780') & ‘p_1783') & ‘p_1786') & ‘p_1789')])])) -> 'r42')› -> 'r42')›  <!<  (((α1706_1752' -> (0<int,number> | α1713_1757')),) -> α1714_1758')
//│ ╟── while constraining:  Vec[int<number>,(‘n' | S[(((((((((‘p_1762' & ‘p_1765') & ‘p_1768') & ‘p_1771') & ‘p_1774') & ‘p_1777') & ‘p_1780') & ‘p_1783') & ‘p_1786') & ‘p_1789')])]  <!<  (((α1706_1752' -> (0<int,number> | α1713_1757')),) -> α1714_1758')
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  ((Nil & {size: ‘n'}) | (Cons[Int,S[‘p_1762'..‘p_1762']..S[‘p_1762'..‘p_1762']] & Cons[Int,‘n']))  <!<  ((nil<> & α1707_1753') | ((cons<> & α1708_1754') & ~(nil<>)))
//│ ╟── while constraining:  ((Nil & {size: ‘n'}) | (Cons[Int,S[‘p_1762'..‘p_1762']..S[‘p_1762'..‘p_1762']] & Cons[Int,‘n']))  <!<  α1706_1752'
//│ ╟── while constraining:  ((Nil & {size: ‘n'}) | (Cons[Int,S[‘p'']] & Cons[Int,‘n']))  <!<  α1706_1752'
//│ ╟── while constraining:  (α1706_1752' -> (0<int,number> | α1713_1757'))  <!<  ‹∀ 1. (((Nil & {size: ‘n'}) | (Cons[Int,S['p43_1760'']] & Cons[Int,‘n'])) -> 'r42_1761')›
//│ ╟── while constraining:  ((α1706_1752' -> (0<int,number> | α1713_1757')),)  <!<  (‹∀ 1. (((Nil & {size: ‘n'}) | (Cons[Int,S['p43_1760'']] & Cons[Int,‘n'])) -> 'r42_1761')›,)
//│ ╟── while constraining:  (‹∀ 1. (((Nil & {size: ‘n'}) | (Cons[Int,S['p43_1760'']] & Cons[Int,‘n'])) -> 'r42_1761')› -> 'r42_1761')  <!<  (((α1706_1752' -> (0<int,number> | α1713_1757')),) -> α1714_1758')
//│ ╟── while constraining:  ‹∀ 0. (‹∀ 1. (((Nil & {size: ‘n'}) | (Cons[Int,S['p43'']] & Cons[Int,‘n'])) -> 'r42')› -> 'r42')›  <!<  (((α1706_1752' -> (0<int,number> | α1713_1757')),) -> α1714_1758')
//│ ╟── while constraining:  Vec[Int,‘n']  <!<  (((α1706_1752' -> (0<int,number> | α1713_1757')),) -> α1714_1758')
//│ ╟── while constraining:  Vec[Int,‘n']  <!<  α1705_1751'
//│ ╟── while constraining:  (Vec[Int,‘n'],)  <!<  (α1705_1751',)
//│ ╟── while constraining:  (α1705_1751' -> α1714_1758')  <!<  (Vec[Int,‘n'] -> Int)
//│ ╟── while constraining:  sum1704_1750'  <!<  (Vec[Int,‘n'] -> Int)
//│ ╟── while constraining:  ‹∀ 0. sum1704'›  <!<  (Vec[Int,‘n'] -> Int)
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. sum1704'››  <!<  (Vec[Int,‘n'] -> Int)
//│ ╙── while constraining:  ‹∀ 0. ‹∀ 0. sum1704'››  <!<  ‹∀ 0. (Vec[Int,'n1729'] -> Int)›


sum nil
//│ res: int

sum v1_0
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?b, ?sum, ?c, ?d, ?e, ?tail, ?head, ?f, ?g, ?h. ?sum <: (forall ?A, ?i, ?j, ?P, ?N, ?n, ?N0, ?tail0, ?a. ?j) -> ?k` exceeded recursion depth limit (300)
//│ ║  l.323: 	sum v1_0
//│ ║         	^^^^^^^^
//│ ╟── while constraining:  ((α1706_1822 -> (0<int,number> | α1713_1827)),)  <!<  (‹∀ 1. (((Nil & {size: ('n892_1837 | S[((((((((‘p_1862 & ‘p_1865) & ‘p_1868) & ‘p_1871) & ‘p_1874) & ‘p_1877) & ‘p_1880) & ‘p_1883) & ‘p_1886)])}) | (Cons['a891_1847,S['p43_1887'']] & Cons['a891_1847,('n892_1837 | S[((((((((‘p_1862 & ‘p_1865) & ‘p_1868) & ‘p_1871) & ‘p_1874) & ‘p_1877) & ‘p_1880) & ‘p_1883) & ‘p_1886)])])) -> 'r42_1888)›,)
//│ ╟── while constraining:  (‹∀ 1. (((Nil & {size: ('n892_1837 | S[((((((((‘p_1862 & ‘p_1865) & ‘p_1868) & ‘p_1871) & ‘p_1874) & ‘p_1877) & ‘p_1880) & ‘p_1883) & ‘p_1886)])}) | (Cons['a891_1847,S['p43_1887'']] & Cons['a891_1847,('n892_1837 | S[((((((((‘p_1862 & ‘p_1865) & ‘p_1868) & ‘p_1871) & ‘p_1874) & ‘p_1877) & ‘p_1880) & ‘p_1883) & ‘p_1886)])])) -> 'r42_1888)› -> 'r42_1888)  <!<  (((α1706_1822 -> (0<int,number> | α1713_1827)),) -> α1714_1828)
//│ ╟── while constraining:  ‹∀ 0. (‹∀ 1. (((Nil & {size: ('n892_1837 | S[((((((((‘p_1862 & ‘p_1865) & ‘p_1868) & ‘p_1871) & ‘p_1874) & ‘p_1877) & ‘p_1880) & ‘p_1883) & ‘p_1886)])}) | (Cons['a891_1847,S['p43'']] & Cons['a891_1847,('n892_1837 | S[((((((((‘p_1862 & ‘p_1865) & ‘p_1868) & ‘p_1871) & ‘p_1874) & ‘p_1877) & ‘p_1880) & ‘p_1883) & ‘p_1886)])])) -> 'r42')› -> 'r42')›  <!<  (((α1706_1822 -> (0<int,number> | α1713_1827)),) -> α1714_1828)
//│ ╟── while constraining:  Vec['a891_1847,('n892_1837 | S[((((((((‘p_1862 & ‘p_1865) & ‘p_1868) & ‘p_1871) & ‘p_1874) & ‘p_1877) & ‘p_1880) & ‘p_1883) & ‘p_1886)])]  <!<  (((α1706_1822 -> (0<int,number> | α1713_1827)),) -> α1714_1828)
//│ ╟── while constraining:  Vec['a891_1847,('n892_1837 | S[((((((((‘p_1862 & ‘p_1865) & ‘p_1868) & ‘p_1871) & ‘p_1874) & ‘p_1877) & ‘p_1880) & ‘p_1883) & ‘p_1886)])]  <!<  α1705_1821
//│ ╟── while constraining:  Vec['a891_1847,('n892_1837 | S[((((((((‘p_1862 & ‘p_1865) & ‘p_1868) & ‘p_1871) & ‘p_1874) & ‘p_1877) & ‘p_1880) & ‘p_1883) & ‘p_1886)])]  <!<  tail1711_1825
//│ ╟── while constraining:  (cons<> & {Cons#N: mut (S[((((((((‘p_1862 & ‘p_1865) & ‘p_1868) & ‘p_1871) & ‘p_1874) & ‘p_1877) & ‘p_1880) & ‘p_1883) & ‘p_1886)] | 'n892_1837)..((S[‘p_1886] & 'n892_1837) | S[((((((((‘p_1862 & ‘p_1865) & ‘p_1868) & ‘p_1871) & ‘p_1874) & ‘p_1877) & ‘p_1880) & ‘p_1883) | ‘p_1886)]), size: S[('n892_1837 | S[((((((((‘p_1862 & ‘p_1865) & ‘p_1868) & ‘p_1871) & ‘p_1874) & ‘p_1877) & ‘p_1880) & ‘p_1883) & ‘p_1886)])], Cons#A: mut ..'a891_1847, tail: Vec['a891_1847,('n892_1837 | S[((((((((‘p_1862 & ‘p_1865) & ‘p_1868) & ‘p_1871) & ‘p_1874) & ‘p_1877) & ‘p_1880) & ‘p_1883) & ‘p_1886)])], head: 'a891_1847})  <!<  {tail: tail1711_1825}
//│ ╟── while constraining:  (cons<> & {Cons#N: mut (S[((((((((‘p_1862 & ‘p_1865) & ‘p_1868) & ‘p_1871) & ‘p_1874) & ‘p_1877) & ‘p_1880) & ‘p_1883) & ‘p_1886)] | 'n892_1837)..((S[‘p_1886] & 'n892_1837) | S[((((((((‘p_1862 & ‘p_1865) & ‘p_1868) & ‘p_1871) & ‘p_1874) & ‘p_1877) & ‘p_1880) & ‘p_1883) | ‘p_1886)]), size: S[('n892_1837 | S[((((((((‘p_1862 & ‘p_1865) & ‘p_1868) & ‘p_1871) & ‘p_1874) & ‘p_1877) & ‘p_1880) & ‘p_1883) & ‘p_1886)])], Cons#A: mut ..'a891_1847, tail: Vec['a891_1847,('n892_1837 | S[((((((((‘p_1862 & ‘p_1865) & ‘p_1868) & ‘p_1871) & ‘p_1874) & ‘p_1877) & ‘p_1880) & ‘p_1883) & ‘p_1886)])], head: 'a891_1847})  <!<  α1708_1824
//│ ╟── while constraining:  (Cons['a891_1847,S[‘p_1886..‘p_1886]..S[‘p_1886..‘p_1886]] & Cons['a891_1847,('n892_1837 | S[(((((((‘p_1862 & ‘p_1865) & ‘p_1868) & ‘p_1871) & ‘p_1874) & ‘p_1877) & ‘p_1880) & ‘p_1883)])])  <!<  ((nil<> & α1707_1823) | ((cons<> & α1708_1824) & ~(nil<>)))
//│ ╟── while constraining:  ((Nil & {size: ('n892_1837 | S[(((((((‘p_1862 & ‘p_1865) & ‘p_1868) & ‘p_1871) & ‘p_1874) & ‘p_1877) & ‘p_1880) & ‘p_1883)])}) | (Cons['a891_1847,S[‘p_1886..‘p_1886]..S[‘p_1886..‘p_1886]] & Cons['a891_1847,('n892_1837 | S[(((((((‘p_1862 & ‘p_1865) & ‘p_1868) & ‘p_1871) & ‘p_1874) & ‘p_1877) & ‘p_1880) & ‘p_1883)])]))  <!<  ((nil<> & α1707_1823) | ((cons<> & α1708_1824) & ~(nil<>)))
//│ ╟── while constraining:  ((Nil & {size: ('n892_1837 | S[(((((((‘p_1862 & ‘p_1865) & ‘p_1868) & ‘p_1871) & ‘p_1874) & ‘p_1877) & ‘p_1880) & ‘p_1883)])}) | (Cons['a891_1847,S[‘p_1886..‘p_1886]..S[‘p_1886..‘p_1886]] & Cons['a891_1847,('n892_1837 | S[(((((((‘p_1862 & ‘p_1865) & ‘p_1868) & ‘p_1871) & ‘p_1874) & ‘p_1877) & ‘p_1880) & ‘p_1883)])]))  <!<  α1706_1822
//│ ╟── while constraining:  ((Nil & {size: ('n892_1837 | S[(((((((‘p_1862 & ‘p_1865) & ‘p_1868) & ‘p_1871) & ‘p_1874) & ‘p_1877) & ‘p_1880) & ‘p_1883)])}) | (Cons['a891_1847,S[‘p']] & Cons['a891_1847,('n892_1837 | S[(((((((‘p_1862 & ‘p_1865) & ‘p_1868) & ‘p_1871) & ‘p_1874) & ‘p_1877) & ‘p_1880) & ‘p_1883)])]))  <!<  α1706_1822
//│ ╟── while constraining:  (α1706_1822 -> (0<int,number> | α1713_1827))  <!<  ‹∀ 1. (((Nil & {size: ('n892_1837 | S[(((((((‘p_1862 & ‘p_1865) & ‘p_1868) & ‘p_1871) & ‘p_1874) & ‘p_1877) & ‘p_1880) & ‘p_1883)])}) | (Cons['a891_1847,S['p43_1884'']] & Cons['a891_1847,('n892_1837 | S[(((((((‘p_1862 & ‘p_1865) & ‘p_1868) & ‘p_1871) & ‘p_1874) & ‘p_1877) & ‘p_1880) & ‘p_1883)])])) -> 'r42_1885)›
//│ ╟── while constraining:  ((α1706_1822 -> (0<int,number> | α1713_1827)),)  <!<  (‹∀ 1. (((Nil & {size: ('n892_1837 | S[(((((((‘p_1862 & ‘p_1865) & ‘p_1868) & ‘p_1871) & ‘p_1874) & ‘p_1877) & ‘p_1880) & ‘p_1883)])}) | (Cons['a891_1847,S['p43_1884'']] & Cons['a891_1847,('n892_1837 | S[(((((((‘p_1862 & ‘p_1865) & ‘p_1868) & ‘p_1871) & ‘p_1874) & ‘p_1877) & ‘p_1880) & ‘p_1883)])])) -> 'r42_1885)›,)
//│ ╟── while constraining:  (‹∀ 1. (((Nil & {size: ('n892_1837 | S[(((((((‘p_1862 & ‘p_1865) & ‘p_1868) & ‘p_1871) & ‘p_1874) & ‘p_1877) & ‘p_1880) & ‘p_1883)])}) | (Cons['a891_1847,S['p43_1884'']] & Cons['a891_1847,('n892_1837 | S[(((((((‘p_1862 & ‘p_1865) & ‘p_1868) & ‘p_1871) & ‘p_1874) & ‘p_1877) & ‘p_1880) & ‘p_1883)])])) -> 'r42_1885)› -> 'r42_1885)  <!<  (((α1706_1822 -> (0<int,number> | α1713_1827)),) -> α1714_1828)
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  ‹∀ 4. α906_1832'''''›  <!<  ((nil<> & α1707_1823) | ((cons<> & α1708_1824) & ~(nil<>)))
//│ ╟── while constraining:  ‹∀ 4. α906_1832'''''›  <!<  α1706_1822
//│ ╟── while constraining:  (‹∀ 4. α906_1832'''''›,)  <!<  (α1706_1822,)
//│ ╟── while constraining:  (α1706_1822 -> (0<int,number> | α1713_1827))  <!<  ((‹∀ 4. α906_1832'''''›,) -> α926_1850)
//│ ╟── while constraining:  (α1706_1822 -> (0<int,number> | α1713_1827))  <!<  α893_1849
//│ ╟── while constraining:  ((α1706_1822 -> (0<int,number> | α1713_1827)),)  <!<  (α893_1849,)
//│ ╟── while constraining:  (α893_1849 -> α926_1850)  <!<  (((α1706_1822 -> (0<int,number> | α1713_1827)),) -> α1714_1828)
//│ ╟── while constraining:  ‹∀ 3. (α893_1831'''' -> α926_1848'''')›  <!<  (((α1706_1822 -> (0<int,number> | α1713_1827)),) -> α1714_1828)
//│ ╟── while constraining:  α1268_1830  <!<  (((α1706_1822 -> (0<int,number> | α1713_1827)),) -> α1714_1828)
//│ ╟── while constraining:  ‹∀ 0. α1268'›  <!<  (((α1706_1822 -> (0<int,number> | α1713_1827)),) -> α1714_1828)
//│ ╟── while constraining:  ‹∀ 0. α1268'›  <!<  α1705_1821
//│ ╟── while constraining:  (‹∀ 0. α1268'›,)  <!<  (α1705_1821,)
//│ ╟── while constraining:  (α1705_1821 -> α1714_1828)  <!<  ((‹∀ 0. α1268'›,) -> α1819)
//│ ╟── while constraining:  sum1704_1820  <!<  ((‹∀ 0. α1268'›,) -> α1819)
//│ ╙── while constraining:  ‹∀ 0. sum1704'›  <!<  ((‹∀ 0. α1268'›,) -> α1819)
//│ res: error

sum v2
//│ res: error




// === === === ERROR CASES === === === //


:ShowRelativeLineNums
:AllowTypeErrors


def head1_ty v = case v of {
  | Nil -> impossible v.size
  | Cons -> v.head
  }
//│ ((Cons[?, ?]\size\tail with {head: 'head}) | Nil & {size: nothing}) -> 'head
//│   <:  head1_ty:
//│ Vec['a, S['p]] -> 'a
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.+1: 	def head1_ty v = case v of {
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.+2: 	  | Nil -> impossible v.size
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.+3: 	  | Cons -> v.head
//│ ║        	^^^^^^^^^^^^^^^^^^
//│ ║  l.+4: 	  }
//│ ║        	^^^
//│ ╟── type `(forall ?p. (Cons[‘a, in S[in ‘p & ?p out ?p | ‘p] out S[in ?p | ‘p out ‘p & ?p]] | (Nil with {size: S[‘p]})) -> ?r) -> ?r` does not match type `Cons[?, ?] & ?a | Nil & ?b`
//│ ║  l.21: 	type Vec[A, N] = forall 'r. (forall 'p. (Nil & { size: N } | Cons[A, S['p]] & Cons[A, N]) -> 'r) -> 'r
//│ ║        	                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.+1: 	def head1_ty v = case v of {
//│ ╙──      	                      ^


sum v1_ty
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	sum v1_ty
//│ ║        	^^^^^^^^^
//│ ╟── type `Cons[int, Z]` is not a function
//│ ║  l.131: 	v1_ty = v1_ : Cons[int, Z]
//│ ║         	              ^^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `(?a -> ?b) -> ?c`
//│ ║  l.+1: 	sum v1_ty
//│ ║        	    ^^^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.265: 	rec def sum vec = vec (fun v -> case v of {
//│ ║         	                  ^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.266: 	  | Nil -> 0
//│ ║         	^^^^^^^^^^^^
//│ ║  l.267: 	  | Cons -> v.head + sum v.tail
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.268: 	  })
//│ ║         	^^^^
//│ ╟── from reference:
//│ ║  l.265: 	rec def sum vec = vec (fun v -> case v of {
//│ ╙──       	                  ^^^
//│ res: error


