:GeneralizeCurriedFunctions
:DistributeForalls

// ============ Dummy classes to represent the types in the examples ============

class List[a]
  method Head: a
  method Tail: List[a]
//│ Defined class List[+a]
//│ Declared List.Head: List['a] -> 'a
//│ Declared List.Tail: List['a] -> List['a]

class Cons[a]: List[a] & { head: a; tail: List[a] }
  method Head = this.head
  method Tail = this.tail
def cons[a]: a -> List[a] -> List[a]
def cons head tail = Cons { head; tail }
//│ Defined class Cons[+a]
//│ Defined Cons.Head: Cons['a] -> 'a
//│ Defined Cons.Tail: Cons['a] -> List['a]
//│ cons: 'a -> List['a] -> List['a]
//│     = <missing implementation>
//│ 'b -> (forall 'c. 'c -> (forall 'b, 'c, 'a. (Cons['a | 'b] with {head: 'b, tail: 'c}
//│   where
//│     'c <: List['a]
//│     'c <: List['a])))
//│   <:  cons:
//│ 'a -> List['a] -> List['a]
//│     = [Function: cons]

class Nil[a]: List[a]
  method Head = error
  method Tail = this
def nil: List['a]
def nil = Nil {}
//│ Defined class Nil[+a]
//│ Defined Nil.Head: Nil[?] -> nothing
//│ Defined Nil.Tail: (Nil['a] & 'this) -> (Nil['a] & 'this)
//│ nil: List[nothing]
//│    = <missing implementation>
//│ Nil[nothing]
//│   <:  nil:
//│ List[nothing]
//│    = Nil {}

// ============ Type signatures for functions used in the examples ============

def head: forall 'a. List['a] -> 'a
def head l = l.Head
//│ head: List['a] -> 'a
//│     = <missing implementation>
//│ 'a -> (forall 'a, 'b. ('b
//│   where
//│     'a <: List['b]))
//│   <:  head:
//│ List['a] -> 'a
//│     = [Function: head]

def tail: forall 'a. List['a] -> List['a]
def tail l = l.Tail
//│ tail: List['a] -> List['a]
//│     = <missing implementation>
//│ 'b -> (forall 'b, 'a. (List['a]
//│   where
//│     'b <: List['a]))
//│   <:  tail:
//│ List['a] -> List['a]
//│     = [Function: tail]

def is_empty: forall 'a. List['a] -> bool
def is_empty l = eq l nil
//│ is_empty: List[?] -> bool
//│         = <missing implementation>
//│ anything -> bool
//│   <:  is_empty:
//│ List[?] -> bool
//│         = [Function: is_empty]



// (* Use the value restriction ! *)

// type option ('a) = None | Some of 'a
class None
class Some[a]: { val: a }
type Option[a] = None | Some[a]
def None = None {}
def Some val = Some { val }
//│ Defined class None
//│ Defined class Some[+a]
//│ Defined type alias Option[+a]
//│ None: None
//│     = None {}
//│ Some: 'a -> Some['a]
//│     = [Function: Some1]

// let create_hashtbl () = []
def create_hashtbl _ = nil
//│ create_hashtbl: anything -> List[nothing]
//│               = [Function: create_hashtbl]

// let hashtbl_add table key element = (key, element) :: table
def hashtbl_add table key element = cons ((key, element)) table
//│ hashtbl_add: 'a -> (forall 'b. 'b -> (forall 'c. 'c -> (forall 'a, 'b, 'c, 'd. (List[('b, 'c,) | 'd]
//│   where
//│     'a <: List['d]))))
//│            = [Function: hashtbl_add]

// let rec find table key = 
//   if nil table then None
//   else if fst (car table) = key then Some (snd (car table))
//   else find (cdr table) key

rec def find table key =
  if is_empty table then None
  else if eq (head table)._1 key then Some (head table)._2
  else find (tail table) key
//│ find: List[?] -> anything -> (None | Some[nothing])
//│     = [Function: find]

// ^ FIXME type pp error
// :ns
// find

:ng
find(error:List[(int, string)])(unit)
//│ res: None | Some[string]

def find_A: List['a] -> anything -> (None | Some['a])
//│ find_A: List['a] -> anything -> (None | Some['a])
//│       = <missing implementation>

:e // * Still doesn't work:
def find_A table key =
  if is_empty table then None
  else if eq (head table)._1 key then Some (head table)._2
  else find_A (tail table) key
//│ 'b -> 'b -> (forall 'b, 'c, 'a. (None | Some['c] | Some['a]
//│   where
//│     'b <: List['b] & List[{_1: 'b}] & List[{_2: 'c}] & List['a]
//│     'b <: List['b] & List[{_1: 'b}] & List[{_2: 'c}] & List['a]
//│     'b <: List['b] & List[{_1: 'b}] & List[{_2: 'c}] & List['a]
//│     'b <: List['b] & List[{_1: 'b}] & List[{_2: 'c}] & List['a]
//│     'b <: List['b] & List[{_1: 'b}] & List[{_2: 'c}] & List['a]))
//│   <:  find_A:
//│ List['a] -> anything -> (None | Some['a])
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.134: 	def find_A table key =
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.135: 	  if is_empty table then None
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.136: 	  else if eq (head table)._1 key then Some (head table)._2
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.137: 	  else find_A (tail table) key
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘a` does not have field '_1'
//│ ║  l.129: 	def find_A: List['a] -> anything -> (None | Some['a])
//│ ║         	                 ^^
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.136: 	  else if eq (head table)._1 key then Some (head table)._2
//│ ║         	             ^^^^^^^^^^^^^^^
//│ ╟── from quantified type variable:
//│ ║  l.48: 	def head: forall 'a. List['a] -> 'a
//│ ╙──      	                 ^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.134: 	def find_A table key =
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.135: 	  if is_empty table then None
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.136: 	  else if eq (head table)._1 key then Some (head table)._2
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.137: 	  else find_A (tail table) key
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘a` does not have field '_2'
//│ ║  l.129: 	def find_A: List['a] -> anything -> (None | Some['a])
//│ ║         	                 ^^
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.136: 	  else if eq (head table)._1 key then Some (head table)._2
//│ ║         	                                           ^^^^^^^^^^^^^^^
//│ ╟── from quantified type variable:
//│ ║  l.48: 	def head: forall 'a. List['a] -> 'a
//│ ╙──      	                 ^^
//│       = <no result>
//│         find_A is not implemented

// let nfind table key =
//   begin match find table key with
//   | None -> fun f x -> x
//   | Some n -> n
//   end
def nfind table key =
  let opt = find table key in
  case opt of
  { None -> fun f -> fun x -> x
  | Some -> opt.val
  }
//│ nfind: List[?] -> anything -> anything -> (forall 'a. 'a -> 'a)
//│      = [Function: nfind]

// type Int = ['a] ('a -> 'a) -> ('a -> 'a)
type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ Defined type alias ChurchInt

// let succ (n:Int) = fun f x -> f (n f x)
def succ (n: ChurchInt) = fun f -> fun x -> f (n f x)
def succ_ n = fun f -> fun x -> f (n f x)
//│ succ: ChurchInt -> (forall 'a. 'a -> (forall 'b. 'b -> (forall 'a, 'b, 'c, 'd, 'e. ('e
//│   where
//│     'c <: 'a -> 'b -> 'd
//│     'a <: 'd -> 'e))))
//│     = [Function: succ]
//│ succ_: 'a -> (forall 'b. 'b -> (forall 'c. 'c -> (forall 'a, 'b, 'c, 'd, 'e. ('e
//│   where
//│     'a <: 'b -> 'c -> 'd
//│     'b <: 'd -> 'e))))
//│      = [Function: succ_]

// let add (n:Int) (m:Int) = n succ m
def add (n: ChurchInt) (m: ChurchInt) = n succ m
def add_ n m = n succ_ m
//│ add: ChurchInt -> ChurchInt -> (forall 'a. ('b
//│   where
//│     'a <: (ChurchInt -> (forall 'c. 'c -> (forall 'd. 'd -> (forall 'c, 'd, 'e, 'f, 'g. ('g
//│   where
//│     'e <: 'c -> 'd -> 'f
//│     'c <: 'f -> 'g))))) -> ChurchInt -> 'b))
//│    = [Function: add]
//│ add_: 'a -> (forall 'b. 'b -> (forall 'a. ('c
//│   where
//│     'a <: (forall 'd. 'd -> (forall 'e. 'e -> (forall 'f. 'f -> (forall 'd, 'e, 'f, 'g, 'h. ('h
//│   where
//│     'd <: 'e -> 'f -> 'g
//│     'e <: 'g -> 'h))))) -> 'b -> 'c)))
//│     = [Function: add_]

// let printInt (n:Int) = print (n (fun x -> x+1) 0)
def printInt (n: ChurchInt) = toString (n (fun x -> x + 1) 0)
def printInt_ n = toString (n (fun x -> x + 1) 0)
//│ printInt: ChurchInt -> (forall 'a. (string
//│   where
//│     'a <: (int -> int) -> 0 -> anything))
//│         = [Function: printInt]
//│ printInt_: 'a -> (forall 'a. (string
//│   where
//│     'a <: (int -> int) -> 0 -> 'a))
//│          = [Function: printInt_]

// let table = create_hashtbl ()
// let table = hashtbl_add table "one" (fun f x -> f x)
// let table = hashtbl_add table "two" (fun f x -> f (f x))
table = create_hashtbl null
table = hashtbl_add table "one" (fun f -> fun x -> f x)
table = hashtbl_add table "two" (fun f -> fun x -> f (f x))
//│ table: List[nothing]
//│      = Nil {}
//│ table: List[("one", forall 'a. 'a -> (forall 'b. 'b -> (forall 'a, 'b, 'c. ('c
//│   where
//│     'a <: 'b -> 'c))),) | 'd]
//│   where
//│     'e <: List['d]
//│      = Cons { head: [ 'one', [Function (anonymous)] ], tail: Nil {} }
//│ table: List[("two", forall 'a. 'a -> (forall 'b. 'b -> (forall 'a, 'b, 'c, 'd. ('d
//│   where
//│     'a <: 'b -> 'c & 'c -> 'd))),) | 'e]
//│   where
//│     'f <: List['e]
//│      = Cons {
//│          head: [ 'two', [Function (anonymous)] ],
//│          tail: Cons { head: [ 'one', [Function (anonymous)] ], tail: Nil {} }
//│        }

// let zog =
//   printInt (add (nfind table "one") (nfind table "two"))

// * Note: this one requires `:DistributeForalls`
zog = printInt (add (nfind table "one") (nfind table "two"))
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.276: 	zog = printInt (add (nfind table "one") (nfind table "two"))
//│ ║         	                ^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.201: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║         	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.201: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──       	                        ^^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.276: 	zog = printInt (add (nfind table "one") (nfind table "two"))
//│ ║         	                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.201: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║         	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.201: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──       	                        ^^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.276: 	zog = printInt (add (nfind table "one") (nfind table "two"))
//│ ║         	      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.201: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║         	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.201: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──       	                        ^^
//│ zog: error | string
//│   where
//│     'a <: (int -> int) -> 0 -> anything
//│    = '0'

// Repro:

a = add (nfind table "one")
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.311: 	a = add (nfind table "one")
//│ ║         	    ^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.201: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║         	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.201: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──       	                        ^^
//│ a: ChurchInt -> (forall 'a. ('b
//│   where
//│     'a <: (ChurchInt -> (forall 'c. 'c -> (forall 'd. 'd -> (forall 'c, 'd, 'e, 'f, 'g. ('g
//│   where
//│     'e <: 'c -> 'd -> 'f
//│     'c <: 'f -> 'g))))) -> ChurchInt -> 'b)) | error
//│  = [Function (anonymous)]

b = (nfind table "two")
//│ b: ('a & 'b) -> (forall 'c, 'd. ('c & 'd) -> (forall 'a, 'b, 'c, 'd, 'e, 'f. ('c | 'f
//│   where
//│     'a <: 'd -> 'e & 'e -> 'f
//│     'b <: 'd -> 'f)))
//│  = [Function (anonymous)]

// * Note: this one requires `:DistributeForalls`
// :d
a b
//│ res: error | 'a
//│   where
//│     'b <: (ChurchInt -> (forall 'c. 'c -> (forall 'd. 'd -> (forall 'c, 'd, 'e, 'f, 'g. ('g
//│   where
//│     'e <: 'c -> 'd -> 'f
//│     'c <: 'f -> 'g))))) -> ChurchInt -> 'a
//│    = [Function (anonymous)]

zog_ = printInt_ (add_ (nfind table "one") (nfind table "two"))
//│ zog_: string
//│   where
//│     'a <: (int -> int) -> 0 -> anything
//│     = '0'

