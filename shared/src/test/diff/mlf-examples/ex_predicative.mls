:NoRecursiveTypes
:GeneralizeCurriedFunctions

// type bot = 0;;
type Bot = forall 'a. 'a
//│ Defined type alias Bot

// (* Rank 6 with intersection types, untypable in predicative System F,
//    typable in impredicative System F *)


// let imp (z : bot) =
//   (fun (x : ['a] ('a -> 'u) -> 'v) -> x x)
//   (fun (y : 'a -> bot) -> y z y);;
def imp (z: Bot) =
  (fun (x: forall 'a. ('a -> 'u) -> 'v) -> x x)
  (fun (y: 'a -> Bot) -> y z y)
def imp' z =
  (fun x -> x x)
  (fun y -> y z y)
//│ imp: Bot -> nothing
//│   where
//│     'a <: ‘a
//│    = [Function: imp]
//│ imp': ('a -> 'a -> (forall 'b, 'c. ('a -> 'b -> 'c & 'b) -> 'c) -> 'd & 'a) -> 'd
//│     = [Function: imp]


// (* Quelques constantes. *)

// type sid = ['a] 'a -> 'a
type Sid = forall 'a. 'a -> 'a
//│ Defined type alias Sid

// let id = fun x -> x
// ;;
def id = fun x -> x
//│ id: 'a -> 'a
//│   = [Function: id]

// let delta = fun (x:sid) -> x x
// ;;
def delta = fun (x: Sid) -> x x
def delta' = fun x -> x x
//│ delta: Sid -> Sid
//│      = [Function: delta]
//│ delta': ('a -> 'b & 'a) -> 'b
//│       = [Function: delta]

// delta id ;;
delta id
delta' id
//│ res: Sid
//│    = [Function: id]
//│ res: 'a -> 'a
//│    = [Function: id]

// let t a b c d e = (fun x -> a x x) ((fun y -> b (c y)) (d e)) ;;
def t a b c d e = (fun x -> a x x) ((fun y -> b (c y)) (d e))
//│ t: 'a -> (forall 'b. 'b -> (forall 'c. 'c -> (forall 'd. 'd -> (forall 'a, 'b, 'd, 'e, 'f. ('g -> 'f
//│   where
//│     'a <: 'e -> 'e -> 'f
//│     'b <: (forall 'c, 'h, 'i. (('i,)
//│   where
//│     'c <: 'h -> 'i)) -> 'e
//│     'd <: 'g -> 'h)))))
//│  = [Function: t]

// let t w z a b = (fun y -> (fun x -> w (x y) z) a) b ;;
def t w z a b = (fun y -> (fun x -> w (x y) z) a) b
//│ t: 'a -> (forall 'b. 'b -> 'a -> (forall 'a. ('c -> 'd
//│   where
//│     'a <: (forall 'e, 'c, 'f. (('f,)
//│   where
//│     'e <: 'c -> 'f)) -> 'b -> 'd)))
//│  = [Function: t1]

// let t y a = (fun x -> x (x y)) ((fun z -> z) (fun x -> a x)) ;;
def t y a = (fun x -> x (x y)) ((fun z -> z) (fun x -> a x))
//│ t: 'a -> (forall 'b, 'c. ('a -> 'b & 'b -> 'c) -> 'c)
//│  = [Function: t2]

// (* Rank 1 *)
// (fun x -> fun y -> x y) (fun y -> fun x -> x y) ;;
(fun x -> fun y -> x y) (fun y -> fun x -> x y)
//│ res: 'a -> 'b
//│   where
//│     'c <: 'a -> 'b
//│    = [Function (anonymous)]

// (* Rank 3 *)
// (fun x -> fun y -> x) delta ;;
(fun x -> fun y -> x) delta
(fun x -> fun y -> x) delta'
//│ res: anything -> Sid -> Sid
//│    = [Function (anonymous)]
//│ res: anything -> (forall 'a, 'b. ('a -> 'b & 'a) -> 'b)
//│    = [Function (anonymous)]

// (* Rank 5 *)
// (fun x -> fun y -> x y) (fun y -> fun x -> x y) delta ;;
(fun x -> fun y -> x y) (fun y -> fun x -> x y) delta
(fun x -> fun y -> x y) (fun y -> fun x -> x y) delta'
//│ res: ((Sid -> Sid) -> 'a) -> 'a
//│    = [Function (anonymous)]
//│ res: ((forall 'a, 'b. ('a -> 'b & 'a) -> 'b) -> 'c) -> 'c
//│    = [Function (anonymous)]

// (* Rank 8 *)
// (fun (x:sid) -> x x x x x) id delta ;;
(fun (x: Sid) -> x x x x x) id delta
(fun x -> x x x x x) id delta'
//│ res: Sid -> Sid
//│    = [Function: delta]
//│ res: ('a -> 'b & 'a) -> 'b
//│    = [Function: delta]

// (* Rank 2 *)
// type sk = ['a,'b] 'a -> 'b -> 'a;;
// (fun (f:sk) -> fun x -> f f x) (fun v -> fun w -> v) ;;
type Sk = forall 'a 'b. 'a -> 'b -> 'a
(fun (f: Sk) -> fun x -> f f x) (fun v -> fun w -> v)
(fun f -> fun x -> f f x) (fun v -> fun w -> v)
//│ Defined type alias Sk
//│ res: 'a -> 'b
//│   where
//│     'c <: 'c -> 'a -> 'b
//│    = [Function (anonymous)]
//│ res: 'a -> 'b
//│   where
//│     'c <: 'c -> 'a -> 'b
//│    = [Function (anonymous)]

// (* Rank 3 *)
// (fun t -> fun k -> t k) (fun (f:sk) -> fun x -> f f x) (fun v -> fun w -> v);;
(fun t -> fun k -> t k) (fun (f: Sk) -> fun x -> f f x) (fun v -> fun w -> v)
(fun t -> fun k -> t k) (fun f -> fun x -> f f x) (fun v -> fun w -> v)
//│ res: 'a -> 'b
//│   where
//│     'c <: 'c -> 'a -> 'b
//│    = [Function (anonymous)]
//│ res: 'a -> 'b
//│   where
//│     'c <: 'c -> 'a -> 'b
//│    = [Function (anonymous)]


// let k = fun x y -> x
// let k' = fun x y -> y
// let app = fun f x -> f x
// let two = fun f x -> f (f x)
// let three = fun f x -> f (f (f x))
def k = fun x -> fun y -> x
def k2 = fun x -> fun y -> y
def app = fun f -> fun x -> f x
def two = fun f -> fun x -> f (f x)
def three = fun f -> fun x -> f (f (f x))
//│ k: 'a -> anything -> 'a
//│  = [Function: k]
//│ k2: anything -> (forall 'a. 'a -> 'a)
//│   = [Function: k2]
//│ app: 'a -> (forall 'a, 'b, 'c. ('b -> 'c
//│   where
//│     'a <: 'b -> 'c))
//│    = [Function: app]
//│ two: 'a -> (forall 'a. ('b -> 'c
//│   where
//│     'a <: (forall 'a, 'b, 'd. (('d,)
//│   where
//│     'a <: 'b -> 'd)) -> 'c))
//│    = [Function: two]
//│ three: 'a -> (forall 'a. ('b -> 'c
//│   where
//│     'a <: (forall 'a. (('d,)
//│   where
//│     'a <: (forall 'a, 'b, 'e. (('e,)
//│   where
//│     'a <: 'b -> 'e)) -> 'd)) -> 'c))
//│      = [Function: three]


// * Tony noticed this did not work before this commit generalizing the LHS of ascriptions...
(app id): Sid
//│ res: Sid
//│    = [Function (anonymous)]
// * this one worked:
let t = app id in t: Sid
//│ res: Sid
//│    = [Function (anonymous)]


// type Int = ['a] ('a -> 'a) -> ('a -> 'a)
// ;;
type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ Defined type alias ChurchInt

// (* Factorial of two and three *)
// (* Only ONE annotation ! *)
// let t y = (fun h -> h (h (h (fun x -> y)))) (fun f -> fun (n:Int) -> n (fun v -> k') k app (fun g -> fun x -> n (f (n (fun p -> fun s -> s (p k') (fun f -> fun x -> f (p k' f x))) (fun s -> s k' k') k) g) x)) two ;;
def t y = (fun h -> h (h (h (fun x -> y)))) (fun f -> fun (n: ChurchInt) -> n (fun v -> k2) k app (fun g -> fun x -> n (f (n (fun p -> fun s -> s (p k2) (fun f -> fun x -> f (p k2 f x))) (fun s -> s k2 k2) k) g) x)) two
def t2 y = (fun h -> h (h (h (fun x -> y)))) (fun f -> fun n -> n (fun v -> k2) k app (fun g -> fun x -> n (f (n (fun p -> fun s -> s (p k2) (fun f -> fun x -> f (p k2 f x))) (fun s -> s k2 k2) k) g) x)) two
//│ t: 'a -> (forall 'b, 'c. ('b & 'c) -> (forall 'b, 'd, 'e, 'f. (('d & 'g) -> ('e | 'h)
//│   where
//│     'b <: 'd -> 'e
//│     'f <: (forall 'i. (('j,)
//│   where
//│     'i <: (forall 'f. (('k,)
//│   where
//│     'f <: (forall 'a. 'a -> ((forall 'a. (('l,)
//│   where
//│     'a <: ('a -> (forall 'm. 'm -> 'm)) -> 'l)) -> (forall 'n. 'n -> (forall 'n. ('o -> 'p
//│   where
//│     'n <: (forall 'a. (('q,)
//│   where
//│     'a <: ('a -> (forall 'm. 'm -> 'm)) -> 'n -> 'o -> 'q)) -> 'p))) -> 'r) -> 'r) -> (forall 'a. (('a -> (forall 'm. 'm -> 'm)) -> ('a -> (forall 'm. 'm -> 'm)) -> 's) -> 's) -> (forall 'a, 't. 't -> 'a -> 't) -> 'k)) -> 'c -> 'j)) -> 'g -> 'h)))
//│  = [Function: t3]
//│ t2: 'a -> (forall 'b. 'b -> (forall 'c. ('d -> 'e
//│   where
//│     'c <: (forall 'f. (('g,)
//│   where
//│     'f <: (forall 'c. (('h,)
//│   where
//│     'c <: (forall 'a. 'a -> ((forall 'a. (('i,)
//│   where
//│     'a <: ('a -> (forall 'j. 'j -> 'j)) -> 'i)) -> (forall 'k. 'k -> (forall 'k. ('l -> 'm
//│   where
//│     'k <: (forall 'a. (('n,)
//│   where
//│     'a <: ('a -> (forall 'j. 'j -> 'j)) -> 'k -> 'l -> 'n)) -> 'm))) -> 'o) -> 'o) -> (forall 'a. (('a -> (forall 'j. 'j -> 'j)) -> ('a -> (forall 'j. 'j -> 'j)) -> 'p) -> 'p) -> (forall 'a, 'q. 'q -> 'a -> 'q) -> 'h)) -> 'b -> 'g)) -> 'd -> 'e)))
//│   = [Function: t21]

// FIXME
t id succ 0
//│ ╔══[ERROR] Cyclic-looking constraint while typing application
//│ ║  l.233: 	t id succ 0
//│ ║         	^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  α1026  <:  ((‹∀ 0. ‹∀ 1. (α504'' -> ‹∀ 2. (α505''' -> α505''')›)››,) -> α1058)    TypeVariable  FunctionType
//│ ╙──  ... looks like:  α601^12  <:  ((‹∀ 0. ‹∀ 1. (α504'' -> ‹∀ 2. (α505''' -> α505''')›)››,) -> α1028^14)
//│ res: error | int
//│    = 2

// FIXME? now fails with constrained-arg-gen
t2 id succ 0
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.244: 	t2 id succ 0
//│ ║         	^^^^^^^^^^^^
//│ ╟── function of type `?a -> ?b` is not an instance of type `int`
//│ ║  l.201: 	def t2 y = (fun h -> h (h (h (fun x -> y)))) (fun f -> fun n -> n (fun v -> k2) k app (fun g -> fun x -> n (f (n (fun p -> fun s -> s (p k2) (fun f -> fun x -> f (p k2 f x))) (fun s -> s k2 k2) k) g) x)) two
//│ ║         	                                                                                                                                                                                ^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.155: 	def app = fun f -> fun x -> f x
//│ ╙──       	                              ^
//│ res: error
//│    = 2

// let t y = (fun h -> h (h (h (h (fun x -> y))))) (fun f -> fun (n:Int) -> n (fun v -> k') k app (fun g -> fun x -> n (f (n (fun p -> fun s -> s (p k') (fun f -> fun x -> f (p k' f x))) (fun s -> s k' k') k) g) x)) three
def t y = (fun h -> h (h (h (fun x -> y)))) (fun f -> fun (n: ChurchInt) -> n (fun v -> k2) k app (fun g -> fun x -> n (f (n (fun p -> fun s -> s (p k2) (fun f -> fun x -> f (p k2 f x))) (fun s -> s k2 k2) k) g) x)) three
def t2 y = (fun h -> h (h (h (fun x -> y)))) (fun f -> fun n -> n (fun v -> k2) k app (fun g -> fun x -> n (f (n (fun p -> fun s -> s (p k2) (fun f -> fun x -> f (p k2 f x))) (fun s -> s k2 k2) k) g) x)) three
//│ t: 'a -> (forall 'b, 'c. ('b & 'c) -> (forall 'b, 'd, 'e, 'f. (('d & 'g) -> ('e | 'h)
//│   where
//│     'b <: 'd -> 'e
//│     'f <: (forall 'i. (('j,)
//│   where
//│     'i <: (forall 'f. (('k,)
//│   where
//│     'f <: (forall 'a. 'a -> ((forall 'a. (('l,)
//│   where
//│     'a <: ('a -> (forall 'm. 'm -> 'm)) -> 'l)) -> (forall 'n. 'n -> (forall 'n. ('o -> 'p
//│   where
//│     'n <: (forall 'a. (('q,)
//│   where
//│     'a <: ('a -> (forall 'm. 'm -> 'm)) -> 'n -> 'o -> 'q)) -> 'p))) -> 'r) -> 'r) -> (forall 'a. (('a -> (forall 'm. 'm -> 'm)) -> ('a -> (forall 'm. 'm -> 'm)) -> 's) -> 's) -> (forall 'a, 't. 't -> 'a -> 't) -> 'k)) -> 'c -> 'j)) -> 'g -> 'h)))
//│  = [Function: t4]
//│ t2: 'a -> (forall 'b. 'b -> (forall 'c. ('d -> 'e
//│   where
//│     'c <: (forall 'f. (('g,)
//│   where
//│     'f <: (forall 'c. (('h,)
//│   where
//│     'c <: (forall 'a. 'a -> ((forall 'a. (('i,)
//│   where
//│     'a <: ('a -> (forall 'j. 'j -> 'j)) -> 'i)) -> (forall 'k. 'k -> (forall 'k. ('l -> 'm
//│   where
//│     'k <: (forall 'a. (('n,)
//│   where
//│     'a <: ('a -> (forall 'j. 'j -> 'j)) -> 'k -> 'l -> 'n)) -> 'm))) -> 'o) -> 'o) -> (forall 'a. (('a -> (forall 'j. 'j -> 'j)) -> ('a -> (forall 'j. 'j -> 'j)) -> 'p) -> 'p) -> (forall 'a, 'q. 'q -> 'a -> 'q) -> 'h)) -> 'b -> 'g)) -> 'd -> 'e)))
//│   = [Function: t22]

// (* This comment is from the ORIGINAL PAGE: *)
// (* Factorial of three. Exposed bugs in old implementation. This one works correctly, but the generated files take up to 3.8GB, and it takes about 1 hour on a 2GHz PIII box to get the result. You can see the final judgement here. Yes, the result is the Church numeral for 6. *)

// (* We test that the result is 6: *)
// let succ n = n + 1 ;;
// t id succ 0 ;;

// FIXME
t id succ 0
//│ ╔══[ERROR] Cyclic-looking constraint while typing application
//│ ║  l.298: 	t id succ 0
//│ ║         	^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  α2085  <:  ((‹∀ 0. ‹∀ 1. (α504'' -> ‹∀ 2. (α505''' -> α505''')›)››,) -> α2117)    TypeVariable  FunctionType
//│ ╙──  ... looks like:  α1654^12  <:  ((‹∀ 0. ‹∀ 1. (α504'' -> ‹∀ 2. (α505''' -> α505''')›)››,) -> α2087^14)
//│ res: error | int
//│    = 6

:e // TODO try without cycle check
t2 id succ 0
//│ ╔══[ERROR] Cyclic-looking constraint while typing application
//│ ║  l.309: 	t2 id succ 0
//│ ║         	^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 0. ‹∀ 1. (α498'' -> ‹∀ 2. (α499''' -> α498'')›)››  <:  α2365    PolymorphicType  TypeVariable
//│ ╙──  ... looks like:  ‹∀ 0. ‹∀ 1. (α498'' -> ‹∀ 2. (α499''' -> α498'')›)››  <:  α1844^16
//│ res: error
//│    = 6

// let t (z : 0) = let x = (fun (y: ['t > 0] 'a -> 't) -> y z y) in x x;;
def t (z: nothing) = let x = fun (y: forall 't. 'a -> 't) -> y z y in x x
//│ t: nothing -> nothing
//│   where
//│     'a <: nothing -> anything
//│  = [Function: t5]

// (* Plus petit. *)
// type tt = ['b = 0] ['c > ['a] ['d = ['t] 'a -> 't] ['e] 'd -> 'e] 'b -> 'c ;;
// let t (z : 0) = let x = (fun (y: ['t > 0] 'a -> 't) -> y z) in x x;;
type Tt = forall 'b 'c. ('b & nothing) -> ('c | (forall 'a 'd 'e. ('d & (forall 't. 'a -> 't))) -> 'e)
def t (z: nothing) = let x = fun (y: forall 't. 'a -> 't) -> y z in x x
//│ Defined type alias Tt
//│ t: nothing -> nothing
//│   where
//│     'a <: nothing -> anything
//│  = [Function: t6]

// (*
//     * Rank 3, untypable in System F?
//       (fun x -> z (x (fun f -> fun u -> f u)) (x (fun v -> fun g -> g v))) (fun y -> y y y)
// FIXME: z is free???

//     * Untypable at any rank
//       (fun x -> x x) (fun x -> x x)
:e // TODO show failure without cycle check
(fun x -> x x) (fun x -> x x)
//│ ╔══[ERROR] Cyclic-looking constraint while typing application
//│ ║  l.345: 	(fun x -> x x) (fun x -> x x)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 1. (α2744'' -> α2745'')›  <:  α2751    PolymorphicType  TypeVariable
//│ ╙──  ... looks like:  ‹∀ 1. (α2744'' -> α2745'')›  <:  α2744''
//│ res: error
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded

//     * Rank 3, untypable in F2 but F3
//       (fun f x -> f (f x)) (fun f x -> f (f x)) (fun v w -> v)
(fun f -> fun x -> f (f x)) (fun f -> fun x -> f (f x)) (fun v -> fun w -> v)
//│ res: 'a -> 'b
//│   where
//│     'c <: (forall 'd. (('d,)
//│   where
//│     'c <: 'a -> 'd)) -> 'b
//│    = [Function (anonymous)]

//     * Rank 4, alternate formulation, untypeable in F2, but F3
//       (fun two k -> two two k)(fun f x -> f (f x)) (fun v w -> v)
(fun two -> fun k -> two two k) (fun f -> fun x -> f (f x)) (fun v -> fun w -> v)
//│ res: 'a -> 'b
//│   where
//│     'c <: (forall 'd. (('d,)
//│   where
//│     'c <: 'a -> 'd)) -> 'b
//│    = [Function (anonymous)]

//     * Rank 5, causes huge blowup. Do not attempt to output skeletons !
//       (fun two k -> two two two k)(fun f -x -> f (f x)) (fun v w -> v)
// * Note: the only example in this file that requires `:GeneralizeCurriedFunctions`

// FIXME? now fails with constrained-arg-gen
(fun two -> fun k -> two two two k) (fun f -> fun x -> f (f x)) (fun v -> fun w -> v)
//│ ╔══[ERROR] Cyclic-looking constraint while typing application
//│ ║  l.381: 	(fun two -> fun k -> two two two k) (fun f -> fun x -> f (f x)) (fun v -> fun w -> v)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 1. (α2854'' -> ‹∀ 2. (α2855''' -> α2854'')›)›  <:  α2872    PolymorphicType  TypeVariable
//│ ╙──  ... looks like:  ‹∀ 1. (α2854'' -> ‹∀ 2. (α2855''' -> α2854'')›)›  <:  α2845'''
//│ res: 'a -> 'b | error
//│   where
//│     'c <: (forall 'd. (('d,)
//│   where
//│     'c <: 'a -> 'd)) -> 'b
//│    = [Function (anonymous)]



//  ?????
//     * Factorial of two, using the Y combinator
//       (fun h -> (fun x -> h (x x)) (fun x -> h (x x))) (fun f -> fun n -> n (fun v -> fun x -> fun y -> y) k (fun f -> fun x -> f x)(fun g -> fun x -> n (f (n (fun p -> fun s -> s (p (fun x -> fun y -> y)) (fun f -> fun x -> f (p (fun x -> fun y -> y) f x))) (fun s -> s (fun f -> fun x -> x) (fun f -> fun x -> x)) k) g) x)) (fun f -> fun x -> f (f x))

// *)
:e
(fun h -> (fun x -> h (x x)) (fun x -> h (x x))) (fun f -> fun n -> n (fun v -> fun x -> fun y -> y) k (fun f -> fun x -> f x)(fun g -> fun x -> n (f (n (fun p -> fun s -> s (p (fun x -> fun y -> y)) (fun f -> fun x -> f (p (fun x -> fun y -> y) f x))) (fun s -> s (fun f -> fun x -> x) (fun f -> fun x -> x)) k) g) x)) (fun f -> fun x -> f (f x))
//│ ╔══[ERROR] Cyclic-looking constraint while typing application
//│ ║  l.403: 	(fun h -> (fun x -> h (x x)) (fun x -> h (x x))) (fun f -> fun n -> n (fun v -> fun x -> fun y -> y) k (fun f -> fun x -> f x)(fun g -> fun x -> n (f (n (fun p -> fun s -> s (p (fun x -> fun y -> y)) (fun f -> fun x -> f (p (fun x -> fun y -> y) f x))) (fun s -> s (fun f -> fun x -> x) (fun f -> fun x -> x)) k) g) x)) (fun f -> fun x -> f (f x))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 2. {(α2967 -> α2969''') where: α2965 <: (‹∀ 3. {(α2968'''',) where: α2967 <: ((α2967,) -> α2968'''')}› -> α2969''')}›  <:  ((α2967,) -> α3022)    PolymorphicType  FunctionType
//│ ╙──  ... looks like:  ‹∀ 2. {(α2914''' -> α2916''') where: α2965 <: (‹∀ 3. {(α2915'''',) where: α2967 <: ((α2914''',) -> α2915'''')}› -> α2916''')}›  <:  ((α2914''',) -> α2968'''')
//│ res: 'a -> (forall 'b, 'c, 'd, 'e, 'f, 'g. ('h -> 'i
//│   where
//│     'j <: (forall 'b, 'c, 'd, 'e, 'f, 'g. (('k,)
//│   where
//│     'l <: (forall 'b, 'c, 'd, 'e, 'f, 'g. (('m,)
//│   where
//│     'j <: (forall 'n, 'b, 'c, 'd, 'e, 'f. 'n -> (forall 'b, 'c, 'd, 'e, 'f. ((forall 'n, 'b. (('b,)
//│   where
//│     'n <: ('n -> (forall 'o. 'o -> 'o)) -> 'b)) -> (forall 'p, 'c, 'd, 'e. 'p -> (forall 'p, 'c, 'd, 'e. ('c -> 'e
//│   where
//│     'p <: (forall 'n, 'p, 'c, 'd. (('d,)
//│   where
//│     'n <: ('n -> (forall 'q. 'q -> 'q)) -> 'p -> 'c -> 'd)) -> 'e))) -> 'f) -> 'f)) -> (forall 'n, 'g. (('n -> (forall 'r. 'r -> 'r)) -> ('n -> (forall 's. 's -> 's)) -> 'g) -> 'g) -> (forall 'n, 't. 't -> 'n -> 't) -> 'm)) -> 'a -> 'k)) -> 'h -> 'i)) | error
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded


