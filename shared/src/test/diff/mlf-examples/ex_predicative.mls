// type bot = 0;;
type Bot = forall 'a. 'a
//│ Defined type alias Bot

// (* Rank 6 with intersection types, untypable in predicative System F,
//    typable in impredicative System F *)


// let imp (z : bot) =
//   (fun (x : ['a] ('a -> 'u) -> 'v) -> x x)
//   (fun (y : 'a -> bot) -> y z y);;
def imp (z: Bot) =
  (fun (x: forall 'a. ('a -> 'u) -> 'v) -> x x)
  (fun (y: 'a -> Bot) -> y z y)
def imp' z =
  (fun x -> x x)
  (fun y -> y z y)
//│ imp: Bot -> nothing
//│   where
//│     'a <: ‘a
//│    = [Function: imp]
//│ imp': ('a -> 'a -> (forall 'b, 'c. ('a -> 'b -> 'c & 'b) -> 'c) -> 'd & 'a) -> 'd
//│     = [Function: imp]


// (* Quelques constantes. *)

// type sid = ['a] 'a -> 'a
type Sid = forall 'a. 'a -> 'a
//│ Defined type alias Sid

// let id = fun x -> x
// ;;
def id = fun x -> x
//│ id: 'a -> 'a
//│   = [Function: id]

// let delta = fun (x:sid) -> x x
// ;;
def delta = fun (x: Sid) -> x x
def delta' = fun x -> x x
//│ delta: Sid -> Sid
//│      = [Function: delta]
//│ delta': ('a -> 'b & 'a) -> 'b
//│       = [Function: delta]

// delta id ;;
delta id
delta' id
//│ res: Sid
//│    = [Function: id]
//│ res: 'a -> 'a
//│    = [Function: id]

// let t a b c d e = (fun x -> a x x) ((fun y -> b (c y)) (d e)) ;;
def t a b c d e = (fun x -> a x x) ((fun y -> b (c y)) (d e))
//│ t: ('a -> 'a -> 'b) -> ('c -> 'a) -> ('d -> 'c) -> ('e -> 'd) -> 'e -> 'b
//│  = [Function: t]

// let t w z a b = (fun y -> (fun x -> w (x y) z) a) b ;;
def t w z a b = (fun y -> (fun x -> w (x y) z) a) b
//│ t: ('a -> 'b -> 'c) -> 'b -> ('d -> 'a) -> 'd -> 'c
//│  = [Function: t1]

// let t y a = (fun x -> x (x y)) ((fun z -> z) (fun x -> a x)) ;;
def t y a = (fun x -> x (x y)) ((fun z -> z) (fun x -> a x))
//│ t: 'a -> ('a -> 'b & 'b -> 'c) -> 'c
//│  = [Function: t2]

// (* Rank 1 *)
// (fun x -> fun y -> x y) (fun y -> fun x -> x y) ;;
(fun x -> fun y -> x y) (fun y -> fun x -> x y)
//│ res: 'a -> ('a -> 'b) -> 'b
//│    = [Function (anonymous)]

// (* Rank 3 *)
// (fun x -> fun y -> x) delta ;;
(fun x -> fun y -> x) delta
(fun x -> fun y -> x) delta'
//│ res: anything -> Sid -> Sid
//│    = [Function (anonymous)]
//│ res: anything -> (forall 'a, 'b. ('a -> 'b & 'a) -> 'b)
//│    = [Function (anonymous)]

// (* Rank 5 *)
// (fun x -> fun y -> x y) (fun y -> fun x -> x y) delta ;;
(fun x -> fun y -> x y) (fun y -> fun x -> x y) delta
(fun x -> fun y -> x y) (fun y -> fun x -> x y) delta'
//│ res: ((Sid -> Sid) -> 'a) -> 'a
//│    = [Function (anonymous)]
//│ res: ((forall 'a, 'b. ('a -> 'b & 'a) -> 'b) -> 'c) -> 'c
//│    = [Function (anonymous)]

// (* Rank 8 *)
// (fun (x:sid) -> x x x x x) id delta ;;
(fun (x: Sid) -> x x x x x) id delta
(fun x -> x x x x x) id delta'
//│ res: Sid -> Sid
//│    = [Function: delta]
//│ res: ('a -> 'b & 'a) -> 'b
//│    = [Function: delta]

// (* Rank 2 *)
// type sk = ['a,'b] 'a -> 'b -> 'a;;
// (fun (f:sk) -> fun x -> f f x) (fun v -> fun w -> v) ;;
type Sk = forall 'a 'b. 'a -> 'b -> 'a
(fun (f: Sk) -> fun x -> f f x) (fun v -> fun w -> v)
(fun f -> fun x -> f f x) (fun v -> fun w -> v)
//│ Defined type alias Sk
//│ res: anything -> Sk
//│    = [Function (anonymous)]
//│ res: anything -> (forall 'a. 'a -> anything -> 'a)
//│    = [Function (anonymous)]

// (* Rank 3 *)
// (fun t -> fun k -> t k) (fun (f:sk) -> fun x -> f f x) (fun v -> fun w -> v);;
(fun t -> fun k -> t k) (fun (f: Sk) -> fun x -> f f x) (fun v -> fun w -> v)
(fun t -> fun k -> t k) (fun f -> fun x -> f f x) (fun v -> fun w -> v)
//│ res: anything -> Sk
//│    = [Function (anonymous)]
//│ res: anything -> (forall 'a. 'a -> anything -> 'a)
//│    = [Function (anonymous)]


// let k = fun x y -> x
// let k' = fun x y -> y
// let app = fun f x -> f x
// let two = fun f x -> f (f x)
// let three = fun f x -> f (f (f x))
def k = fun x -> fun y -> x
def k2 = fun x -> fun y -> y
def app = fun f -> fun x -> f x
def two = fun f -> fun x -> f (f x)
def three = fun f -> fun x -> f (f (f x))
//│ k: 'a -> anything -> 'a
//│  = [Function: k]
//│ k2: anything -> 'a -> 'a
//│   = [Function: k2]
//│ app: ('a -> 'b) -> 'a -> 'b
//│    = [Function: app]
//│ two: ('a -> 'b & 'c -> 'a) -> 'c -> 'b
//│    = [Function: two]
//│ three: ('a -> 'b & 'c -> 'd & 'b -> 'c) -> 'a -> 'd
//│      = [Function: three]

// type Int = ['a] ('a -> 'a) -> ('a -> 'a)
// ;;
type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ Defined type alias ChurchInt

// (* Factorial of two and three *)
// (* Only ONE annotation ! *)
// let t y = (fun h -> h (h (h (fun x -> y)))) (fun f -> fun (n:Int) -> n (fun v -> k') k app (fun g -> fun x -> n (f (n (fun p -> fun s -> s (p k') (fun f -> fun x -> f (p k' f x))) (fun s -> s k' k') k) g) x)) two ;;
def t y = (fun h -> h (h (h (fun x -> y)))) (fun f -> fun (n: ChurchInt) -> n (fun v -> k2) k app (fun g -> fun x -> n (f (n (fun p -> fun s -> s (p k2) (fun f -> fun x -> f (p k2 f x))) (fun s -> s k2 k2) k) g) x)) two
def t2 y = (fun h -> h (h (h (fun x -> y)))) (fun f -> fun n -> n (fun v -> k2) k app (fun g -> fun x -> n (f (n (fun p -> fun s -> s (p k2) (fun f -> fun x -> f (p k2 f x))) (fun s -> s k2 k2) k) g) x)) two
//│ t: 'a -> (forall 'b, 'c, 'd, 'e, 'f. (('g -> 'h & 'd) -> ('g & 'i) -> ('h | 'j)
//│   where
//│     'b <: 'c -> 'd -> 'e
//│     'f <: (((forall 'a, 'k. 'a -> 'k -> 'k) -> 'l & 'a) -> ('l -> (forall 'a. (('m -> 'n & 'o) -> 'p -> 'n
//│   where
//│     'a <: (forall 'a, 'k. 'a -> 'k -> 'k) -> 'o -> 'p -> 'm)) -> 'q) -> 'q) -> (((forall 'a, 'k. 'a -> 'k -> 'k) -> (forall 'a, 'k. 'a -> 'k -> 'k) -> 'r) -> 'r) -> (forall 'a, 's. 's -> 'a -> 's) -> 'c & 'e -> 'i -> 'j))
//│  = [Function: t3]
//│ t2: 'a -> (forall 'b, 'c, 'd, 'e, 'f. ('d -> 'g -> 'h
//│   where
//│     'b <: 'c -> 'd -> 'e
//│     'f <: (((forall 'a, 'i. 'a -> 'i -> 'i) -> 'j & 'a) -> ('j -> (forall 'a. (('k -> 'l & 'm) -> 'n -> 'l
//│   where
//│     'a <: (forall 'a, 'i. 'a -> 'i -> 'i) -> 'm -> 'n -> 'k)) -> 'o) -> 'o) -> (((forall 'a, 'i. 'a -> 'i -> 'i) -> (forall 'a, 'i. 'a -> 'i -> 'i) -> 'p) -> 'p) -> (forall 'a, 'q. 'q -> 'a -> 'q) -> 'c & 'e -> 'g -> 'h))
//│   = [Function: t21]

// FIXME
t id succ 0
//│ ╔══[ERROR] Subtyping constraint of the form `?a <: (int -> int) -> ?b` exceeded recursion depth limit (400)
//│ ║  l.172: 	t id succ 0
//│ ║         	^^^^^^^^^
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α441'' -> (α442'' -> α442''))››  <!<  ((‹∀ 0. ‹∀ 1. (α441'' -> (α442'' -> α442''))››,) -> α1291')
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α441'' -> (α442'' -> α442''))››  <!<  α1290'
//│ ╟── while constraining:  (‹∀ 0. ‹∀ 1. (α441'' -> (α442'' -> α442''))››,)  <!<  (α1290',)
//│ ╟── while constraining:  (α1290' -> α1292')  <!<  ((‹∀ 0. ‹∀ 1. (α441'' -> (α442'' -> α442''))››,) -> α1285)
//│ ╟── while constraining:  ‹∀ 4. (α523''''' -> α525''''')›  <!<  ((‹∀ 0. ‹∀ 1. (α441'' -> (α442'' -> α442''))››,) -> α1285)
//│ ╟── while constraining:  α952  <!<  ((‹∀ 0. ‹∀ 1. (α441'' -> (α442'' -> α442''))››,) -> α1285)
//│ ╟── while constraining:  α952  <!<  ((‹∀ 0. ‹∀ 1. (α441'' -> (α442'' -> α442''))››,) -> α1279')
//│ ╟── while constraining:  {(α1280' -> (α1284' -> α1282')) where: α952 <: ((‹∀ 0. ‹∀ 1. (α441'' -> (α442'' -> α442''))››,) -> α1279')}  <!<  ((α1266,) -> α1267)
//│ ╟── while constraining:  ‹∀ 5. {(α957^6 -> (α961^6 -> α959^6)) where: α952 <: ((‹∀ 0. ‹∀ 1. (α441'' -> (α442'' -> α442''))››,) -> α956^6)}›  <!<  ((α1266,) -> α1267)
//│ ╟── while constraining:  ‹∀ 5. {(α957^6 -> (α961^6 -> α959^6)) where: α952 <: ((‹∀ 0. ‹∀ 1. (α441'' -> (α442'' -> α442''))››,) -> α956^6)}›  <!<  α1265
//│ ╟── while constraining:  α962  <!<  α1265
//│ ╟── while constraining:  (α954 -> α962)  <!<  ((‹∀ 0. ‹∀ 1. (α441'' -> (α442'' -> α442''))››,) -> α1265)
//│ ╟── while constraining:  α952  <!<  ((‹∀ 0. ‹∀ 1. (α441'' -> (α442'' -> α442''))››,) -> α1265)
//│ ╟── while constraining:  α952  <!<  ((‹∀ 0. ‹∀ 1. (α441'' -> (α442'' -> α442''))››,) -> α1259')
//│ ╟── while constraining:  {(α1260' -> (α1264' -> α1262')) where: α952 <: ((‹∀ 0. ‹∀ 1. (α441'' -> (α442'' -> α442''))››,) -> α1259')}  <!<  ((α1246,) -> α1247)
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  ('a951 -> 'a951)  <!<  ((‹∀ 4. (α523''''' -> α525''''')›,) -> α906)
//│ ╟── while constraining:  ('a951 -> 'a951)  <!<  α905
//│ ╟── while constraining:  (('a951 -> 'a951) -> ('a951 -> 'a951))  <!<  ((‹∀ 4. (α511''''' -> (α512''''' -> α521'''''))›,) -> α905)
//│ ╟── while constraining:  ‹∀ 0. (('a489' -> 'a489') -> ('a489' -> 'a489'))›  <!<  ((‹∀ 4. (α511''''' -> (α512''''' -> α521'''''))›,) -> α905)
//│ ╟── while constraining:  ChurchInt  <!<  ((‹∀ 4. (α511''''' -> (α512''''' -> α521'''''))›,) -> α905)
//│ ╟── while constraining:  α854  <!<  ((‹∀ 4. (α511''''' -> (α512''''' -> α521'''''))›,) -> α905)
//│ ╟── while constraining:  {(α903 -> (α908 -> α909)) where: α832 <: ((α901,) -> α902), α854 <: ((‹∀ 4. (α511''''' -> (α512''''' -> α521'''''))›,) -> α905), α854 <: ((α904,) -> α907)}  <!<  ((α894,) -> α895)
//│ ╟── while constraining:  ‹∀ 3. {(α862'''' -> (α867'''' -> α868'''')) where: α832 <: ((α860'''',) -> α861''''), α854 <: ((‹∀ 4. (α511''''' -> (α512''''' -> α521'''''))›,) -> α864''''), α854 <: ((α863'''',) -> α866'''')}›  <!<  ((α894,) -> α895)
//│ ╟── while constraining:  ‹∀ 3. {(α862'''' -> (α867'''' -> α868'''')) where: α832 <: ((α860'''',) -> α861''''), α854 <: ((‹∀ 4. (α511''''' -> (α512''''' -> α521'''''))›,) -> α864''''), α854 <: ((α863'''',) -> α866'''')}›  <!<  α893
//│ ╟── while constraining:  α831  <!<  α893
//│ ╟── while constraining:  (ChurchInt -> α831)  <!<  ((α892,) -> α893)
//│ ╟── while constraining:  α830  <!<  ((α892,) -> α893)
//│ ╟── while constraining:  {(α894 -> (α899 -> α900)) where: α830 <: ((α892,) -> α893), α872 <: ((‹∀ 4. (α511''''' -> (α512''''' -> α521'''''))›,) -> α896), α872 <: ((α895,) -> α898)}  <!<  (((int<number> -> int<number>),) -> α891)
//│ ╟── while constraining:  ‹∀ 3. {(α880'''' -> (α885'''' -> α886'''')) where: α830 <: ((α878'''',) -> α879''''), α872 <: ((‹∀ 4. (α511''''' -> (α512''''' -> α521'''''))›,) -> α882''''), α872 <: ((α881'''',) -> α884'''')}›  <!<  (((int<number> -> int<number>),) -> α891)
//│ ╙── while constraining:  α827  <!<  (((int<number> -> int<number>),) -> α891)
//│ res: error
//│    = 2

t2 id succ 0
//│ res: int
//│    = 2

// let t y = (fun h -> h (h (h (h (fun x -> y))))) (fun f -> fun (n:Int) -> n (fun v -> k') k app (fun g -> fun x -> n (f (n (fun p -> fun s -> s (p k') (fun f -> fun x -> f (p k' f x))) (fun s -> s k' k') k) g) x)) three
def t y = (fun h -> h (h (h (fun x -> y)))) (fun f -> fun (n: ChurchInt) -> n (fun v -> k2) k app (fun g -> fun x -> n (f (n (fun p -> fun s -> s (p k2) (fun f -> fun x -> f (p k2 f x))) (fun s -> s k2 k2) k) g) x)) three
def t2 y = (fun h -> h (h (h (fun x -> y)))) (fun f -> fun n -> n (fun v -> k2) k app (fun g -> fun x -> n (f (n (fun p -> fun s -> s (p k2) (fun f -> fun x -> f (p k2 f x))) (fun s -> s k2 k2) k) g) x)) three
//│ t: 'a -> (forall 'b, 'c, 'd, 'e, 'f. (('g -> 'h & 'd) -> ('g & 'i) -> ('h | 'j)
//│   where
//│     'b <: 'c -> 'd -> 'e
//│     'f <: (((forall 'a, 'k. 'a -> 'k -> 'k) -> 'l & 'a) -> ('l -> (forall 'a. (('m -> 'n & 'o) -> 'p -> 'n
//│   where
//│     'a <: (forall 'a, 'k. 'a -> 'k -> 'k) -> 'o -> 'p -> 'm)) -> 'q) -> 'q) -> (((forall 'a, 'k. 'a -> 'k -> 'k) -> (forall 'a, 'k. 'a -> 'k -> 'k) -> 'r) -> 'r) -> (forall 'a, 's. 's -> 'a -> 's) -> 'c & 'e -> 'i -> 'j))
//│  = [Function: t4]
//│ t2: 'a -> (forall 'b, 'c, 'd, 'e, 'f. ('d -> 'g -> 'h
//│   where
//│     'b <: 'c -> 'd -> 'e
//│     'f <: (((forall 'a, 'i. 'a -> 'i -> 'i) -> 'j & 'a) -> ('j -> (forall 'a. (('k -> 'l & 'm) -> 'n -> 'l
//│   where
//│     'a <: (forall 'a, 'i. 'a -> 'i -> 'i) -> 'm -> 'n -> 'k)) -> 'o) -> 'o) -> (((forall 'a, 'i. 'a -> 'i -> 'i) -> (forall 'a, 'i. 'a -> 'i -> 'i) -> 'p) -> 'p) -> (forall 'a, 'q. 'q -> 'a -> 'q) -> 'c & 'e -> 'g -> 'h))
//│   = [Function: t22]

// (* This comment is from the ORIGINAL PAGE: *)
// (* Factorial of three. Exposed bugs in old implementation. This one works correctly, but the generated files take up to 3.8GB, and it takes about 1 hour on a 2GHz PIII box to get the result. You can see the final judgement here. Yes, the result is the Church numeral for 6. *)

// (* We test that the result is 6: *)
// let succ n = n + 1 ;;
// t id succ 0 ;;

// FIXME
t id succ 0
//│ ╔══[ERROR] Subtyping constraint of the form `?a <: (int -> int) -> ?b` exceeded recursion depth limit (400)
//│ ║  l.241: 	t id succ 0
//│ ║         	^^^^^^^^^
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α441'' -> (α442'' -> α442''))››  <!<  ((‹∀ 0. ‹∀ 1. (α441'' -> (α442'' -> α442''))››,) -> α2292')
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α441'' -> (α442'' -> α442''))››  <!<  α2291'
//│ ╟── while constraining:  (‹∀ 0. ‹∀ 1. (α441'' -> (α442'' -> α442''))››,)  <!<  (α2291',)
//│ ╟── while constraining:  (α2291' -> α2293')  <!<  ((‹∀ 0. ‹∀ 1. (α441'' -> (α442'' -> α442''))››,) -> α2286)
//│ ╟── while constraining:  ‹∀ 4. (α1521''''' -> α1523''''')›  <!<  ((‹∀ 0. ‹∀ 1. (α441'' -> (α442'' -> α442''))››,) -> α2286)
//│ ╟── while constraining:  α1953  <!<  ((‹∀ 0. ‹∀ 1. (α441'' -> (α442'' -> α442''))››,) -> α2286)
//│ ╟── while constraining:  α1953  <!<  ((‹∀ 0. ‹∀ 1. (α441'' -> (α442'' -> α442''))››,) -> α2280')
//│ ╟── while constraining:  {(α2281' -> (α2285' -> α2283')) where: α1953 <: ((‹∀ 0. ‹∀ 1. (α441'' -> (α442'' -> α442''))››,) -> α2280')}  <!<  ((α2267,) -> α2268)
//│ ╟── while constraining:  ‹∀ 5. {(α1958^6 -> (α1962^6 -> α1960^6)) where: α1953 <: ((‹∀ 0. ‹∀ 1. (α441'' -> (α442'' -> α442''))››,) -> α1957^6)}›  <!<  ((α2267,) -> α2268)
//│ ╟── while constraining:  ‹∀ 5. {(α1958^6 -> (α1962^6 -> α1960^6)) where: α1953 <: ((‹∀ 0. ‹∀ 1. (α441'' -> (α442'' -> α442''))››,) -> α1957^6)}›  <!<  α2266
//│ ╟── while constraining:  α1963  <!<  α2266
//│ ╟── while constraining:  (α1955 -> α1963)  <!<  ((‹∀ 0. ‹∀ 1. (α441'' -> (α442'' -> α442''))››,) -> α2266)
//│ ╟── while constraining:  α1953  <!<  ((‹∀ 0. ‹∀ 1. (α441'' -> (α442'' -> α442''))››,) -> α2266)
//│ ╟── while constraining:  α1953  <!<  ((‹∀ 0. ‹∀ 1. (α441'' -> (α442'' -> α442''))››,) -> α2260')
//│ ╟── while constraining:  {(α2261' -> (α2265' -> α2263')) where: α1953 <: ((‹∀ 0. ‹∀ 1. (α441'' -> (α442'' -> α442''))››,) -> α2260')}  <!<  ((α2247,) -> α2248)
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  ('a1952 -> 'a1952)  <!<  ((‹∀ 4. (α1521''''' -> α1523''''')›,) -> α1907)
//│ ╟── while constraining:  ('a1952 -> 'a1952)  <!<  α1906
//│ ╟── while constraining:  (('a1952 -> 'a1952) -> ('a1952 -> 'a1952))  <!<  ((‹∀ 4. (α1509''''' -> (α1510''''' -> α1519'''''))›,) -> α1906)
//│ ╟── while constraining:  ‹∀ 0. (('a489' -> 'a489') -> ('a489' -> 'a489'))›  <!<  ((‹∀ 4. (α1509''''' -> (α1510''''' -> α1519'''''))›,) -> α1906)
//│ ╟── while constraining:  ChurchInt  <!<  ((‹∀ 4. (α1509''''' -> (α1510''''' -> α1519'''''))›,) -> α1906)
//│ ╟── while constraining:  α1855  <!<  ((‹∀ 4. (α1509''''' -> (α1510''''' -> α1519'''''))›,) -> α1906)
//│ ╟── while constraining:  {(α1904 -> (α1909 -> α1910)) where: α1833 <: ((α1902,) -> α1903), α1855 <: ((‹∀ 4. (α1509''''' -> (α1510''''' -> α1519'''''))›,) -> α1906), α1855 <: ((α1905,) -> α1908)}  <!<  ((α1895,) -> α1896)
//│ ╟── while constraining:  ‹∀ 3. {(α1863'''' -> (α1868'''' -> α1869'''')) where: α1833 <: ((α1861'''',) -> α1862''''), α1855 <: ((‹∀ 4. (α1509''''' -> (α1510''''' -> α1519'''''))›,) -> α1865''''), α1855 <: ((α1864'''',) -> α1867'''')}›  <!<  ((α1895,) -> α1896)
//│ ╟── while constraining:  ‹∀ 3. {(α1863'''' -> (α1868'''' -> α1869'''')) where: α1833 <: ((α1861'''',) -> α1862''''), α1855 <: ((‹∀ 4. (α1509''''' -> (α1510''''' -> α1519'''''))›,) -> α1865''''), α1855 <: ((α1864'''',) -> α1867'''')}›  <!<  α1894
//│ ╟── while constraining:  α1832  <!<  α1894
//│ ╟── while constraining:  (ChurchInt -> α1832)  <!<  ((α1893,) -> α1894)
//│ ╟── while constraining:  α1831  <!<  ((α1893,) -> α1894)
//│ ╟── while constraining:  {(α1895 -> (α1900 -> α1901)) where: α1831 <: ((α1893,) -> α1894), α1873 <: ((‹∀ 4. (α1509''''' -> (α1510''''' -> α1519'''''))›,) -> α1897), α1873 <: ((α1896,) -> α1899)}  <!<  (((int<number> -> int<number>),) -> α1892)
//│ ╟── while constraining:  ‹∀ 3. {(α1881'''' -> (α1886'''' -> α1887'''')) where: α1831 <: ((α1879'''',) -> α1880''''), α1873 <: ((‹∀ 4. (α1509''''' -> (α1510''''' -> α1519'''''))›,) -> α1883''''), α1873 <: ((α1882'''',) -> α1885'''')}›  <!<  (((int<number> -> int<number>),) -> α1892)
//│ ╙── while constraining:  α1828  <!<  (((int<number> -> int<number>),) -> α1892)
//│ res: error
//│    = 6

t2 id succ 0
//│ res: int
//│    = 6

// let t (z : 0) = let x = (fun (y: ['t > 0] 'a -> 't) -> y z y) in x x;;
def t (z: nothing) = let x = fun (y: forall 't. 'a -> 't) -> y z y in x x
//│ t: nothing -> nothing
//│   where
//│     'a <: nothing -> anything
//│  = [Function: t5]

// (* Plus petit. *)
// type tt = ['b = 0] ['c > ['a] ['d = ['t] 'a -> 't] ['e] 'd -> 'e] 'b -> 'c ;;
// let t (z : 0) = let x = (fun (y: ['t > 0] 'a -> 't) -> y z) in x x;;
type Tt = forall 'b 'c. ('b & nothing) -> ('c | (forall 'a 'd 'e. ('d & (forall 't. 'a -> 't))) -> 'e)
def t (z: nothing) = let x = fun (y: forall 't. 'a -> 't) -> y z in x x
//│ Defined type alias Tt
//│ t: nothing -> nothing
//│   where
//│     'a <: nothing -> anything
//│  = [Function: t6]

// (*
//     * Rank 3, untypable in System F?
//       (fun x -> z (x (fun f -> fun u -> f u)) (x (fun v -> fun g -> g v))) (fun y -> y y y)
// FIXME: z is free???

//     * Untypable at any rank
//       (fun x -> x x) (fun x -> x x)
:e
(fun x -> x x) (fun x -> x x)
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a, ?b. ?b -> ?a <: (forall ?c, ?d. ?d -> ?c) -> ?e` exceeded recursion depth limit (400)
//│ ║  l.310: 	(fun x -> x x) (fun x -> x x)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  ‹∀ 0. (α2652' -> α2653')›  <!<  α2679
//│ ╟── while constraining:  α2677  <!<  α2679
//│ ╟── while constraining:  (α2677,)  <!<  (α2679,)
//│ ╟── while constraining:  (α2679 -> α2680)  <!<  ((α2677,) -> α2678)
//│ ╟── while constraining:  ‹∀ 0. (α2652' -> α2653')›  <!<  ((α2677,) -> α2678)
//│ ╟── while constraining:  ‹∀ 0. (α2652' -> α2653')›  <!<  α2677
//│ ╟── while constraining:  α2675  <!<  α2677
//│ ╟── while constraining:  (α2675,)  <!<  (α2677,)
//│ ╟── while constraining:  (α2677 -> α2678)  <!<  ((α2675,) -> α2676)
//│ ╟── while constraining:  ‹∀ 0. (α2652' -> α2653')›  <!<  ((α2675,) -> α2676)
//│ ╟── while constraining:  ‹∀ 0. (α2652' -> α2653')›  <!<  α2675
//│ ╟── while constraining:  α2673  <!<  α2675
//│ ╟── while constraining:  (α2673,)  <!<  (α2675,)
//│ ╟── while constraining:  (α2675 -> α2676)  <!<  ((α2673,) -> α2674)
//│ ╟── while constraining:  ‹∀ 0. (α2652' -> α2653')›  <!<  ((α2673,) -> α2674)
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  ‹∀ 0. (α2652' -> α2653')›  <!<  ((α2659,) -> α2660)
//│ ╟── while constraining:  ‹∀ 0. (α2652' -> α2653')›  <!<  α2659
//│ ╟── while constraining:  α2657  <!<  α2659
//│ ╟── while constraining:  (α2657,)  <!<  (α2659,)
//│ ╟── while constraining:  (α2659 -> α2660)  <!<  ((α2657,) -> α2658)
//│ ╟── while constraining:  ‹∀ 0. (α2652' -> α2653')›  <!<  ((α2657,) -> α2658)
//│ ╟── while constraining:  ‹∀ 0. (α2652' -> α2653')›  <!<  α2657
//│ ╟── while constraining:  α2655  <!<  α2657
//│ ╟── while constraining:  (α2655,)  <!<  (α2657,)
//│ ╟── while constraining:  (α2657 -> α2658)  <!<  ((α2655,) -> α2656)
//│ ╟── while constraining:  ‹∀ 0. (α2652' -> α2653')›  <!<  ((α2655,) -> α2656)
//│ ╟── while constraining:  ‹∀ 0. (α2652' -> α2653')›  <!<  α2655
//│ ╟── while constraining:  (‹∀ 0. (α2652' -> α2653')›,)  <!<  (α2655,)
//│ ╟── while constraining:  (α2655 -> α2656)  <!<  ((‹∀ 0. (α2652' -> α2653')›,) -> α2654)
//│ ╙── while constraining:  ‹∀ 0. (α2650' -> α2651')›  <!<  ((‹∀ 0. (α2652' -> α2653')›,) -> α2654)
//│ res: error
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded

//     * Rank 3, untypable in F2 but F3
//       (fun f x -> f (f x)) (fun f x -> f (f x)) (fun v w -> v)
(fun f -> fun x -> f (f x)) (fun f -> fun x -> f (f x)) (fun v -> fun w -> v)
//│ res: 'a -> 'b
//│   where
//│     'a :> 'b
//│     'b :> anything -> anything -> 'a
//│    = [Function (anonymous)]

//     * Rank 4, alternate formulation, untypeable in F2, but F3
//       (fun two k -> two two k)(fun f x -> f (f x)) (fun v w -> v)
(fun two -> fun k -> two two k) (fun f -> fun x -> f (f x)) (fun v -> fun w -> v)
//│ res: 'a -> 'b
//│   where
//│     'a :> 'b
//│     'b :> anything -> anything -> 'a
//│    = [Function (anonymous)]

//     * Rank 5, causes huge blowup. Do not attempt to output skeletons !
//       (fun two k -> two two two k)(fun f -x -> f (f x)) (fun v w -> v)
(fun two -> fun k -> two two two k) (fun f -> fun x -> f (f x)) (fun v -> fun w -> v)
//│ res: 'a -> 'b
//│   where
//│     'a :> 'c
//│     'c :> anything -> 'a | 'b
//│     'b :> anything -> 'c
//│    = [Function (anonymous)]



//  ?????
//     * Factorial of two, using the Y combinator
//       (fun h -> (fun x -> h (x x)) (fun x -> h (x x))) (fun f -> fun n -> n (fun v -> fun x -> fun y -> y) k (fun f -> fun x -> f x)(fun g -> fun x -> n (f (n (fun p -> fun s -> s (p (fun x -> fun y -> y)) (fun f -> fun x -> f (p (fun x -> fun y -> y) f x))) (fun s -> s (fun f -> fun x -> x) (fun f -> fun x -> x)) k) g) x)) (fun f -> fun x -> f (f x))

// *)
:e
(fun h -> (fun x -> h (x x)) (fun x -> h (x x))) (fun f -> fun n -> n (fun v -> fun x -> fun y -> y) k (fun f -> fun x -> f x)(fun g -> fun x -> n (f (n (fun p -> fun s -> s (p (fun x -> fun y -> y)) (fun f -> fun x -> f (p (fun x -> fun y -> y) f x))) (fun s -> s (fun f -> fun x -> x) (fun f -> fun x -> x)) k) g) x)) (fun f -> fun x -> f (f x))
//│ ╔══[ERROR] Subtyping constraint of the form `?a -> ?b <: (forall ?c, ?d, ?e. (?e -> ?d
//│   where
//│     ?f <: ?c -> ?d)) -> ?g` exceeded recursion depth limit (400)
//│ ║  l.386: 	(fun h -> (fun x -> h (x x)) (fun x -> h (x x))) (fun f -> fun n -> n (fun v -> fun x -> fun y -> y) k (fun f -> fun x -> f x)(fun g -> fun x -> n (f (n (fun p -> fun s -> s (p (fun x -> fun y -> y)) (fun f -> fun x -> f (p (fun x -> fun y -> y) f x))) (fun s -> s (fun f -> fun x -> x) (fun f -> fun x -> x)) k) g) x)) (fun f -> fun x -> f (f x))
//│ ║         	          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  ‹∀ 1. {(α2828'' -> α2830'') where: α2824' <: ((α2829'',) -> α2830'')}›  <!<  α2867'
//│ ╟── while constraining:  α2864'  <!<  α2867'
//│ ╟── while constraining:  (α2864',)  <!<  (α2867',)
//│ ╟── while constraining:  (α2867' -> α2866')  <!<  ((α2864',) -> α2862')
//│ ╟── while constraining:  {(α2867' -> α2866') where: α2824' <: ((α2865',) -> α2866')}  <!<  ((α2864',) -> α2862')
//│ ╟── while constraining:  ‹∀ 1. {(α2828'' -> α2830'') where: α2824' <: ((α2829'',) -> α2830'')}›  <!<  ((α2864',) -> α2862')
//│ ╟── while constraining:  ‹∀ 1. {(α2828'' -> α2830'') where: α2824' <: ((α2829'',) -> α2830'')}›  <!<  α2864'
//│ ╟── while constraining:  α2861'  <!<  α2864'
//│ ╟── while constraining:  (α2861',)  <!<  (α2864',)
//│ ╟── while constraining:  (α2864' -> α2863')  <!<  ((α2861',) -> α2859')
//│ ╟── while constraining:  {(α2864' -> α2863') where: α2824' <: ((α2862',) -> α2863')}  <!<  ((α2861',) -> α2859')
//│ ╟── while constraining:  ‹∀ 1. {(α2828'' -> α2830'') where: α2824' <: ((α2829'',) -> α2830'')}›  <!<  ((α2861',) -> α2859')
//│ ╟── while constraining:  ‹∀ 1. {(α2828'' -> α2830'') where: α2824' <: ((α2829'',) -> α2830'')}›  <!<  α2861'
//│ ╟── while constraining:  α2858'  <!<  α2861'
//│ ╟── while constraining:  (α2858',)  <!<  (α2861',)
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  ‹∀ 1. {(α2828'' -> α2830'') where: α2824' <: ((α2829'',) -> α2830'')}›  <!<  α2837'
//│ ╟── while constraining:  α2834'  <!<  α2837'
//│ ╟── while constraining:  (α2834',)  <!<  (α2837',)
//│ ╟── while constraining:  (α2837' -> α2836')  <!<  ((α2834',) -> α2832')
//│ ╟── while constraining:  {(α2837' -> α2836') where: α2824' <: ((α2835',) -> α2836')}  <!<  ((α2834',) -> α2832')
//│ ╟── while constraining:  ‹∀ 1. {(α2828'' -> α2830'') where: α2824' <: ((α2829'',) -> α2830'')}›  <!<  ((α2834',) -> α2832')
//│ ╟── while constraining:  ‹∀ 1. {(α2828'' -> α2830'') where: α2824' <: ((α2829'',) -> α2830'')}›  <!<  α2834'
//│ ╟── while constraining:  α2825'  <!<  α2834'
//│ ╟── while constraining:  (α2825',)  <!<  (α2834',)
//│ ╟── while constraining:  (α2834' -> α2833')  <!<  ((α2825',) -> α2826')
//│ ╟── while constraining:  {(α2834' -> α2833') where: α2824' <: ((α2832',) -> α2833')}  <!<  ((α2825',) -> α2826')
//│ ╟── while constraining:  ‹∀ 1. {(α2828'' -> α2830'') where: α2824' <: ((α2829'',) -> α2830'')}›  <!<  ((α2825',) -> α2826')
//│ ╟── while constraining:  ‹∀ 1. {(α2828'' -> α2830'') where: α2824' <: ((α2829'',) -> α2830'')}›  <!<  α2825'
//│ ╟── while constraining:  (‹∀ 1. {(α2828'' -> α2830'') where: α2824' <: ((α2829'',) -> α2830'')}›,)  <!<  (α2825',)
//│ ╙── while constraining:  (α2825' -> α2827')  <!<  ((‹∀ 1. {(α2828'' -> α2830'') where: α2824' <: ((α2829'',) -> α2830'')}›,) -> α2831')
//│ res: error
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded


