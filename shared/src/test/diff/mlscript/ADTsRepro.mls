
type Add[E] = { x: E -> E }
//│ Defined type alias Add[=E]

def e2: Add['e] as 'e
//│ e2: 'e
//│   where
//│     'e := Add['e]
//│   = <missing implementation>

// :d
// FIXME
e2 : Add['e] as 'e
//│ ╔══[ERROR] Cyclic-looking constraint while typing type ascription
//│ ║  l.13: 	e2 : Add['e] as 'e
//│ ║        	^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 0. 'e23'›  <:  'e29    PolymorphicType  TypeVariable
//│ ╙──  ... looks like:  ‹∀ 0. 'e23'›  <:  'e23'
//│ res: 'e
//│   where
//│     'e :> forall 'e0. 'e0 | error | Add['e]
//│        <: Add['e] & 'e1
//│     'e1 :> (forall 'e0. 'e0 | error | Add['e1]) | error | Add['e1]
//│         <: Add['e1] & {x: 'e -> 'e} & {x: 'e1 -> 'e1}
//│     'e0 := Add['e0]
//│    = <no result>
//│      e2 is not implemented


def f0: ('a -> int) as 'a
//│ f0: 'a
//│   where
//│     'a := 'a -> int
//│   = <missing implementation>

// :d
// FIXME
f0 = f0
//│ 'a
//│   where
//│     'a := 'a -> int
//│   <:  f0:
//│ 'a
//│   where
//│     'a := 'a -> int
//│ ╔══[ERROR] Cyclic-looking constraint while typing def definition
//│ ║  l.39: 	f0 = f0
//│ ║        	^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 0. ‹∀ 0. 'a42'››  <:  'a53'    PolymorphicType  TypeVariable
//│ ╙──  ... looks like:  ‹∀ 0. ‹∀ 0. 'a42'››  <:  'a42'
//│ ╔══[ERROR] Cyclic-looking constraint while typing def definition
//│ ║  l.39: 	f0 = f0
//│ ║        	^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ('a52' -> int<number>)  <:  ('a53' -> int<number>)    FunctionType  FunctionType
//│ ╙──  ... looks like:  ('a42' -> int<number>)  <:  ('a42' -> int<number>)
//│   = <no result>
//│     f0 is not implemented


type F1 = F1 -> int
//│ Defined type alias F1

def f1: F1
//│ f1: F1
//│   = <missing implementation>

f1 = f1
//│ F1
//│   <:  f1:
//│ F1
//│   = <no result>
//│     f1 is not implemented


type F2[A] = F2[A] -> A
//│ Defined type alias F2[=A]

def f1: F2[int]
//│ f1: F2[int]
//│   = <missing implementation>

f1 = f1
//│ F2[int]
//│   <:  f1:
//│ F2[int]
//│   = <no result>
//│     f1 is not implemented


