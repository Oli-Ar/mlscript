:ShowRelativeLineNums
:NoJS

class MyArray[A]: { size: int; set: (int, A) -> (); get: int -> A }
//│ Defined class MyArray[=A]

dummy = MyArray {
    size = 0;
    set = fun (i, a) -> ();
    get = fun i -> error
  }
//│ dummy: MyArray['A] with {get: anything -> nothing, set: (anything, anything,) -> (), size: 0}

dummy: MyArray[int]
//│ res: MyArray[int]

def ty1A: MyArray[int]
def ty1B: MyArray[0 | 1]
//│ ty1A: MyArray[int]
//│ ty1B: MyArray[0 | 1]


def ty2A: MyArray['a]
//│ ty2A: MyArray['a]

:stats
ty2A = ty2A
//│ MyArray['a]
//│   <:  ty2A:
//│ MyArray['a]
//│ constrain calls  : 40
//│ annoying  calls  : 24
//│ subtyping calls  : 28

def ty2B: MyArray[MyArray['a]]
//│ ty2B: MyArray[MyArray['a]]

:stats
ty2B = ty2A
//│ MyArray['a]
//│   <:  ty2B:
//│ MyArray[MyArray['a]]
//│ constrain calls  : 36
//│ annoying  calls  : 24
//│ subtyping calls  : 27



def ty3A: MyArray['a] as 'a
//│ ty3A: 'a
//│   where
//│     'a := MyArray['a]

:e // FIXME (probably the issue reproduced in `ADRsRepro.mls`)
:stats
ty3A = ty3A
//│ 'a
//│   where
//│     'a := MyArray['a]
//│   <:  ty3A:
//│ 'a
//│   where
//│     'a := MyArray['a]
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a. ?a <: forall ?a0. ?a0` exceeded recursion depth limit (400)
//│ ║  l.+1: 	ty3A = ty3A
//│ ║        	^^^^^^^^^^^
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  {size: Int, set: ((Int, 'a117',) -> ()), get: (Int -> 'a117')}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  'a118'
//│ ╟── while constraining:  'a117'  <!<  'a118'
//│ ╟── while constraining:  (int<number>, 'a117',)  <!<  (int<number>, 'a118',)
//│ ╟── while constraining:  ((int<number>, 'a118',) -> ())  <!<  ((int<number>, 'a117',) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, 'a118',) -> ()), get: (Int -> 'a118')}) & {MyArray#A: mut 'a118'..'a118'})  <!<  {size: Int, set: ((Int, 'a117',) -> ()), get: (Int -> 'a117')}
//│ ╟── while constraining:  MyArray['a118']  <!<  {size: Int, set: ((Int, 'a117',) -> ()), get: (Int -> 'a117')}
//│ ╟── while constraining:  'a118'  <!<  {size: Int, set: ((Int, 'a117',) -> ()), get: (Int -> 'a117')}
//│ ╟── while constraining:  ‹∀ 0. 'a95'›  <!<  {size: Int, set: ((Int, 'a117',) -> ()), get: (Int -> 'a117')}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  {size: Int, set: ((Int, 'a117',) -> ()), get: (Int -> 'a117')}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  (myArray<> & {size: Int, set: ((Int, 'a117',) -> ()), get: (Int -> 'a117')})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  ((myArray<> & {size: Int, set: ((Int, 'a117',) -> ()), get: (Int -> 'a117')}) & {MyArray#A: mut 'a117'..'a117'})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  MyArray['a117']
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  'a117'
//│ ╟── while constraining:  'a116'  <!<  'a117'
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  {size: Int, set: ((Int, 'a106',) -> ()), get: (Int -> 'a106')}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  (myArray<> & {size: Int, set: ((Int, 'a106',) -> ()), get: (Int -> 'a106')})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  ((myArray<> & {size: Int, set: ((Int, 'a106',) -> ()), get: (Int -> 'a106')}) & {MyArray#A: mut 'a106'..'a106'})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  MyArray['a106']
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  'a106'
//│ ╟── while constraining:  'a105'  <!<  'a106'
//│ ╟── while constraining:  (int<number>, 'a105',)  <!<  (int<number>, 'a106',)
//│ ╟── while constraining:  ((int<number>, 'a106',) -> ())  <!<  ((int<number>, 'a105',) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, 'a106',) -> ()), get: (Int -> 'a106')}) & {MyArray#A: mut 'a106'..'a106'})  <!<  (‘a' | MyArray['a105'])
//│ ╟── while constraining:  MyArray['a106']  <!<  (‘a' | MyArray['a105'])
//│ ╟── while constraining:  'a106'  <!<  (‘a' | MyArray['a105'])
//│ ╟── while constraining:  ‹∀ 0. 'a95'›  <!<  (‘a' | MyArray['a105'])
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  (‘a' | MyArray['a105'])
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  'a105'
//│ ╙── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  ‹∀ 0. 'a95'›
//│ constrain calls  : 703
//│ annoying  calls  : 172
//│ subtyping calls  : 155

def ty3B: MyArray[MyArray['a]] as 'a
//│ ty3B: 'a
//│   where
//│     'a := MyArray[MyArray['a]]

:e // FIXME (probably the issue reproduced in `ADRsRepro.mls`)
:stats
ty3B = ty3A
//│ 'a
//│   where
//│     'a := MyArray['a]
//│   <:  ty3B:
//│ 'a
//│   where
//│     'a := MyArray[MyArray['a]]
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a. ?a <: forall ?a0. ?a0` exceeded recursion depth limit (400)
//│ ║  l.+1: 	ty3B = ty3A
//│ ║        	^^^^^^^^^^^
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  {size: Int, set: ((Int, 'a143',) -> ()), get: (Int -> 'a143')}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  'a144'
//│ ╟── while constraining:  'a143'  <!<  'a144'
//│ ╟── while constraining:  (int<number>, 'a143',)  <!<  (int<number>, 'a144',)
//│ ╟── while constraining:  ((int<number>, 'a144',) -> ())  <!<  ((int<number>, 'a143',) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, 'a144',) -> ()), get: (Int -> 'a144')}) & {MyArray#A: mut 'a144'..'a144'})  <!<  {size: Int, set: ((Int, 'a143',) -> ()), get: (Int -> 'a143')}
//│ ╟── while constraining:  MyArray['a144']  <!<  {size: Int, set: ((Int, 'a143',) -> ()), get: (Int -> 'a143')}
//│ ╟── while constraining:  'a144'  <!<  {size: Int, set: ((Int, 'a143',) -> ()), get: (Int -> 'a143')}
//│ ╟── while constraining:  ‹∀ 0. 'a95'›  <!<  {size: Int, set: ((Int, 'a143',) -> ()), get: (Int -> 'a143')}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  {size: Int, set: ((Int, 'a143',) -> ()), get: (Int -> 'a143')}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  (myArray<> & {size: Int, set: ((Int, 'a143',) -> ()), get: (Int -> 'a143')})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  ((myArray<> & {size: Int, set: ((Int, 'a143',) -> ()), get: (Int -> 'a143')}) & {MyArray#A: mut 'a143'..'a143'})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  MyArray['a143']
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  'a143'
//│ ╟── while constraining:  'a142'  <!<  'a143'
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  ((myArray<> & {size: Int, set: ((Int, 'a131',) -> ()), get: (Int -> 'a131')}) & {MyArray#A: mut 'a131'..'a131'})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  MyArray['a131']
//│ ╟── while constraining:  'a131'  <!<  MyArray['a131']
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, 'a131',) -> ()), get: (Int -> 'a131')}) & {MyArray#A: mut 'a131'..'a131'})  <!<  (‘a' | MyArray[MyArray['a131']])
//│ ╟── while constraining:  MyArray['a131']  <!<  (‘a' | MyArray[MyArray['a131']])
//│ ╟── while constraining:  MyArray['a131']  <!<  'a132'
//│ ╟── while constraining:  (int<number>, MyArray['a131'],)  <!<  (int<number>, 'a132',)
//│ ╟── while constraining:  ((int<number>, 'a132',) -> ())  <!<  ((int<number>, MyArray['a131'],) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, 'a132',) -> ()), get: (Int -> 'a132')}) & {MyArray#A: mut 'a132'..'a132'})  <!<  (‘a' | MyArray[MyArray['a131']])
//│ ╟── while constraining:  MyArray['a132']  <!<  (‘a' | MyArray[MyArray['a131']])
//│ ╟── while constraining:  'a132'  <!<  (‘a' | MyArray[MyArray['a131']])
//│ ╟── while constraining:  ‹∀ 0. 'a95'›  <!<  (‘a' | MyArray[MyArray['a131']])
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  (‘a' | MyArray[MyArray['a131']])
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  'a131'
//│ ╙── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  ‹∀ 0. 'a121'›
//│ constrain calls  : 753
//│ annoying  calls  : 216
//│ subtyping calls  : 203

:e // FIXME (probably the issue reproduced in `ADRsRepro.mls`)
:stats
ty3A = ty3B
//│ 'a
//│   where
//│     'a := MyArray[MyArray['a]]
//│   <:  ty3A:
//│ 'a
//│   where
//│     'a := MyArray['a]
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a. ?a <: forall ?a0. ?a0` exceeded recursion depth limit (400)
//│ ║  l.+1: 	ty3A = ty3B
//│ ║        	^^^^^^^^^^^
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  {size: Int, set: ((Int, MyArray['a165'],) -> ()), get: (Int -> MyArray['a165'])}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  'a166'
//│ ╟── while constraining:  'a165'  <!<  'a166'
//│ ╟── while constraining:  MyArray['a165']  <!<  MyArray['a166']
//│ ╟── while constraining:  (int<number>, MyArray['a165'],)  <!<  (int<number>, MyArray['a166'],)
//│ ╟── while constraining:  ((int<number>, MyArray['a166'],) -> ())  <!<  ((int<number>, MyArray['a165'],) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, MyArray['a166'],) -> ()), get: (Int -> MyArray['a166'])}) & {MyArray#A: mut MyArray['a166']..MyArray['a166']})  <!<  {size: Int, set: ((Int, MyArray['a165'],) -> ()), get: (Int -> MyArray['a165'])}
//│ ╟── while constraining:  MyArray[MyArray['a166']]  <!<  {size: Int, set: ((Int, MyArray['a165'],) -> ()), get: (Int -> MyArray['a165'])}
//│ ╟── while constraining:  'a166'  <!<  {size: Int, set: ((Int, MyArray['a165'],) -> ()), get: (Int -> MyArray['a165'])}
//│ ╟── while constraining:  ‹∀ 0. 'a121'›  <!<  {size: Int, set: ((Int, MyArray['a165'],) -> ()), get: (Int -> MyArray['a165'])}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  {size: Int, set: ((Int, MyArray['a165'],) -> ()), get: (Int -> MyArray['a165'])}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  (myArray<> & {size: Int, set: ((Int, MyArray['a165'],) -> ()), get: (Int -> MyArray['a165'])})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  ((myArray<> & {size: Int, set: ((Int, MyArray['a165'],) -> ()), get: (Int -> MyArray['a165'])}) & {MyArray#A: mut MyArray['a165']..MyArray['a165']})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  MyArray[MyArray['a165']]
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  'a165'
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  ‹∀ 0. 'a121'›  <!<  {size: Int, set: ((Int, 'a154',) -> ()), get: (Int -> 'a154')}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  {size: Int, set: ((Int, 'a154',) -> ()), get: (Int -> 'a154')}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  (myArray<> & {size: Int, set: ((Int, 'a154',) -> ()), get: (Int -> 'a154')})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  ((myArray<> & {size: Int, set: ((Int, 'a154',) -> ()), get: (Int -> 'a154')}) & {MyArray#A: mut 'a154'..'a154'})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  MyArray['a154']
//│ ╟── while constraining:  'a153'  <!<  MyArray['a154']
//│ ╟── while constraining:  (int<number>, 'a153',)  <!<  (int<number>, MyArray['a154'],)
//│ ╟── while constraining:  ((int<number>, MyArray['a154'],) -> ())  <!<  ((int<number>, 'a153',) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, MyArray['a154'],) -> ()), get: (Int -> MyArray['a154'])}) & {MyArray#A: mut MyArray['a154']..MyArray['a154']})  <!<  (‘a' | MyArray['a153'])
//│ ╟── while constraining:  MyArray[MyArray['a154']]  <!<  (‘a' | MyArray['a153'])
//│ ╟── while constraining:  'a154'  <!<  (‘a' | MyArray['a153'])
//│ ╟── while constraining:  ‹∀ 0. 'a121'›  <!<  (‘a' | MyArray['a153'])
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  (‘a' | MyArray['a153'])
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  'a153'
//│ ╙── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  ‹∀ 0. 'a95'›
//│ constrain calls  : 684
//│ annoying  calls  : 190
//│ subtyping calls  : 185

def ty4B: MyArray[MyArray[MyArray['a]]] as 'a
//│ ty4B: 'a
//│   where
//│     'a := MyArray[MyArray[MyArray['a]]]

:e // FIXME (probably the issue reproduced in `ADRsRepro.mls`)
:stats
ty4B = ty4B
//│ 'a
//│   where
//│     'a := MyArray[MyArray[MyArray['a]]]
//│   <:  ty4B:
//│ 'a
//│   where
//│     'a := MyArray[MyArray[MyArray['a]]]
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a. ?a <: forall ?a0. ?a0` exceeded recursion depth limit (400)
//│ ║  l.+1: 	ty4B = ty4B
//│ ║        	^^^^^^^^^^^
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a169'››  <!<  {size: Int, set: ((Int, MyArray[MyArray['a190']],) -> ()), get: (Int -> MyArray[MyArray['a190']])}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a169'››  <!<  'a191'
//│ ╟── while constraining:  'a190'  <!<  'a191'
//│ ╟── while constraining:  MyArray['a190']  <!<  MyArray['a191']
//│ ╟── while constraining:  MyArray[MyArray['a190']]  <!<  MyArray[MyArray['a191']]
//│ ╟── while constraining:  (int<number>, MyArray[MyArray['a190']],)  <!<  (int<number>, MyArray[MyArray['a191']],)
//│ ╟── while constraining:  ((int<number>, MyArray[MyArray['a191']],) -> ())  <!<  ((int<number>, MyArray[MyArray['a190']],) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, MyArray[MyArray['a191']],) -> ()), get: (Int -> MyArray[MyArray['a191']])}) & {MyArray#A: mut MyArray[MyArray['a191']]..MyArray[MyArray['a191']]})  <!<  {size: Int, set: ((Int, MyArray[MyArray['a190']],) -> ()), get: (Int -> MyArray[MyArray['a190']])}
//│ ╟── while constraining:  MyArray[MyArray[MyArray['a191']]]  <!<  {size: Int, set: ((Int, MyArray[MyArray['a190']],) -> ()), get: (Int -> MyArray[MyArray['a190']])}
//│ ╟── while constraining:  'a191'  <!<  {size: Int, set: ((Int, MyArray[MyArray['a190']],) -> ()), get: (Int -> MyArray[MyArray['a190']])}
//│ ╟── while constraining:  ‹∀ 0. 'a169'›  <!<  {size: Int, set: ((Int, MyArray[MyArray['a190']],) -> ()), get: (Int -> MyArray[MyArray['a190']])}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a169'››  <!<  {size: Int, set: ((Int, MyArray[MyArray['a190']],) -> ()), get: (Int -> MyArray[MyArray['a190']])}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a169'››  <!<  (myArray<> & {size: Int, set: ((Int, MyArray[MyArray['a190']],) -> ()), get: (Int -> MyArray[MyArray['a190']])})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a169'››  <!<  ((myArray<> & {size: Int, set: ((Int, MyArray[MyArray['a190']],) -> ()), get: (Int -> MyArray[MyArray['a190']])}) & {MyArray#A: mut MyArray[MyArray['a190']]..MyArray[MyArray['a190']]})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a169'››  <!<  MyArray[MyArray[MyArray['a190']]]
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a169'››  <!<  ((myArray<> & {size: Int, set: ((Int, MyArray[MyArray['a180']],) -> ()), get: (Int -> MyArray[MyArray['a180']])}) & {MyArray#A: mut MyArray[MyArray['a180']]..MyArray[MyArray['a180']]})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a169'››  <!<  MyArray[MyArray[MyArray['a180']]]
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a169'››  <!<  'a180'
//│ ╟── while constraining:  'a179'  <!<  'a180'
//│ ╟── while constraining:  MyArray['a179']  <!<  MyArray['a180']
//│ ╟── while constraining:  MyArray[MyArray['a179']]  <!<  MyArray[MyArray['a180']]
//│ ╟── while constraining:  (int<number>, MyArray[MyArray['a179']],)  <!<  (int<number>, MyArray[MyArray['a180']],)
//│ ╟── while constraining:  ((int<number>, MyArray[MyArray['a180']],) -> ())  <!<  ((int<number>, MyArray[MyArray['a179']],) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, MyArray[MyArray['a180']],) -> ()), get: (Int -> MyArray[MyArray['a180']])}) & {MyArray#A: mut MyArray[MyArray['a180']]..MyArray[MyArray['a180']]})  <!<  (‘a' | MyArray[MyArray[MyArray['a179']]])
//│ ╟── while constraining:  MyArray[MyArray[MyArray['a180']]]  <!<  (‘a' | MyArray[MyArray[MyArray['a179']]])
//│ ╟── while constraining:  'a180'  <!<  (‘a' | MyArray[MyArray[MyArray['a179']]])
//│ ╟── while constraining:  ‹∀ 0. 'a169'›  <!<  (‘a' | MyArray[MyArray[MyArray['a179']]])
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a169'››  <!<  (‘a' | MyArray[MyArray[MyArray['a179']]])
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a169'››  <!<  'a179'
//│ ╙── while constraining:  ‹∀ 0. ‹∀ 0. 'a169'››  <!<  ‹∀ 0. 'a169'›
//│ constrain calls  : 661
//│ annoying  calls  : 158
//│ subtyping calls  : 144



//===//===//===// ERRORS //===//===//===//


:e
:stats
ty1A = ty1B
//│ MyArray[0 | 1]
//│   <:  ty1A:
//│ MyArray[int]
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.+1: 	ty1A = ty1B
//│ ║        	^^^^^^^^^^^
//│ ╟── type `int` does not match type `0 | 1`
//│ ║  l.17: 	def ty1A: MyArray[int]
//│ ╙──      	                  ^^^
//│ constrain calls  : 32
//│ annoying  calls  : 29
//│ subtyping calls  : 101

:e
:stats
ty1B = ty1A
//│ MyArray[int]
//│   <:  ty1B:
//│ MyArray[0 | 1]
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.+1: 	ty1B = ty1A
//│ ║        	^^^^^^^^^^^
//│ ╟── type `int` does not match type `0 | 1`
//│ ║  l.17: 	def ty1A: MyArray[int]
//│ ╙──      	                  ^^^
//│ constrain calls  : 32
//│ annoying  calls  : 29
//│ subtyping calls  : 72


:e
:stats
ty2A = ty2B
//│ MyArray[MyArray['a]]
//│   <:  ty2A:
//│ MyArray['a]
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.+1: 	ty2A = ty2B
//│ ║        	^^^^^^^^^^^
//│ ╟── type `‘a` is not an instance of type `MyArray`
//│ ║  l.23: 	def ty2A: MyArray['a]
//│ ║        	                  ^^
//│ ╟── Note: constraint arises from applied type reference:
//│ ║  l.35: 	def ty2B: MyArray[MyArray['a]]
//│ ╙──      	                  ^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.+1: 	ty2A = ty2B
//│ ║        	^^^^^^^^^^^
//│ ╟── type `‘a` is not a record (expected a record with fields: size, set, get)
//│ ║  l.23: 	def ty2A: MyArray['a]
//│ ║        	                  ^^
//│ ╟── Note: constraint arises from record type:
//│ ║  l.4: 	class MyArray[A]: { size: int; set: (int, A) -> (); get: int -> A }
//│ ║       	                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from applied type reference:
//│ ║  l.35: 	def ty2B: MyArray[MyArray['a]]
//│ ╙──      	                  ^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.+1: 	ty2A = ty2B
//│ ║        	^^^^^^^^^^^
//│ ╟── type `‘a` does not have field 'MyArray#A'
//│ ║  l.23: 	def ty2A: MyArray['a]
//│ ║        	                  ^^
//│ ╟── Note: constraint arises from applied type reference:
//│ ║  l.35: 	def ty2B: MyArray[MyArray['a]]
//│ ╙──      	                  ^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.+1: 	ty2A = ty2B
//│ ║        	^^^^^^^^^^^
//│ ╟── type `MyArray[?a]` is not an instance of type `'a`
//│ ║  l.35: 	def ty2B: MyArray[MyArray['a]]
//│ ║        	                  ^^^^^^^^^^^
//│ ╟── Note: constraint arises from type variable:
//│ ║  l.23: 	def ty2A: MyArray['a]
//│ ╙──      	                  ^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.+1: 	ty2A = ty2B
//│ ║        	^^^^^^^^^^^
//│ ╟── type `‘a` is not a record (expected a record with fields: size, set, get)
//│ ║  l.23: 	def ty2A: MyArray['a]
//│ ║        	                  ^^
//│ ╟── Note: constraint arises from record type:
//│ ║  l.4: 	class MyArray[A]: { size: int; set: (int, A) -> (); get: int -> A }
//│ ║       	                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from applied type reference:
//│ ║  l.35: 	def ty2B: MyArray[MyArray['a]]
//│ ╙──      	                  ^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.+1: 	ty2A = ty2B
//│ ║        	^^^^^^^^^^^
//│ ╟── type `‘a` does not have field 'MyArray#A'
//│ ║  l.23: 	def ty2A: MyArray['a]
//│ ║        	                  ^^
//│ ╟── Note: constraint arises from applied type reference:
//│ ║  l.35: 	def ty2B: MyArray[MyArray['a]]
//│ ╙──      	                  ^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.+1: 	ty2A = ty2B
//│ ║        	^^^^^^^^^^^
//│ ╟── type `MyArray[?a]` is not an instance of type `'a`
//│ ║  l.35: 	def ty2B: MyArray[MyArray['a]]
//│ ║        	                  ^^^^^^^^^^^
//│ ╟── Note: constraint arises from type variable:
//│ ║  l.23: 	def ty2A: MyArray['a]
//│ ╙──      	                  ^^
//│ constrain calls  : 46
//│ annoying  calls  : 32
//│ subtyping calls  : 105


