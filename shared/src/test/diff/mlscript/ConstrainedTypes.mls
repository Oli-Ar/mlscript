
:GeneralizeCurriedFunctions


def f n = n 0
//│ f: (0 -> 'a) -> 'a
//│  = [Function: f]

:e
f {}
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.10: 	f {}
//│ ║        	^^^^
//│ ╟── record literal of type `anything` is not a function
//│ ║  l.10: 	f {}
//│ ║        	  ^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.5: 	def f n = n 0
//│ ║       	          ^^^
//│ ╟── from reference:
//│ ║  l.5: 	def f n = n 0
//│ ╙──     	          ^
//│ res: error
//│ Runtime error:
//│   TypeError: n is not a function

:e
f {} {}
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.28: 	f {} {}
//│ ║        	^^^^
//│ ╟── record literal of type `anything` is not a function
//│ ║  l.28: 	f {} {}
//│ ║        	  ^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.5: 	def f n = n 0
//│ ║       	          ^^^
//│ ╟── from reference:
//│ ║  l.5: 	def f n = n 0
//│ ╙──     	          ^
//│ res: error
//│ Runtime error:
//│   TypeError: n is not a function


def f n m = n 0
//│ f: (0 -> 'a) -> (forall 'a. anything -> 'a)
//│  = [Function: f1]

:e // due to tapping
f {}
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.51: 	f {}
//│ ║        	^^^^
//│ ╟── record literal of type `anything` is not a function
//│ ║  l.51: 	f {}
//│ ║        	  ^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.46: 	def f n m = n 0
//│ ║        	            ^^^
//│ ╟── from reference:
//│ ║  l.46: 	def f n m = n 0
//│ ╙──      	            ^
//│ res: anything -> nothing | error
//│    = [Function (anonymous)]

:e
f {} {}
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.68: 	f {} {}
//│ ║        	^^^^
//│ ╟── record literal of type `anything` is not a function
//│ ║  l.68: 	f {} {}
//│ ║        	  ^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.46: 	def f n m = n 0
//│ ║        	            ^^^
//│ ╟── from reference:
//│ ║  l.46: 	def f n m = n 0
//│ ╙──      	            ^
//│ res: error
//│ Runtime error:
//│   TypeError: n is not a function


