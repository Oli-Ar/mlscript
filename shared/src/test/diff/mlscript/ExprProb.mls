
def intToString: int -> string
def intToString x = toString x
def done x = case x of {}
//│ intToString: int -> string
//│            = <missing implementation>
//│ anything -> string
//│   <:  intToString:
//│ int -> string
//│            = [Function: intToString]
//│ done: nothing -> nothing
//│     = [Function: done]



class Lit: { val: int }
class Add[E]: { lhs: E; rhs: E }
def lit val = Lit { val }
def add lhs rhs = Add { lhs; rhs }
//│ Defined class Lit
//│ Defined class Add[+E]
//│ lit: (int & 'val) -> (Lit with {val: 'val})
//│    = [Function: lit]
//│ add: ('lhs & 'E) -> ('E & 'rhs) -> (Add['E] with {lhs: 'lhs, rhs: 'rhs})
//│    = [Function: add]



rec def eval1_stub k e = case e of {
  | Add -> eval1_stub k e.lhs
  | _ -> k e
  }
//│ eval1_stub: ('a -> 'b) -> 'c -> 'b
//│   where
//│     'c <: Add[?] & {lhs: 'c} | 'a & ~add
//│           = [Function: eval1_stub]

rec def eval1_stub k e = case e of {
  | Add -> eval1_stub k e.lhs + eval1_stub k e.rhs
  | _ -> k e
  }
//│ eval1_stub: ('a -> int) -> 'b -> int
//│   where
//│     'b <: Add[?] & {lhs: 'b, rhs: 'b} | 'a & ~add
//│           = [Function: eval1_stub1]

:ns
rec def eval1_stub e = case e of {
  | Lit -> 1
  | Add -> eval1_stub e.lhs
  | _ -> 0
  }
//│ eval1_stub: forall 'eval1_stub, 'a, 'b, 'c, 'lhs, 'd, 'e. 'eval1_stub
//│   where
//│     'eval1_stub :> 'a -> (1 | 'd | 0)
//│                 <: 'lhs -> 'd
//│     'd :> 1 | 'd | 0
//│     'a <: lit & 'b | (add & 'c | 'e & ~add) & ~lit
//│     'c <: {lhs: 'lhs}
//│     'lhs <: 'a
//│           = [Function: eval1_stub2]

eval1_stub
//│ res: 'a -> (0 | 1)
//│   where
//│     'a <: Add[?] & {lhs: 'a} | Lit | ~Add[?] & ~Lit
//│    = [Function: eval1_stub2]

// def eval1: ('b -> int) -> Expr['b] -> int
:stats
rec def eval1 k e = case e of {
  | Lit -> e.val
  | Add -> eval1 k e.lhs + eval1 k e.rhs
  | _ -> k e
  }
//│ eval1: ('a -> int) -> 'b -> int
//│   where
//│     'b <: Add[?] & {lhs: 'b, rhs: 'b} | Lit | 'a & ~add & ~lit
//│      = [Function: eval1]
//│ constrain calls  : 79
//│ annoying  calls  : 0
//│ subtyping calls  : 87

:ns
eval1
//│ res: forall 'eval1, 'a, 'b, 'c, 'val, 'd, 'e, 'lhs, 'f, 'g, 'rhs, 'h, 'i, 'j, 'k. 'eval1
//│   where
//│     'eval1 :> 'a -> 'b -> ('val | 'i | 'k)
//│            <: 'a -> 'g & 'a -> 'e
//│     'e :> 'b -> ('val | 'i | 'k)
//│        <: 'lhs -> 'f
//│     'f :> 'val | 'i | 'k
//│        <: int
//│     'g :> 'b -> ('val | 'i | 'k)
//│        <: 'rhs -> 'h
//│     'h :> 'val | 'i | 'k
//│        <: int
//│     'i := int
//│     'b <: lit & 'c | (add & 'd | 'j & ~add) & ~lit
//│     'd <: {rhs: 'rhs} & {lhs: 'lhs}
//│     'lhs <: 'b
//│     'rhs <: 'b
//│     'c <: {val: 'val}
//│     'val <: int
//│     'a <: 'j -> 'k
//│     'k <: int
//│    = [Function: eval1]

:re
error: ~Add[?]
//│ res: ~Add[nothing]
//│ Runtime error:
//│   Error: unexpected runtime error

:re
error: ('a & ~Lit) -> 'a
//│ res: ('a & ~Lit) -> 'a
//│ Runtime error:
//│   Error: unexpected runtime error

:re
error: ('a) -> ('a & Add[?])
error: ('a) -> ('a & ~Add[?])
error: ('a & ~Add[?]) -> 'a
//│ res: 'a -> (Add[?] & 'a)
//│ Runtime error:
//│   Error: unexpected runtime error
//│ res: 'a -> ('a & ~Add[nothing])
//│ Runtime error:
//│   Error: unexpected runtime error
//│ res: ('a & ~Add[?]) -> 'a
//│ Runtime error:
//│   Error: unexpected runtime error

:re
error: ('a & ~add) -> 'a
//│ res: ('a & ~add) -> 'a
//│ Runtime error:
//│   Error: unexpected runtime error

:ns
def eval1_ty_ugly: ('a -> int) -> (Lit | Add['b] | 'a & ~Lit & ~Add[?] as 'b) -> int
//│ eval1_ty_ugly: forall 'a, 'b. ('a -> int) -> 'b -> int
//│   where
//│     'b := Lit | Add['b] | 'a & ~Lit & ~Add[?]
//│              = <missing implementation>

eval1_ty_ugly
//│ res: ('a -> int) -> 'b -> int
//│   where
//│     'b <: 'a & ~Add[?] & ~Lit | Add['b] | Lit
//│    = <no result>
//│      eval1_ty_ugly is not implemented

:stats
def eval1_ty_ugly = eval1
//│ ('a -> int) -> 'b -> int
//│   where
//│     'b <: Add[?] & {lhs: 'b, rhs: 'b} | Lit | 'a & ~add & ~lit
//│   <:  eval1_ty_ugly:
//│ ('a -> int) -> 'b -> int
//│   where
//│     'b <: 'a & ~Add[?] & ~Lit | Add['b] | Lit
//│              = [Function: eval1]
//│ constrain calls  : 81
//│ annoying  calls  : 36
//│ subtyping calls  : 315

:ns
def eval1_ty: ('a -> int) -> (Lit | Add['b] | 'a & ~lit & ~add as 'b) -> int
//│ eval1_ty: forall 'a, 'b. ('a -> int) -> 'b -> int
//│   where
//│     'b := Lit | Add['b] | 'a & ~lit & ~add
//│         = <missing implementation>

eval1_ty
//│ res: ('a -> int) -> 'b -> int
//│   where
//│     'b <: 'a & ~add & ~lit | Add['b] | Lit
//│    = <no result>
//│      eval1_ty is not implemented

:stats
def eval1_ty = eval1
//│ ('a -> int) -> 'b -> int
//│   where
//│     'b <: Add[?] & {lhs: 'b, rhs: 'b} | Lit | 'a & ~add & ~lit
//│   <:  eval1_ty:
//│ ('a -> int) -> 'b -> int
//│   where
//│     'b <: 'a & ~add & ~lit | Add['b] | Lit
//│         = [Function: eval1]
//│ constrain calls  : 81
//│ annoying  calls  : 36
//│ subtyping calls  : 317

:stats
eval1_ty_ugly = eval1_ty
//│ ('a -> int) -> 'b -> int
//│   where
//│     'b <: 'a & ~add & ~lit | Add['b] | Lit
//│   <:  eval1_ty_ugly:
//│ ('a -> int) -> 'b -> int
//│   where
//│     'b <: 'a & ~Add[?] & ~Lit | Add['b] | Lit
//│              = [Function: eval1]
//│ constrain calls  : 18
//│ annoying  calls  : 1
//│ subtyping calls  : 196

:stats
eval1_ty = eval1_ty_ugly
//│ ('a -> int) -> 'b -> int
//│   where
//│     'b <: 'a & ~Add[?] & ~Lit | Add['b] | Lit
//│   <:  eval1_ty:
//│ ('a -> int) -> 'b -> int
//│   where
//│     'b <: 'a & ~add & ~lit | Add['b] | Lit
//│         = [Function: eval1]
//│ constrain calls  : 18
//│ annoying  calls  : 1
//│ subtyping calls  : 978


// Workaround:
:ns
type E1[A] = Lit | Add[E1[A]] | A & ~lit & ~add
def eval1_ty: ('a -> int) -> E1['a] -> int
//│ Defined type alias E1[+A]
//│ eval1_ty: forall 'a. ('a -> int) -> E1['a] -> int
//│         = <missing implementation>

eval1_ty
//│ res: ('a -> int) -> E1['a] -> int
//│    = <no result>
//│      eval1_ty is not implemented

:stats
def eval1_ty = eval1
//│ ('a -> int) -> 'b -> int
//│   where
//│     'b <: Add[?] & {lhs: 'b, rhs: 'b} | Lit | 'a & ~add & ~lit
//│   <:  eval1_ty:
//│ ('a -> int) -> E1['a] -> int
//│         = [Function: eval1]
//│ constrain calls  : 85
//│ annoying  calls  : 38
//│ subtyping calls  : 216


:stats
rec def pretty1 k e = case e of {
  | Lit -> intToString e.val
  | Add -> concat (pretty1 k e.lhs) (pretty1 k e.rhs)
  | _ -> k e
  }
//│ pretty1: ('a -> string) -> 'b -> string
//│   where
//│     'b <: Add[?] & {lhs: 'b, rhs: 'b} | Lit | 'a & ~add & ~lit
//│        = [Function: pretty1]
//│ constrain calls  : 91
//│ annoying  calls  : 0
//│ subtyping calls  : 91


:stats
rec def prettier1 k ev e = case e of {
  | Lit -> intToString e.val
  | Add ->
      if ev e.lhs == 0 then prettier1 k ev e.rhs
      else if ev e.rhs == 0 then prettier1 k ev e.lhs
      else concat (prettier1 k ev e.lhs) (prettier1 k ev e.rhs)
  | _ -> k e
  }
//│ prettier1: ('a -> string) -> ('rhs -> int & 'lhs -> int) -> 'b -> string
//│   where
//│     'b <: Add[?] & {lhs: 'lhs & 'b, rhs: 'rhs & 'b} | Lit | 'a & ~add & ~lit
//│          = [Function: prettier1]
//│ constrain calls  : 300
//│ annoying  calls  : 0
//│ subtyping calls  : 115

:stats
rec def prettier11 k ev e = case e of {
  | Lit -> intToString e.val
  | Add ->
      let tmp = pretty1 k e.lhs
      in if ev e.rhs == 0 then tmp else concat tmp (prettier11 k ev e.rhs)
  | _ -> k e
  }
//│ prettier11: ('a -> string & 'b -> string) -> ('rhs -> int) -> 'c -> string
//│   where
//│     'c <: Add[?] & {lhs: 'd, rhs: 'rhs & 'c} | Lit | 'a & ~add & ~lit
//│     'd <: Add[?] & {lhs: 'd, rhs: 'd} | Lit | 'b & ~add & ~lit
//│           = [Function: prettier11]
//│ constrain calls  : 198
//│ annoying  calls  : 0
//│ subtyping calls  : 205

// Doesn't make much sense, but generates very ugly type unless aggressively simplified:
:stats
rec def prettier12 k ev e = case e of {
  | Lit -> intToString e.val
  | Add ->
      let tmp = pretty1 k e.lhs
      in if ev e == 0 then tmp else concat tmp (pretty1 k e.rhs)
  | _ -> k e
  }
//│ prettier12: ('a -> string & 'b -> 'c & 'd -> string) -> ('e -> int) -> (Add[?] & {lhs: 'f, rhs: 'g} & 'e | Lit | 'b & ~add & ~lit) -> (string | 'c)
//│   where
//│     'g <: Add[?] & {lhs: 'g, rhs: 'g} | Lit | 'd & ~add & ~lit
//│     'f <: Add[?] & {lhs: 'f, rhs: 'f} | Lit | 'a & ~add & ~lit
//│           = [Function: prettier12]
//│ constrain calls  : 169
//│ annoying  calls  : 0
//│ subtyping calls  : 281


:stats
e1 = Add{lhs = Lit {val = 1}; rhs = Add{lhs = Lit {val = 2}; rhs = Lit {val = 3}}}
eval1 done e1
pretty1 done e1
prettier1 done (eval1 done) e1
prettier11 done (eval1 done) e1
prettier12 done (eval1 done) e1
//│ e1: Add[Add[Lit & {val: 2 | 3}] & {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}} | Lit & {val: 1}] with {lhs: Lit & {val: 1}, rhs: Add[Lit & {val: 2 | 3}] & {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}}}
//│   = Add {
//│       lhs: Lit { val: 1 },
//│       rhs: Add { lhs: Lit { val: 2 }, rhs: Lit { val: 3 } }
//│     }
//│ res: int
//│    = 6
//│ res: string
//│    = '123'
//│ res: string
//│    = '123'
//│ res: string
//│    = '123'
//│ res: string
//│    = '123'
//│ constrain calls  : 1422
//│ annoying  calls  : 490
//│ subtyping calls  : 2007


e1 = add (lit 1) (add (lit 2) (lit 3))
eval1 done e1
pretty1 done e1
prettier1 done (eval1 done) e1
prettier11 done (eval1 done) e1
prettier12 done (eval1 done) e1
//│ e1: Add[Add[Lit & {val: 2 | 3}] & {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}} | Lit & {val: 1}] with {lhs: Lit & {val: 1}, rhs: Add[Lit & {val: 2 | 3}] & {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}}}
//│   = Add {
//│       lhs: Lit { val: 1 },
//│       rhs: Add { lhs: Lit { val: 2 }, rhs: Lit { val: 3 } }
//│     }
//│ res: int
//│    = 6
//│ res: string
//│    = '123'
//│ res: string
//│    = '123'
//│ res: string
//│    = '123'
//│ res: string
//│    = '123'



class Nega[E]: { arg: E }
def nega arg = Nega { arg }
//│ Defined class Nega[+E]
//│ nega: 'arg -> Nega['arg]
//│     = [Function: nega]



rec def eval2 k = eval1 (fun x -> case x of {
  | Nega -> 0 - (eval2 k x.arg)
  | _ -> k x
  })
//│ eval2: ('a -> int) -> 'b -> int
//│   where
//│     'b <: Add[?] & {lhs: 'b, rhs: 'b} | Lit | Nega[?] & {arg: 'b} | 'a & ~add & ~lit & ~nega
//│      = [Function: eval2]


:stats
rec def prettier2 k ev = prettier1 (fun x -> case x of {
  | Nega -> concat "-" (prettier2 k ev x.arg)
  | _ -> k x
  }) ev
//│ prettier2: ('a -> string) -> ('rhs -> int & 'lhs -> int) -> 'b -> string
//│   where
//│     'b <: Add[?] & {lhs: 'lhs & 'b, rhs: 'rhs & 'b} | Lit | Nega[?] & {arg: 'b} | 'a & ~add & ~lit & ~nega
//│          = [Function: prettier2]
//│ constrain calls  : 120
//│ annoying  calls  : 0
//│ subtyping calls  : 203

:stats
rec def prettier22 k ev = prettier12 (fun x -> case x of {
  | Nega -> concat "-" (prettier22 k ev x.arg)
  | _ -> k x
  }) ev
//│ prettier22: ('a -> string) -> ('b -> int) -> 'c -> string
//│   where
//│     'b <: {lhs: 'd, rhs: 'd}
//│     'd <: Add[?] & {lhs: 'd, rhs: 'd} | Lit | 'e & ~add & ~lit
//│     'e <: Nega[?] & {arg: 'c} | 'a & ~nega
//│     'c <: Add[?] & 'b | Lit | 'e & ~add & ~lit
//│           = [Function: prettier22]
//│ constrain calls  : 179
//│ annoying  calls  : 0
//│ subtyping calls  : 317



:stats
eval2 done e1
//│ res: int
//│    = 6
//│ constrain calls  : 201
//│ annoying  calls  : 60
//│ subtyping calls  : 202

e2 = add (lit 1) (nega e1)
//│ e2: Add[Lit & {val: 1} | Nega[Add[Add[Lit & {val: 2 | 3}] & {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}} | Lit & {val: 1}] with {lhs: Lit & {val: 1}, rhs: Add[Lit & {val: 2 | 3}] & {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}}}]] with {lhs: Lit & {val: 1}, rhs: Nega[Add[Add[Lit & {val: 2 | 3}] & {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}} | Lit & {val: 1}] with {lhs: Lit & {val: 1}, rhs: Add[Lit & {val: 2 | 3}] & {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}}}]}
//│   = Add {
//│       lhs: Lit { val: 1 },
//│       rhs: Nega { arg: Add { lhs: [Lit], rhs: [Add] } }
//│     }

// :e // FIXME (reproduced in `ADRsRepro.mls`)
:stats
eval2 done e2
//│ res: int
//│    = -5
//│ constrain calls  : 286
//│ annoying  calls  : 103
//│ subtyping calls  : 324

d2 = nega (add (lit 1) (nega (lit 1)))
//│ d2: Nega[Add[Lit & {val: 1} | Nega[Lit & {val: 1}]] with {lhs: Lit & {val: 1}, rhs: Nega[Lit & {val: 1}]}]
//│   = Nega { arg: Add { lhs: Lit { val: 1 }, rhs: Nega { arg: [Lit] } } }

// :e // FIXME (reproduced in `ADRsRepro.mls`)
:stats
eval2 done d2
//│ res: int
//│    = 0
//│ constrain calls  : 182
//│ annoying  calls  : 71
//│ subtyping calls  : 180


prettier2 done
//│ res: ('rhs -> int & 'lhs -> int) -> 'a -> string
//│   where
//│     'a <: Add[?] & {lhs: 'lhs & 'a, rhs: 'rhs & 'a} | Lit | Nega[?] & {arg: 'a}
//│    = [Function (anonymous)]

prettier22 done
//│ res: ('a -> int) -> 'b -> string
//│   where
//│     'a <: {lhs: 'c, rhs: 'c}
//│     'c <: Add[?] & {lhs: 'c, rhs: 'c} | Lit | 'd & ~add & ~lit
//│     'd <: Nega[?] & {arg: 'b}
//│     'b <: Add[?] & 'a | Lit | 'd & ~add & ~lit
//│    = [Function (anonymous)]

:stats
prettier2 done (eval1 done)
//│ res: 'a -> string
//│   where
//│     'a <: Add[?] & {lhs: 'a & 'b, rhs: 'a & 'b} | Lit | Nega[?] & {arg: 'a}
//│     'b <: Add[?] & {lhs: 'b, rhs: 'b} | Lit
//│    = [Function (anonymous)]
//│ constrain calls  : 94
//│ annoying  calls  : 0
//│ subtyping calls  : 226

prettier22 done (eval1 done)
//│ res: 'a -> string
//│   where
//│     'a <: Add[?] & {lhs: 'b, rhs: 'b} & 'c | Lit | 'd & ~add & ~lit
//│     'c <: Add[?] & {lhs: 'c, rhs: 'c} | Lit
//│     'b <: Add[?] & {lhs: 'b, rhs: 'b} | Lit | 'd & ~add & ~lit
//│     'd <: Nega[?] & {arg: 'a}
//│    = [Function (anonymous)]

// :e // FIXME (reproduced in `ADRsRepro.mls`)
// TODO could probably merge `a` and `b` here!
:stats
prettier2 done (eval2 done)
//│ res: 'a -> string
//│   where
//│     'a <: Add[?] & {lhs: 'a & 'b, rhs: 'a & 'b} | Lit | Nega[?] & {arg: 'a}
//│     'b <: Add[?] & {lhs: 'b, rhs: 'b} | Lit | Nega[?] & {arg: 'b}
//│    = [Function (anonymous)]
//│ constrain calls  : 105
//│ annoying  calls  : 0
//│ subtyping calls  : 292

prettier2 done (eval2 done) e2
prettier2 done (eval2 done) d2
//│ res: string
//│    = '1-123'
//│ res: string
//│    = '-1-1'

:stats
prettier22 done (eval2 done)
prettier22 done (eval2 done) e2
prettier22 done (eval2 done) d2
//│ res: 'a -> string
//│   where
//│     'a <: Add[?] & {lhs: 'b, rhs: 'b} & 'c | Lit | 'd & ~add & ~lit
//│     'c <: Add[?] & {lhs: 'c, rhs: 'c} | Lit | Nega[?] & {arg: 'c}
//│     'b <: Add[?] & {lhs: 'b, rhs: 'b} | Lit | 'd & ~add & ~lit
//│     'd <: Nega[?] & {arg: 'a}
//│    = [Function (anonymous)]
//│ res: string
//│    = '1-123'
//│ res: string
//│    = '-1'
//│ constrain calls  : 1180
//│ annoying  calls  : 390
//│ subtyping calls  : 1794




// === === === ERROR CASES === === === //


:ShowRelativeLineNums


:e
eval1 done e2
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	eval1 done e2
//│ ║        	^^^^^^^^^^^^^
//│ ╟── application of type `Nega[?E] & {Nega#E = ?E, arg: ?arg}` does not match type `nothing`
//│ ║  l.372: 	def nega arg = Nega { arg }
//│ ║         	               ^^^^^^^^^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.4: 	def done x = case x of {}
//│ ║       	                  ^
//│ ╟── from field selection:
//│ ║  l.73: 	  | Add -> eval1 k e.lhs + eval1 k e.rhs
//│ ╙──      	                                   ^^^^^
//│ res: error | int
//│ Runtime error:
//│   Error: non-exhaustive case expression


:e
prettier2 done eval1 e1
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	prettier2 done eval1 e1
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ╟── function of type `?a -> (?b | ?c)` is not an instance of type `int`
//│ ║  l.71: 	rec def eval1 k e = case e of {
//│ ║        	                ^^^^^^^^^^^^^^^
//│ ║  l.72: 	  | Lit -> e.val
//│ ║        	^^^^^^^^^^^^^^^^
//│ ║  l.73: 	  | Add -> eval1 k e.lhs + eval1 k e.rhs
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.74: 	  | _ -> k e
//│ ║        	^^^^^^^^^^^^
//│ ║  l.75: 	  }
//│ ║        	^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.272: 	      else if ev e.rhs == 0 then prettier1 k ev e.lhs
//│ ╙──       	              ^^^^^^^^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	prettier2 done eval1 e1
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── application of type `Lit & {val: ?val}` is not a function
//│ ║  l.18: 	def lit val = Lit { val }
//│ ║        	              ^^^^^^^^^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.74: 	  | _ -> k e
//│ ║        	         ^^^
//│ ╟── from field selection:
//│ ║  l.272: 	      else if ev e.rhs == 0 then prettier1 k ev e.lhs
//│ ╙──       	                 ^^^^^
//│ res: error
//│    = '123'


:e
:stats
prettier2 done (eval1 done) e2
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	prettier2 done (eval1 done) e2
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── application of type `Nega[?E] & {Nega#E = ?E, arg: ?arg}` does not match type `nothing`
//│ ║  l.372: 	def nega arg = Nega { arg }
//│ ║         	               ^^^^^^^^^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.4: 	def done x = case x of {}
//│ ║       	                  ^
//│ ╟── from field selection:
//│ ║  l.272: 	      else if ev e.rhs == 0 then prettier1 k ev e.lhs
//│ ╙──       	                 ^^^^^
//│ res: error | string
//│ Runtime error:
//│   Error: non-exhaustive case expression
//│ constrain calls  : 681
//│ annoying  calls  : 228
//│ subtyping calls  : 3802

:e
:stats
prettier2 done eval2
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	prettier2 done eval2
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ╟── function of type `?a -> ?b` is not an instance of type `int`
//│ ║  l.71: 	rec def eval1 k e = case e of {
//│ ║        	                ^^^^^^^^^^^^^^^
//│ ║  l.72: 	  | Lit -> e.val
//│ ║        	^^^^^^^^^^^^^^^^
//│ ║  l.73: 	  | Add -> eval1 k e.lhs + eval1 k e.rhs
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.74: 	  | _ -> k e
//│ ║        	^^^^^^^^^^^^
//│ ║  l.75: 	  }
//│ ║        	^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.272: 	      else if ev e.rhs == 0 then prettier1 k ev e.lhs
//│ ╙──       	              ^^^^^^^^
//│ res: 'a -> string | error
//│   where
//│     'a <: Add[?] & {lhs: nothing -> int & 'a, rhs: nothing -> int & 'a} | Lit | Nega[?] & {arg: 'a}
//│    = [Function (anonymous)]
//│ constrain calls  : 77
//│ annoying  calls  : 0
//│ subtyping calls  : 239

:e
:stats
prettier2 done eval2 e1
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	prettier2 done eval2 e1
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ╟── function of type `?a -> ?b` is not an instance of type `int`
//│ ║  l.71: 	rec def eval1 k e = case e of {
//│ ║        	                ^^^^^^^^^^^^^^^
//│ ║  l.72: 	  | Lit -> e.val
//│ ║        	^^^^^^^^^^^^^^^^
//│ ║  l.73: 	  | Add -> eval1 k e.lhs + eval1 k e.rhs
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.74: 	  | _ -> k e
//│ ║        	^^^^^^^^^^^^
//│ ║  l.75: 	  }
//│ ║        	^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.272: 	      else if ev e.rhs == 0 then prettier1 k ev e.lhs
//│ ╙──       	              ^^^^^^^^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	prettier2 done eval2 e1
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── application of type `Lit & {val: ?val}` is not a function
//│ ║  l.18: 	def lit val = Lit { val }
//│ ║        	              ^^^^^^^^^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.381: 	  | _ -> k x
//│ ║         	         ^^^
//│ ╟── from field selection:
//│ ║  l.272: 	      else if ev e.rhs == 0 then prettier1 k ev e.lhs
//│ ╙──       	                 ^^^^^
//│ res: error
//│    = '123'
//│ constrain calls  : 384
//│ annoying  calls  : 108
//│ subtyping calls  : 1929

:e
:stats
prettier2 done eval2 e2
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	prettier2 done eval2 e2
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ╟── function of type `?a -> ?b` is not an instance of type `int`
//│ ║  l.71: 	rec def eval1 k e = case e of {
//│ ║        	                ^^^^^^^^^^^^^^^
//│ ║  l.72: 	  | Lit -> e.val
//│ ║        	^^^^^^^^^^^^^^^^
//│ ║  l.73: 	  | Add -> eval1 k e.lhs + eval1 k e.rhs
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.74: 	  | _ -> k e
//│ ║        	^^^^^^^^^^^^
//│ ║  l.75: 	  }
//│ ║        	^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.272: 	      else if ev e.rhs == 0 then prettier1 k ev e.lhs
//│ ╙──       	              ^^^^^^^^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	prettier2 done eval2 e2
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── application of type `Lit & {val: ?val}` is not a function
//│ ║  l.18: 	def lit val = Lit { val }
//│ ║        	              ^^^^^^^^^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.381: 	  | _ -> k x
//│ ║         	         ^^^
//│ ╟── from field selection:
//│ ║  l.272: 	      else if ev e.rhs == 0 then prettier1 k ev e.lhs
//│ ╙──       	                 ^^^^^
//│ res: error
//│    = '1-123'
//│ constrain calls  : 437
//│ annoying  calls  : 131
//│ subtyping calls  : 2339

:e
:stats
prettier2 done eval2 d2
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	prettier2 done eval2 d2
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ╟── function of type `?a -> ?b` is not an instance of type `int`
//│ ║  l.71: 	rec def eval1 k e = case e of {
//│ ║        	                ^^^^^^^^^^^^^^^
//│ ║  l.72: 	  | Lit -> e.val
//│ ║        	^^^^^^^^^^^^^^^^
//│ ║  l.73: 	  | Add -> eval1 k e.lhs + eval1 k e.rhs
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.74: 	  | _ -> k e
//│ ║        	^^^^^^^^^^^^
//│ ║  l.75: 	  }
//│ ║        	^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.272: 	      else if ev e.rhs == 0 then prettier1 k ev e.lhs
//│ ╙──       	              ^^^^^^^^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	prettier2 done eval2 d2
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── application of type `Nega[?E] & {Nega#E = ?E, arg: ?arg}` is not a function
//│ ║  l.372: 	def nega arg = Nega { arg }
//│ ║         	               ^^^^^^^^^^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.381: 	  | _ -> k x
//│ ║         	         ^^^
//│ ╟── from field selection:
//│ ║  l.272: 	      else if ev e.rhs == 0 then prettier1 k ev e.lhs
//│ ╙──       	                 ^^^^^
//│ res: error | string
//│    = '-1-1'
//│ constrain calls  : 309
//│ annoying  calls  : 95
//│ subtyping calls  : 1614

:e
:stats
prettier2 done eval1 e2
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	prettier2 done eval1 e2
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ╟── function of type `?a -> (?b | ?c)` is not an instance of type `int`
//│ ║  l.71: 	rec def eval1 k e = case e of {
//│ ║        	                ^^^^^^^^^^^^^^^
//│ ║  l.72: 	  | Lit -> e.val
//│ ║        	^^^^^^^^^^^^^^^^
//│ ║  l.73: 	  | Add -> eval1 k e.lhs + eval1 k e.rhs
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.74: 	  | _ -> k e
//│ ║        	^^^^^^^^^^^^
//│ ║  l.75: 	  }
//│ ║        	^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.272: 	      else if ev e.rhs == 0 then prettier1 k ev e.lhs
//│ ╙──       	              ^^^^^^^^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	prettier2 done eval1 e2
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── application of type `Lit & {val: ?val}` is not a function
//│ ║  l.18: 	def lit val = Lit { val }
//│ ║        	              ^^^^^^^^^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.74: 	  | _ -> k e
//│ ║        	         ^^^
//│ ╟── from field selection:
//│ ║  l.272: 	      else if ev e.rhs == 0 then prettier1 k ev e.lhs
//│ ╙──       	                 ^^^^^
//│ res: error
//│    = '1-123'
//│ constrain calls  : 431
//│ annoying  calls  : 131
//│ subtyping calls  : 2309

