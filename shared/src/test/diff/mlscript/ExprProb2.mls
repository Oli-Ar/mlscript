
// --- Lit, Add ---


class Lit: { val: int }
class Add[E]: { lhs: E; rhs: E }
def lit val = Lit { val }
def add lhs rhs = Add { lhs; rhs }
//│ Defined class Lit
//│ Defined class Add[+E]
//│ lit: (int & 'val) -> (Lit with {val: 'val})
//│    = [Function: lit]
//│ add: ('lhs & 'E) -> ('E & 'rhs) -> (Add['E] with {lhs: 'lhs, rhs: 'rhs})
//│    = [Function: add]


:stats
def eval1 eval1 e = case e of {
  | Lit -> e.val
  | Add -> eval1 eval1 e.lhs + eval1 eval1 e.rhs
  }
//│ eval1: ('a -> 'rhs -> int & 'a -> 'lhs -> int & 'a) -> ((Add[?] with {lhs: 'lhs, rhs: 'rhs}) | (Lit with {val: 'val})) -> (int | 'val)
//│      = [Function: eval1]
//│ constrain calls  : 36
//│ annoying  calls  : 0
//│ subtyping calls  : 55

:stats
def eval1f eval1 e = case e of {
  | Lit -> e.val
  | Add -> eval1 e.lhs + eval1 e.rhs
  }
//│ eval1f: ('rhs -> int & 'lhs -> int) -> ((Add[?] with {lhs: 'lhs, rhs: 'rhs}) | (Lit with {val: 'val})) -> (int | 'val)
//│       = [Function: eval1f]
//│ constrain calls  : 32
//│ annoying  calls  : 0
//│ subtyping calls  : 52


e1 = add (lit 1) (add (lit 2) (lit 3))
//│ e1: Add[Add[Lit & {val: 2 | 3}] & {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}} | Lit & {val: 1}] with {lhs: Lit & {val: 1}, rhs: Add[Lit & {val: 2 | 3}] & {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}}}
//│   = Add {
//│       lhs: Lit { val: 1 },
//│       rhs: Add { lhs: Lit { val: 2 }, rhs: Lit { val: 3 } }
//│     }


:e
eval1 eval1 e1
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?val, ?lhs, ?rhs, ?a, ?b, ?c, ?d, ?e, ?f, ?g, ?h, ?i. ?a -> ?f -> (?val | ?i) <: (forall ?val, ?lhs, ?rhs, ?j, ?k, ?l, ?m, ?n, ?o, ?p, ?q, ?r. ?j -> ?o -> (?val | ?r)) -> ?s` exceeded recursion depth limit (400)
//│ ║  l.49: 	eval1 eval1 e1
//│ ║        	^^^^^^^^^^^
//│ ╟── while constraining:  (α296 -> (α303 -> (val305 | α307)))  <!<  ((α284,) -> α285)
//│ ╟── while constraining:  ‹∀ 1. (α53'' -> (α54'' -> (val56'' | α65'')))›  <!<  ((α284,) -> α285)
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α53'' -> (α54'' -> (val56'' | α65'')))››  <!<  ((α284,) -> α285)
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α53'' -> (α54'' -> (val56'' | α65'')))››  <!<  α284
//│ ╟── while constraining:  α272  <!<  α284
//│ ╟── while constraining:  (α272,)  <!<  (α284,)
//│ ╟── while constraining:  (α284 -> (α291 -> (val293 | α295)))  <!<  ((α272,) -> α273)
//│ ╟── while constraining:  ‹∀ 1. (α53'' -> (α54'' -> (val56'' | α65'')))›  <!<  ((α272,) -> α273)
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α53'' -> (α54'' -> (val56'' | α65'')))››  <!<  ((α272,) -> α273)
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α53'' -> (α54'' -> (val56'' | α65'')))››  <!<  α272
//│ ╟── while constraining:  α260  <!<  α272
//│ ╟── while constraining:  (α260,)  <!<  (α272,)
//│ ╟── while constraining:  (α272 -> (α279 -> (val281 | α283)))  <!<  ((α260,) -> α261)
//│ ╟── while constraining:  ‹∀ 1. (α53'' -> (α54'' -> (val56'' | α65'')))›  <!<  ((α260,) -> α261)
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α53'' -> (α54'' -> (val56'' | α65'')))››  <!<  ((α260,) -> α261)
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  (α164,)  <!<  (α176,)
//│ ╟── while constraining:  (α176 -> (α183 -> (val185 | α187)))  <!<  ((α164,) -> α165)
//│ ╟── while constraining:  ‹∀ 1. (α53'' -> (α54'' -> (val56'' | α65'')))›  <!<  ((α164,) -> α165)
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α53'' -> (α54'' -> (val56'' | α65'')))››  <!<  ((α164,) -> α165)
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α53'' -> (α54'' -> (val56'' | α65'')))››  <!<  α164
//│ ╟── while constraining:  α152  <!<  α164
//│ ╟── while constraining:  (α152,)  <!<  (α164,)
//│ ╟── while constraining:  (α164 -> (α171 -> (val173 | α175)))  <!<  ((α152,) -> α153)
//│ ╟── while constraining:  ‹∀ 1. (α53'' -> (α54'' -> (val56'' | α65'')))›  <!<  ((α152,) -> α153)
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α53'' -> (α54'' -> (val56'' | α65'')))››  <!<  ((α152,) -> α153)
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α53'' -> (α54'' -> (val56'' | α65'')))››  <!<  α152
//│ ╟── while constraining:  (‹∀ 0. ‹∀ 1. (α53'' -> (α54'' -> (val56'' | α65'')))››,)  <!<  (α152,)
//│ ╟── while constraining:  (α152 -> (α159 -> (val161 | α163)))  <!<  ((‹∀ 0. ‹∀ 1. (α53'' -> (α54'' -> (val56'' | α65'')))››,) -> α151)
//│ ╟── while constraining:  ‹∀ 1. (α53'' -> (α54'' -> (val56'' | α65'')))›  <!<  ((‹∀ 0. ‹∀ 1. (α53'' -> (α54'' -> (val56'' | α65'')))››,) -> α151)
//│ ╙── while constraining:  ‹∀ 0. ‹∀ 1. (α53'' -> (α54'' -> (val56'' | α65'')))››  <!<  ((‹∀ 0. ‹∀ 1. (α53'' -> (α54'' -> (val56'' | α65'')))››,) -> α151)
//│ res: error
//│    = 6

:e
def eval1_fixed_1 = eval1 eval1
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?val, ?lhs, ?rhs, ?a, ?b, ?c, ?d, ?e, ?f, ?g, ?h, ?i. ?a -> ?f -> (?val | ?i) <: (forall ?val, ?lhs, ?rhs, ?j, ?k, ?l, ?m, ?n, ?o, ?p, ?q, ?r. ?j -> ?o -> (?val | ?r)) -> ?s` exceeded recursion depth limit (400)
//│ ║  l.89: 	def eval1_fixed_1 = eval1 eval1
//│ ║        	                    ^^^^^^^^^^^
//│ ╟── while constraining:  (α473' -> (α480' -> (val482' | α484')))  <!<  ((α461',) -> α462')
//│ ╟── while constraining:  ‹∀ 1. (α53'' -> (α54'' -> (val56'' | α65'')))›  <!<  ((α461',) -> α462')
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α53'' -> (α54'' -> (val56'' | α65'')))››  <!<  ((α461',) -> α462')
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α53'' -> (α54'' -> (val56'' | α65'')))››  <!<  α461'
//│ ╟── while constraining:  α449'  <!<  α461'
//│ ╟── while constraining:  (α449',)  <!<  (α461',)
//│ ╟── while constraining:  (α461' -> (α468' -> (val470' | α472')))  <!<  ((α449',) -> α450')
//│ ╟── while constraining:  ‹∀ 1. (α53'' -> (α54'' -> (val56'' | α65'')))›  <!<  ((α449',) -> α450')
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α53'' -> (α54'' -> (val56'' | α65'')))››  <!<  ((α449',) -> α450')
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α53'' -> (α54'' -> (val56'' | α65'')))››  <!<  α449'
//│ ╟── while constraining:  α437'  <!<  α449'
//│ ╟── while constraining:  (α437',)  <!<  (α449',)
//│ ╟── while constraining:  (α449' -> (α456' -> (val458' | α460')))  <!<  ((α437',) -> α438')
//│ ╟── while constraining:  ‹∀ 1. (α53'' -> (α54'' -> (val56'' | α65'')))›  <!<  ((α437',) -> α438')
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α53'' -> (α54'' -> (val56'' | α65'')))››  <!<  ((α437',) -> α438')
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  (α341',)  <!<  (α353',)
//│ ╟── while constraining:  (α353' -> (α360' -> (val362' | α364')))  <!<  ((α341',) -> α342')
//│ ╟── while constraining:  ‹∀ 1. (α53'' -> (α54'' -> (val56'' | α65'')))›  <!<  ((α341',) -> α342')
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α53'' -> (α54'' -> (val56'' | α65'')))››  <!<  ((α341',) -> α342')
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α53'' -> (α54'' -> (val56'' | α65'')))››  <!<  α341'
//│ ╟── while constraining:  α329'  <!<  α341'
//│ ╟── while constraining:  (α329',)  <!<  (α341',)
//│ ╟── while constraining:  (α341' -> (α348' -> (val350' | α352')))  <!<  ((α329',) -> α330')
//│ ╟── while constraining:  ‹∀ 1. (α53'' -> (α54'' -> (val56'' | α65'')))›  <!<  ((α329',) -> α330')
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α53'' -> (α54'' -> (val56'' | α65'')))››  <!<  ((α329',) -> α330')
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α53'' -> (α54'' -> (val56'' | α65'')))››  <!<  α329'
//│ ╟── while constraining:  (‹∀ 0. ‹∀ 1. (α53'' -> (α54'' -> (val56'' | α65'')))››,)  <!<  (α329',)
//│ ╟── while constraining:  (α329' -> (α336' -> (val338' | α340')))  <!<  ((‹∀ 0. ‹∀ 1. (α53'' -> (α54'' -> (val56'' | α65'')))››,) -> α328')
//│ ╟── while constraining:  ‹∀ 1. (α53'' -> (α54'' -> (val56'' | α65'')))›  <!<  ((‹∀ 0. ‹∀ 1. (α53'' -> (α54'' -> (val56'' | α65'')))››,) -> α328')
//│ ╙── while constraining:  ‹∀ 0. ‹∀ 1. (α53'' -> (α54'' -> (val56'' | α65'')))››  <!<  ((‹∀ 0. ‹∀ 1. (α53'' -> (α54'' -> (val56'' | α65'')))››,) -> α328')
//│ eval1_fixed_1: error
//│              = [Function (anonymous)]

eval1_fixed_1 e1
//│ res: error
//│    = 6


rec def eval1_fixed_2 = eval1f (fun x -> eval1f eval1_fixed_2 x)
//│ eval1_fixed_2: 'a -> int
//│   where
//│     'a <: Add[?] & {lhs: 'a, rhs: 'a} | Lit
//│              = [Function (anonymous)]

eval1_fixed_2 e1
//│ res: int
//│    = 6


:e
// Tying the know without a recursive def:
def eval1_fixed_3 =
  let fixed fixed = eval1f (fun x -> eval1f (fixed fixed) x)
  in fixed fixed
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?val, ?rhs, ?lhs, ?rhs0, ?lhs0, ?a, ?b, ?c, ?d, ?e, ?f, ?g, ?h, ?i, ?j, ?k, ?l, ?m, ?rhs1, ?n, ?o, ?p, ?val0, ?q, ?lhs1, ?r, ?s, ?t, ?val1, ?u, ?v. ?a -> ?j <: (forall ?val, ?rhs, ?lhs, ?rhs0, ?lhs0, ?w, ?x, ?y, ?z, ?a1, ?b1, ?c1, ?d1, ?e1, ?f1, ?g1, ?h1, ?i1, ?rhs2, ?j1, ?k1, ?l1, ?val2, ?m1, ?lhs2, ?n1, ?o1, ?p1, ?val3, ?q1, ?r1. ?w -> ?f1) -> ?s1` exceeded recursion depth limit (400)
//│ ║  l.148: 	  in fixed fixed
//│ ║         	     ^^^^^^^^^^^
//│ ╟── while constraining:  ‹∀ 1. ‹∀ 2. (α584''' -> α599''')››  <!<  α1009'
//│ ╟── while constraining:  α978'  <!<  α1009'
//│ ╟── while constraining:  (α978',)  <!<  (α1009',)
//│ ╟── while constraining:  (α1009' -> α1022')  <!<  ((α978',) -> α979')
//│ ╟── while constraining:  ‹∀ 2. (α584''' -> α599''')›  <!<  ((α978',) -> α979')
//│ ╟── while constraining:  ‹∀ 1. ‹∀ 2. (α584''' -> α599''')››  <!<  ((α978',) -> α979')
//│ ╟── while constraining:  ‹∀ 1. ‹∀ 2. (α584''' -> α599''')››  <!<  α978'
//│ ╟── while constraining:  α947'  <!<  α978'
//│ ╟── while constraining:  (α947',)  <!<  (α978',)
//│ ╟── while constraining:  (α978' -> α991')  <!<  ((α947',) -> α948')
//│ ╟── while constraining:  ‹∀ 2. (α584''' -> α599''')›  <!<  ((α947',) -> α948')
//│ ╟── while constraining:  ‹∀ 1. ‹∀ 2. (α584''' -> α599''')››  <!<  ((α947',) -> α948')
//│ ╟── while constraining:  ‹∀ 1. ‹∀ 2. (α584''' -> α599''')››  <!<  α947'
//│ ╟── while constraining:  α916'  <!<  α947'
//│ ╟── while constraining:  (α916',)  <!<  (α947',)
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  (α668',)  <!<  (α699',)
//│ ╟── while constraining:  (α699' -> α712')  <!<  ((α668',) -> α669')
//│ ╟── while constraining:  ‹∀ 2. (α584''' -> α599''')›  <!<  ((α668',) -> α669')
//│ ╟── while constraining:  ‹∀ 1. ‹∀ 2. (α584''' -> α599''')››  <!<  ((α668',) -> α669')
//│ ╟── while constraining:  ‹∀ 1. ‹∀ 2. (α584''' -> α599''')››  <!<  α668'
//│ ╟── while constraining:  α637'  <!<  α668'
//│ ╟── while constraining:  (α637',)  <!<  (α668',)
//│ ╟── while constraining:  (α668' -> α681')  <!<  ((α637',) -> α638')
//│ ╟── while constraining:  ‹∀ 2. (α584''' -> α599''')›  <!<  ((α637',) -> α638')
//│ ╟── while constraining:  ‹∀ 1. ‹∀ 2. (α584''' -> α599''')››  <!<  ((α637',) -> α638')
//│ ╟── while constraining:  ‹∀ 1. ‹∀ 2. (α584''' -> α599''')››  <!<  α637'
//│ ╟── while constraining:  (‹∀ 1. ‹∀ 2. (α584''' -> α599''')››,)  <!<  (α637',)
//│ ╟── while constraining:  (α637' -> α650')  <!<  ((‹∀ 1. ‹∀ 2. (α584''' -> α599''')››,) -> α636')
//│ ╟── while constraining:  ‹∀ 2. (α584''' -> α599''')›  <!<  ((‹∀ 1. ‹∀ 2. (α584''' -> α599''')››,) -> α636')
//│ ╙── while constraining:  ‹∀ 1. ‹∀ 2. (α584''' -> α599''')››  <!<  ((‹∀ 1. ‹∀ 2. (α584''' -> α599''')››,) -> α636')
//│ eval1_fixed_3: error
//│              = [Function (anonymous)]

eval1_fixed_3 e1
//│ res: error
//│    = 6



// --- Nega ---


class Nega[E]: { arg: E }
def nega arg = Nega { arg }
//│ Defined class Nega[+E]
//│ nega: 'arg -> Nega['arg]
//│     = [Function: nega]


def eval2 eval2 e = case e of {
  | Nega -> 0 - (eval2 eval2 e.arg)
  | _ -> eval1 eval2 e
  }
//│ eval2: ('a -> 'arg -> int & 'a -> 'rhs -> int & 'a -> 'lhs -> int & 'a) -> ((Add[?] with {lhs: 'lhs, rhs: 'rhs}) | (Lit with {val: 'val}) | (Nega[?] with {arg: 'arg})) -> (int | 'val)
//│      = [Function: eval2]

def eval2f eval2 e = case e of {
  | Nega -> 0 - (eval2 e.arg)
  | _ -> eval1f eval2 e
  }
//│ eval2f: ('arg -> int & 'rhs -> int & 'lhs -> int) -> ((Add[?] with {lhs: 'lhs, rhs: 'rhs}) | (Lit with {val: 'val}) | (Nega[?] with {arg: 'arg})) -> (int | 'val)
//│       = [Function: eval2f]


e2 = add (lit 1) (nega e1)
//│ e2: Add[Lit & {val: 1} | Nega[Add[Add[Lit & {val: 2 | 3}] & {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}} | Lit & {val: 1}] with {lhs: Lit & {val: 1}, rhs: Add[Lit & {val: 2 | 3}] & {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}}}]] with {lhs: Lit & {val: 1}, rhs: Nega[Add[Add[Lit & {val: 2 | 3}] & {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}} | Lit & {val: 1}] with {lhs: Lit & {val: 1}, rhs: Add[Lit & {val: 2 | 3}] & {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}}}]}
//│   = Add {
//│       lhs: Lit { val: 1 },
//│       rhs: Nega { arg: Add { lhs: [Lit], rhs: [Add] } }
//│     }


:e
def eval2_fixed_1 = eval2 eval2
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?arg, ?rhs, ?lhs, ?val, ?a, ?b, ?c, ?d, ?e, ?f, ?g, ?h, ?i, ?j, ?k, ?l, ?m, ?n, ?o, ?p, ?q. ?a -> ?i -> (?o | ?p) <: (forall ?arg, ?rhs, ?lhs, ?val, ?r, ?s, ?t, ?u, ?v, ?w, ?x, ?y, ?z, ?a1, ?b1, ?c1, ?d1, ?e1, ?f1, ?g1, ?h1. ?r -> ?z -> (?f1 | ?g1)) -> ?i1` exceeded recursion depth limit (400)
//│ ║  l.227: 	def eval2_fixed_1 = eval2 eval2
//│ ║         	                    ^^^^^^^^^^^
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α1109'' -> (α1110'' -> (α1116'' | α1131'')))››  <!<  α1412'
//│ ╟── while constraining:  α1392'  <!<  α1412'
//│ ╟── while constraining:  (α1392',)  <!<  (α1412',)
//│ ╟── while constraining:  (α1412' -> (α1423' -> (α1430' | α1431')))  <!<  ((α1392',) -> α1393')
//│ ╟── while constraining:  ‹∀ 1. (α1109'' -> (α1110'' -> (α1116'' | α1131'')))›  <!<  ((α1392',) -> α1393')
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α1109'' -> (α1110'' -> (α1116'' | α1131'')))››  <!<  ((α1392',) -> α1393')
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α1109'' -> (α1110'' -> (α1116'' | α1131'')))››  <!<  α1392'
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α1109'' -> (α1110'' -> (α1116'' | α1131'')))››  <!<  α1391'
//│ ╟── while constraining:  α1371'  <!<  α1391'
//│ ╟── while constraining:  (α1371',)  <!<  (α1391',)
//│ ╟── while constraining:  (α1391' -> (α1402' -> (α1409' | α1410')))  <!<  ((α1371',) -> α1372')
//│ ╟── while constraining:  ‹∀ 1. (α1109'' -> (α1110'' -> (α1116'' | α1131'')))›  <!<  ((α1371',) -> α1372')
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α1109'' -> (α1110'' -> (α1116'' | α1131'')))››  <!<  ((α1371',) -> α1372')
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α1109'' -> (α1110'' -> (α1116'' | α1131'')))››  <!<  α1371'
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α1109'' -> (α1110'' -> (α1116'' | α1131'')))››  <!<  α1370'
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  ‹∀ 1. (α1109'' -> (α1110'' -> (α1116'' | α1131'')))›  <!<  ((α1266',) -> α1267')
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α1109'' -> (α1110'' -> (α1116'' | α1131'')))››  <!<  ((α1266',) -> α1267')
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α1109'' -> (α1110'' -> (α1116'' | α1131'')))››  <!<  α1266'
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α1109'' -> (α1110'' -> (α1116'' | α1131'')))››  <!<  α1265'
//│ ╟── while constraining:  α1245'  <!<  α1265'
//│ ╟── while constraining:  (α1245',)  <!<  (α1265',)
//│ ╟── while constraining:  (α1265' -> (α1276' -> (α1283' | α1284')))  <!<  ((α1245',) -> α1246')
//│ ╟── while constraining:  ‹∀ 1. (α1109'' -> (α1110'' -> (α1116'' | α1131'')))›  <!<  ((α1245',) -> α1246')
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α1109'' -> (α1110'' -> (α1116'' | α1131'')))››  <!<  ((α1245',) -> α1246')
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α1109'' -> (α1110'' -> (α1116'' | α1131'')))››  <!<  α1245'
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α1109'' -> (α1110'' -> (α1116'' | α1131'')))››  <!<  α1244'
//│ ╟── while constraining:  (‹∀ 0. ‹∀ 1. (α1109'' -> (α1110'' -> (α1116'' | α1131'')))››,)  <!<  (α1244',)
//│ ╟── while constraining:  (α1244' -> (α1255' -> (α1262' | α1263')))  <!<  ((‹∀ 0. ‹∀ 1. (α1109'' -> (α1110'' -> (α1116'' | α1131'')))››,) -> α1243')
//│ ╟── while constraining:  ‹∀ 1. (α1109'' -> (α1110'' -> (α1116'' | α1131'')))›  <!<  ((‹∀ 0. ‹∀ 1. (α1109'' -> (α1110'' -> (α1116'' | α1131'')))››,) -> α1243')
//│ ╙── while constraining:  ‹∀ 0. ‹∀ 1. (α1109'' -> (α1110'' -> (α1116'' | α1131'')))››  <!<  ((‹∀ 0. ‹∀ 1. (α1109'' -> (α1110'' -> (α1116'' | α1131'')))››,) -> α1243')
//│ eval2_fixed_1: error
//│              = [Function (anonymous)]

eval2_fixed_1 e1
eval2_fixed_1 e2
//│ res: error
//│    = 6
//│ res: error
//│    = -5

// FIXME strange type
// :e
def fix f = let fixed = fun x -> f (fun v -> (x x) v) in fixed fixed
//│ fix: ((forall 'a, 'b, 'c. ('b -> 'c
//│   where
//│     'a <: 'a -> 'b -> 'c)) -> 'd) -> 'd
//│    = [Function: fix]

:e // FIXME?
def eval2_fixed_2 = fix eval2f
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a, ?b, ?c, ?d, ?e, ?f, ?g. ?f -> ?d <: (forall ?arg, ?rhs, ?lhs, ?val, ?h, ?i, ?j, ?k, ?l, ?m, ?n, ?o, ?p, ?q, ?r, ?s, ?t, ?u. ?h -> ?m -> (?s | ?t)) -> ?v` exceeded recursion depth limit (400)
//│ ║  l.282: 	def eval2_fixed_2 = fix eval2f
//│ ║         	                    ^^^^^^^^^^
//│ ╟── while constraining:  ‹∀ 4. {(α1506''''' -> α1507''''') where: α1504' <: ((α1504',) -> α1505''''')}›  <!<  α1807'
//│ ╟── while constraining:  ‹∀ 4. {(α1506''''' -> α1507''''') where: α1504' <: ((α1504',) -> α1505''''')}›  <!<  α1806'
//│ ╟── while constraining:  (‹∀ 4. {(α1506''''' -> α1507''''') where: α1504' <: ((α1504',) -> α1505''''')}›,)  <!<  (α1806',)
//│ ╟── while constraining:  (α1806' -> (α1814' -> (α1821' | α1822')))  <!<  ((‹∀ 4. {(α1506''''' -> α1507''''') where: α1504' <: ((α1504',) -> α1505''''')}›,) -> α1805')
//│ ╟── while constraining:  ‹∀ 1. (α1163'' -> (α1164'' -> (α1169'' | α1182'')))›  <!<  ((‹∀ 4. {(α1506''''' -> α1507''''') where: α1504' <: ((α1504',) -> α1505''''')}›,) -> α1805')
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α1163'' -> (α1164'' -> (α1169'' | α1182'')))››  <!<  ((‹∀ 4. {(α1506''''' -> α1507''''') where: α1504' <: ((α1504',) -> α1505''''')}›,) -> α1805')
//│ ╟── while constraining:  α1502'  <!<  ((‹∀ 4. {(α1506''''' -> α1507''''') where: α1504' <: ((α1504',) -> α1505''''')}›,) -> α1805')
//│ ╟── while constraining:  {(α1504' -> α1805') where: α1502' <: ((‹∀ 4. {(α1506''''' -> α1507''''') where: α1504' <: ((α1504',) -> α1505''''')}›,) -> α1805')}  <!<  ((α1504',) -> α1802')
//│ ╟── while constraining:  ‹∀ 3. {(α1504' -> α1508'''') where: α1502' <: ((‹∀ 4. {(α1506''''' -> α1507''''') where: α1504' <: ((α1504',) -> α1505''''')}›,) -> α1508'''')}›  <!<  ((α1504',) -> α1802')
//│ ╟── while constraining:  ‹∀ 2. ‹∀ 3. {(α1504' -> α1508'''') where: α1502' <: ((‹∀ 4. {(α1506''''' -> α1507''''') where: α1504' <: ((α1504',) -> α1505''''')}›,) -> α1508'''')}››  <!<  ((α1504',) -> α1802')
//│ ╟── while constraining:  α1504'  <!<  ((α1504',) -> α1802')
//│ ╟── while constraining:  {(α1803' -> α1804') where: α1504' <: ((α1504',) -> α1802')}  <!<  ((rhs1786',) -> α1787')
//│ ╟── while constraining:  ‹∀ 4. {(α1506''''' -> α1507''''') where: α1504' <: ((α1504',) -> α1505''''')}›  <!<  ((rhs1786',) -> α1787')
//│ ╟── while constraining:  ‹∀ 4. {(α1506''''' -> α1507''''') where: α1504' <: ((α1504',) -> α1505''''')}›  <!<  α1785'
//│ ╟── while constraining:  ‹∀ 4. {(α1506''''' -> α1507''''') where: α1504' <: ((α1504',) -> α1505''''')}›  <!<  α1784'
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  ‹∀ 2. ‹∀ 3. {(α1504' -> α1508'''') where: α1502' <: ((‹∀ 4. {(α1506''''' -> α1507''''') where: α1504' <: ((α1504',) -> α1505''''')}›,) -> α1508'''')}››  <!<  ((α1503',) -> α1532')
//│ ╟── while constraining:  α1503'  <!<  ((α1503',) -> α1532')
//│ ╟── while constraining:  {(α1533' -> α1534') where: α1503' <: ((α1503',) -> α1532')}  <!<  ((rhs1516',) -> α1517')
//│ ╟── while constraining:  ‹∀ 4. {(α1510''''' -> α1511''''') where: α1503' <: ((α1503',) -> α1509''''')}›  <!<  ((rhs1516',) -> α1517')
//│ ╟── while constraining:  ‹∀ 4. {(α1510''''' -> α1511''''') where: α1503' <: ((α1503',) -> α1509''''')}›  <!<  α1515'
//│ ╟── while constraining:  ‹∀ 4. {(α1510''''' -> α1511''''') where: α1503' <: ((α1503',) -> α1509''''')}›  <!<  α1514'
//│ ╟── while constraining:  (‹∀ 4. {(α1510''''' -> α1511''''') where: α1503' <: ((α1503',) -> α1509''''')}›,)  <!<  (α1514',)
//│ ╟── while constraining:  (α1514' -> (α1522' -> (α1529' | α1530')))  <!<  ((‹∀ 4. {(α1510''''' -> α1511''''') where: α1503' <: ((α1503',) -> α1509''''')}›,) -> α1512')
//│ ╟── while constraining:  ‹∀ 1. (α1163'' -> (α1164'' -> (α1169'' | α1182'')))›  <!<  ((‹∀ 4. {(α1510''''' -> α1511''''') where: α1503' <: ((α1503',) -> α1509''''')}›,) -> α1512')
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α1163'' -> (α1164'' -> (α1169'' | α1182'')))››  <!<  ((‹∀ 4. {(α1510''''' -> α1511''''') where: α1503' <: ((α1503',) -> α1509''''')}›,) -> α1512')
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α1163'' -> (α1164'' -> (α1169'' | α1182'')))››  <!<  α1502'
//│ ╟── while constraining:  (‹∀ 0. ‹∀ 1. (α1163'' -> (α1164'' -> (α1169'' | α1182'')))››,)  <!<  (α1502',)
//│ ╟── while constraining:  (α1502' -> α1513')  <!<  ((‹∀ 0. ‹∀ 1. (α1163'' -> (α1164'' -> (α1169'' | α1182'')))››,) -> α1501')
//│ ╟── while constraining:  ‹∀ 1. (α1474'' -> α1480'')›  <!<  ((‹∀ 0. ‹∀ 1. (α1163'' -> (α1164'' -> (α1169'' | α1182'')))››,) -> α1501')
//│ ╙── while constraining:  ‹∀ 0. ‹∀ 1. (α1474'' -> α1480'')››  <!<  ((‹∀ 0. ‹∀ 1. (α1163'' -> (α1164'' -> (α1169'' | α1182'')))››,) -> α1501')
//│ eval2_fixed_2: error
//│              = [Function (anonymous)]

eval2_fixed_2 e1
eval2_fixed_2 e2
//│ res: error
//│    = 6
//│ res: error
//│    = -5




// === === === ERROR CASES === === === //



// FIXME should be a code-gen error
:re
rec def eval1_fixed = eval1f (eval1f eval1_fixed)
//│ eval1_fixed: 'a -> int
//│   where
//│     'a <: Add[?] & {lhs: 'a, rhs: 'a} | Lit
//│ Runtime error:
//│   ReferenceError: eval1_fixed is not defined

rec def eval1_fixed() = eval1f (eval1f (eval1_fixed()))
//│ eval1_fixed: () -> 'a -> int
//│   where
//│     'a <: Add[?] & {lhs: 'a, rhs: 'a} | Lit
//│            = [Function: eval1_fixed1]

:re
eval1_fixed() e1
//│ res: int
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded



:ShowRelativeLineNums
:AllowTypeErrors



def eval1_fixed = eval1f (fun x -> eval1f eval1f x)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	def eval1_fixed = eval1f (fun x -> eval1f eval1f x)
//│ ║        	                                   ^^^^^^^^^^^^^
//│ ╟── function of type `?a -> (?val | ?b)` is not an instance of type `int`
//│ ║  l.29: 	def eval1f eval1 e = case e of {
//│ ║        	                 ^^^^^^^^^^^^^^^
//│ ║  l.30: 	  | Lit -> e.val
//│ ║        	^^^^^^^^^^^^^^^^
//│ ║  l.31: 	  | Add -> eval1 e.lhs + eval1 e.rhs
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.32: 	  }
//│ ║        	^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.31: 	  | Add -> eval1 e.lhs + eval1 e.rhs
//│ ╙──      	                         ^^^^^^^^^^^
//│ eval1_fixed: (Add[?] & {lhs: Add[?] & {lhs: nothing -> int, rhs: nothing -> int} | Lit, rhs: Add[?] & {lhs: nothing -> int, rhs: nothing -> int} | Lit} | (Lit with {val: 'val})) -> (int | 'val)

rec def eval1_fixed = eval1f (fun x -> eval1_fixed eval1_fixed x)
//│ ╔══[ERROR] Type mismatch in binding of application:
//│ ║  l.+1: 	rec def eval1_fixed = eval1f (fun x -> eval1_fixed eval1_fixed x)
//│ ║        	                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── function of type `?a -> (?val | ?b)` does not match type `Add[?] & ?c | Lit & ?d`
//│ ║  l.29: 	def eval1f eval1 e = case e of {
//│ ║        	                 ^^^^^^^^^^^^^^^
//│ ║  l.30: 	  | Lit -> e.val
//│ ║        	^^^^^^^^^^^^^^^^
//│ ║  l.31: 	  | Add -> eval1 e.lhs + eval1 e.rhs
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.32: 	  }
//│ ║        	^^^
//│ ╟── but it flows into application with expected type `Add[?] & ?e | Lit & ?f`
//│ ║  l.+1: 	rec def eval1_fixed = eval1f (fun x -> eval1_fixed eval1_fixed x)
//│ ║        	                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.29: 	def eval1f eval1 e = case e of {
//│ ╙──      	                          ^
//│ ╔══[ERROR] Type mismatch in binding of application:
//│ ║  l.+1: 	rec def eval1_fixed = eval1f (fun x -> eval1_fixed eval1_fixed x)
//│ ║        	                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── operator application of type `int` is not a function
//│ ║  l.31: 	  | Add -> eval1 e.lhs + eval1 e.rhs
//│ ║        	           ^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.+1: 	rec def eval1_fixed = eval1f (fun x -> eval1_fixed eval1_fixed x)
//│ ║        	                                       ^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from application:
//│ ║  l.+1: 	rec def eval1_fixed = eval1f (fun x -> eval1_fixed eval1_fixed x)
//│ ╙──      	                                       ^^^^^^^^^^^^^^^^^^^^^^^
//│ eval1_fixed: ((Add[?] with {lhs: 'a, rhs: 'a}) | (Lit with {val: 'a -> int & 'val})) -> (int | 'val)

:e
rec def eval1_fixed = eval1f eval1_fixed e1
//│ ╔══[ERROR] Type mismatch in binding of application:
//│ ║  l.+1: 	rec def eval1_fixed = eval1f eval1_fixed e1
//│ ║        	                      ^^^^^^^^^^^^^^^^^^^^^
//│ ╟── operator application of type `int` is not a function
//│ ║  l.31: 	  | Add -> eval1 e.lhs + eval1 e.rhs
//│ ║        	           ^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── but it flows into application with expected type `?rhs -> ?a`
//│ ║  l.+1: 	rec def eval1_fixed = eval1f eval1_fixed e1
//│ ║        	                      ^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.31: 	  | Add -> eval1 e.lhs + eval1 e.rhs
//│ ║        	                         ^^^^^^^^^^^
//│ ╟── from reference:
//│ ║  l.+1: 	rec def eval1_fixed = eval1f eval1_fixed e1
//│ ╙──      	                             ^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in binding of application:
//│ ║  l.+1: 	rec def eval1_fixed = eval1f eval1_fixed e1
//│ ║        	                      ^^^^^^^^^^^^^^^^^^^^^
//│ ╟── operator application of type `int` is not a function
//│ ║  l.31: 	  | Add -> eval1 e.lhs + eval1 e.rhs
//│ ║        	           ^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── but it flows into application with expected type `?lhs -> ?a`
//│ ║  l.+1: 	rec def eval1_fixed = eval1f eval1_fixed e1
//│ ║        	                      ^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.31: 	  | Add -> eval1 e.lhs + eval1 e.rhs
//│ ║        	           ^^^^^^^^^^^
//│ ╟── from reference:
//│ ║  l.+1: 	rec def eval1_fixed = eval1f eval1_fixed e1
//│ ╙──      	                             ^^^^^^^^^^^
//│ eval1_fixed: int


def eval2_broken eval2 e = case e of {
  | Nega -> e.arg
  | _ -> eval1 eval2 e
  }
//│ eval2_broken: ('a -> 'rhs -> int & 'a -> 'lhs -> int & 'a) -> ((Add[?] with {lhs: 'lhs, rhs: 'rhs}) | (Lit with {val: 'arg}) | (Nega[?] with {arg: 'arg})) -> ('arg | int)

:e
eval2_broken eval2_broken e2
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?arg, ?rhs, ?lhs, ?val, ?a, ?b, ?c, ?d, ?e, ?f, ?g, ?h, ?i, ?j, ?k, ?l, ?m, ?n. ?a -> ?g -> (?arg | ?m) <: (forall ?arg, ?rhs, ?lhs, ?val, ?o, ?p, ?q, ?r, ?s, ?t, ?u, ?v, ?w, ?x, ?y, ?z, ?a1, ?b1. ?o -> ?u -> (?arg | ?a1)) -> ?c1` exceeded recursion depth limit (400)
//│ ║  l.+1: 	eval2_broken eval2_broken e2
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α2185'' -> (α2186'' -> (arg2188'' | α2203'')))››  <!<  α2375
//│ ╟── while constraining:  α2358  <!<  α2375
//│ ╟── while constraining:  (α2358,)  <!<  (α2375,)
//│ ╟── while constraining:  (α2375 -> (α2383 -> (arg2385 | α2391)))  <!<  ((α2358,) -> α2359)
//│ ╟── while constraining:  ‹∀ 1. (α2185'' -> (α2186'' -> (arg2188'' | α2203'')))›  <!<  ((α2358,) -> α2359)
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α2185'' -> (α2186'' -> (arg2188'' | α2203'')))››  <!<  ((α2358,) -> α2359)
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α2185'' -> (α2186'' -> (arg2188'' | α2203'')))››  <!<  α2358
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α2185'' -> (α2186'' -> (arg2188'' | α2203'')))››  <!<  α2357
//│ ╟── while constraining:  α2340  <!<  α2357
//│ ╟── while constraining:  (α2340,)  <!<  (α2357,)
//│ ╟── while constraining:  (α2357 -> (α2365 -> (arg2367 | α2373)))  <!<  ((α2340,) -> α2341)
//│ ╟── while constraining:  ‹∀ 1. (α2185'' -> (α2186'' -> (arg2188'' | α2203'')))›  <!<  ((α2340,) -> α2341)
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α2185'' -> (α2186'' -> (arg2188'' | α2203'')))››  <!<  ((α2340,) -> α2341)
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α2185'' -> (α2186'' -> (arg2188'' | α2203'')))››  <!<  α2340
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α2185'' -> (α2186'' -> (arg2188'' | α2203'')))››  <!<  α2339
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  ‹∀ 1. (α2185'' -> (α2186'' -> (arg2188'' | α2203'')))›  <!<  ((α2250,) -> α2251)
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α2185'' -> (α2186'' -> (arg2188'' | α2203'')))››  <!<  ((α2250,) -> α2251)
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α2185'' -> (α2186'' -> (arg2188'' | α2203'')))››  <!<  α2250
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α2185'' -> (α2186'' -> (arg2188'' | α2203'')))››  <!<  α2249
//│ ╟── while constraining:  α2232  <!<  α2249
//│ ╟── while constraining:  (α2232,)  <!<  (α2249,)
//│ ╟── while constraining:  (α2249 -> (α2257 -> (arg2259 | α2265)))  <!<  ((α2232,) -> α2233)
//│ ╟── while constraining:  ‹∀ 1. (α2185'' -> (α2186'' -> (arg2188'' | α2203'')))›  <!<  ((α2232,) -> α2233)
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α2185'' -> (α2186'' -> (arg2188'' | α2203'')))››  <!<  ((α2232,) -> α2233)
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α2185'' -> (α2186'' -> (arg2188'' | α2203'')))››  <!<  α2232
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α2185'' -> (α2186'' -> (arg2188'' | α2203'')))››  <!<  α2231
//│ ╟── while constraining:  (‹∀ 0. ‹∀ 1. (α2185'' -> (α2186'' -> (arg2188'' | α2203'')))››,)  <!<  (α2231,)
//│ ╟── while constraining:  (α2231 -> (α2239 -> (arg2241 | α2247)))  <!<  ((‹∀ 0. ‹∀ 1. (α2185'' -> (α2186'' -> (arg2188'' | α2203'')))››,) -> α2230)
//│ ╟── while constraining:  ‹∀ 1. (α2185'' -> (α2186'' -> (arg2188'' | α2203'')))›  <!<  ((‹∀ 0. ‹∀ 1. (α2185'' -> (α2186'' -> (arg2188'' | α2203'')))››,) -> α2230)
//│ ╙── while constraining:  ‹∀ 0. ‹∀ 1. (α2185'' -> (α2186'' -> (arg2188'' | α2203'')))››  <!<  ((‹∀ 0. ‹∀ 1. (α2185'' -> (α2186'' -> (arg2188'' | α2203'')))››,) -> α2230)
//│ res: error


def eval2f_oops eval2 e = case e of {
  | Nega -> 0 - (eval2 e.arg)
  | _ -> eval1 eval2 e // should be: eval1f eval2 e
  }
//│ eval2f_oops: ('arg -> int & 'a -> 'rhs -> int & 'a -> 'lhs -> int & 'a) -> ((Add[?] with {lhs: 'lhs, rhs: 'rhs}) | (Lit with {val: 'val}) | (Nega[?] with {arg: 'arg})) -> (int | 'val)

// :e
fix eval2f_oops e2
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a, ?b, ?c, ?d, ?e, ?f, ?g. ?f -> ?d <: (forall ?arg, ?rhs, ?lhs, ?val, ?h, ?i, ?j, ?k, ?l, ?m, ?n, ?o, ?p, ?q, ?r, ?s, ?t, ?u, ?v, ?w. ?h -> ?o -> (?u | ?v)) -> ?x` exceeded recursion depth limit (400)
//│ ║  l.+1: 	fix eval2f_oops e2
//│ ║        	^^^^^^^^^^^^^^^
//│ ╟── while constraining:  ‹∀ 4. {(α2480''''' -> α2481''''') where: α2478 <: ((α2478,) -> α2479''''')}›  <!<  α2807
//│ ╟── while constraining:  ‹∀ 4. {(α2480''''' -> α2481''''') where: α2478 <: ((α2478,) -> α2479''''')}›  <!<  α2806
//│ ╟── while constraining:  (‹∀ 4. {(α2480''''' -> α2481''''') where: α2478 <: ((α2478,) -> α2479''''')}›,)  <!<  (α2806,)
//│ ╟── while constraining:  (α2806 -> (α2816 -> (α2823 | α2824)))  <!<  ((‹∀ 4. {(α2480''''' -> α2481''''') where: α2478 <: ((α2478,) -> α2479''''')}›,) -> α2805)
//│ ╟── while constraining:  ‹∀ 1. (α2423'' -> (α2424'' -> (α2429'' | α2444'')))›  <!<  ((‹∀ 4. {(α2480''''' -> α2481''''') where: α2478 <: ((α2478,) -> α2479''''')}›,) -> α2805)
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α2423'' -> (α2424'' -> (α2429'' | α2444'')))››  <!<  ((‹∀ 4. {(α2480''''' -> α2481''''') where: α2478 <: ((α2478,) -> α2479''''')}›,) -> α2805)
//│ ╟── while constraining:  α2476  <!<  ((‹∀ 4. {(α2480''''' -> α2481''''') where: α2478 <: ((α2478,) -> α2479''''')}›,) -> α2805)
//│ ╟── while constraining:  {(α2478 -> α2805) where: α2476 <: ((‹∀ 4. {(α2480''''' -> α2481''''') where: α2478 <: ((α2478,) -> α2479''''')}›,) -> α2805)}  <!<  ((α2478,) -> α2802)
//│ ╟── while constraining:  ‹∀ 3. {(α2478 -> α2482'''') where: α2476 <: ((‹∀ 4. {(α2480''''' -> α2481''''') where: α2478 <: ((α2478,) -> α2479''''')}›,) -> α2482'''')}›  <!<  ((α2478,) -> α2802)
//│ ╟── while constraining:  ‹∀ 2. ‹∀ 3. {(α2478 -> α2482'''') where: α2476 <: ((‹∀ 4. {(α2480''''' -> α2481''''') where: α2478 <: ((α2478,) -> α2479''''')}›,) -> α2482'''')}››  <!<  ((α2478,) -> α2802)
//│ ╟── while constraining:  α2478  <!<  ((α2478,) -> α2802)
//│ ╟── while constraining:  {(α2803 -> α2804) where: α2478 <: ((α2478,) -> α2802)}  <!<  ((α2783,) -> α2784)
//│ ╟── while constraining:  ‹∀ 4. {(α2480''''' -> α2481''''') where: α2478 <: ((α2478,) -> α2479''''')}›  <!<  ((α2783,) -> α2784)
//│ ╟── while constraining:  ‹∀ 4. {(α2480''''' -> α2481''''') where: α2478 <: ((α2478,) -> α2479''''')}›  <!<  α2783
//│ ╟── while constraining:  ‹∀ 4. {(α2480''''' -> α2481''''') where: α2478 <: ((α2478,) -> α2479''''')}›  <!<  α2782
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  ‹∀ 2. ‹∀ 3. {(α2478 -> α2482'''') where: α2476 <: ((‹∀ 4. {(α2480''''' -> α2481''''') where: α2478 <: ((α2478,) -> α2479''''')}›,) -> α2482'''')}››  <!<  ((α2477,) -> α2508)
//│ ╟── while constraining:  α2477  <!<  ((α2477,) -> α2508)
//│ ╟── while constraining:  {(α2509 -> α2510) where: α2477 <: ((α2477,) -> α2508)}  <!<  ((α2489,) -> α2490)
//│ ╟── while constraining:  ‹∀ 4. {(α2484''''' -> α2485''''') where: α2477 <: ((α2477,) -> α2483''''')}›  <!<  ((α2489,) -> α2490)
//│ ╟── while constraining:  ‹∀ 4. {(α2484''''' -> α2485''''') where: α2477 <: ((α2477,) -> α2483''''')}›  <!<  α2489
//│ ╟── while constraining:  ‹∀ 4. {(α2484''''' -> α2485''''') where: α2477 <: ((α2477,) -> α2483''''')}›  <!<  α2488
//│ ╟── while constraining:  (‹∀ 4. {(α2484''''' -> α2485''''') where: α2477 <: ((α2477,) -> α2483''''')}›,)  <!<  (α2488,)
//│ ╟── while constraining:  (α2488 -> (α2498 -> (α2505 | α2506)))  <!<  ((‹∀ 4. {(α2484''''' -> α2485''''') where: α2477 <: ((α2477,) -> α2483''''')}›,) -> α2486)
//│ ╟── while constraining:  ‹∀ 1. (α2423'' -> (α2424'' -> (α2429'' | α2444'')))›  <!<  ((‹∀ 4. {(α2484''''' -> α2485''''') where: α2477 <: ((α2477,) -> α2483''''')}›,) -> α2486)
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α2423'' -> (α2424'' -> (α2429'' | α2444'')))››  <!<  ((‹∀ 4. {(α2484''''' -> α2485''''') where: α2477 <: ((α2477,) -> α2483''''')}›,) -> α2486)
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α2423'' -> (α2424'' -> (α2429'' | α2444'')))››  <!<  α2476
//│ ╟── while constraining:  (‹∀ 0. ‹∀ 1. (α2423'' -> (α2424'' -> (α2429'' | α2444'')))››,)  <!<  (α2476,)
//│ ╟── while constraining:  (α2476 -> α2487)  <!<  ((‹∀ 0. ‹∀ 1. (α2423'' -> (α2424'' -> (α2429'' | α2444'')))››,) -> α2475)
//│ ╟── while constraining:  ‹∀ 1. (α1474'' -> α1480'')›  <!<  ((‹∀ 0. ‹∀ 1. (α2423'' -> (α2424'' -> (α2429'' | α2444'')))››,) -> α2475)
//│ ╙── while constraining:  ‹∀ 0. ‹∀ 1. (α1474'' -> α1480'')››  <!<  ((‹∀ 0. ‹∀ 1. (α2423'' -> (α2424'' -> (α2429'' | α2444'')))››,) -> α2475)
//│ res: error


