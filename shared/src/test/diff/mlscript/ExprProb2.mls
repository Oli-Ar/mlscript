
// --- Lit, Add ---


class Lit: { val: int }
class Add[E]: { lhs: E; rhs: E }
def lit val = Lit { val }
def add lhs rhs = Add { lhs; rhs }
//│ Defined class Lit
//│ Defined class Add[+E]
//│ lit: (int & 'val) -> (Lit with {val: 'val})
//│    = [Function: lit]
//│ add: ('lhs & 'E) -> ('E & 'rhs) -> (Add['E] with {lhs: 'lhs, rhs: 'rhs})
//│    = [Function: add]


:stats
def eval1 eval1 e = case e of {
  | Lit -> e.val
  | Add -> eval1 eval1 e.lhs + eval1 eval1 e.rhs
  }
//│ eval1: ('a -> (forall 'b, 'rhs. ('rhs
//│   where
//│     'b <: {rhs: 'rhs})) -> int & 'a -> (forall 'b, 'lhs. ('lhs
//│   where
//│     'b <: {lhs: 'lhs})) -> int & 'a) -> (Add['b] & 'b | (Lit with {val: 'val})) -> (int | 'val)
//│      = [Function: eval1]
//│ constrain calls  : 42
//│ annoying  calls  : 0
//│ subtyping calls  : 36

:stats
def eval1f eval1 e = case e of {
  | Lit -> e.val
  | Add -> eval1 e.lhs + eval1 e.rhs
  }
//│ eval1f: ((forall 'a, 'rhs. ('rhs
//│   where
//│     'a <: {rhs: 'rhs})) -> int & (forall 'a, 'lhs. ('lhs
//│   where
//│     'a <: {lhs: 'lhs})) -> int) -> (Add['a] & 'a | (Lit with {val: 'val})) -> (int | 'val)
//│       = [Function: eval1f]
//│ constrain calls  : 38
//│ annoying  calls  : 0
//│ subtyping calls  : 33


e1 = add (lit 1) (add (lit 2) (lit 3))
//│ e1: Add[Add[Lit & {val: 2 | 3}] & {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}} | Lit & {val: 1}] with {lhs: Lit & {val: 1}, rhs: Add[Lit & {val: 2 | 3}] & {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}}}
//│   = Add {
//│       lhs: Lit { val: 1 },
//│       rhs: Add { lhs: Lit { val: 2 }, rhs: Lit { val: 3 } }
//│     }


:e
eval1 eval1 e1
//│ ╔══[ERROR] Cyclic-looking constraint while typing application
//│ ║  l.57: 	eval1 eval1 e1
//│ ║        	^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 0. (α53' -> (α54' -> (val56' | α67')))›  <:  α178    PolymorphicType  TypeVariable
//│ ╙──  ... looks like:  ‹∀ 0. (α53' -> (α54' -> (val56' | α67')))›  <:  α53'
//│ res: error | int
//│    = 6

:e
def eval1_fixed_1 = eval1 eval1
//│ ╔══[ERROR] Cyclic-looking constraint while typing application
//│ ║  l.68: 	def eval1_fixed_1 = eval1 eval1
//│ ║        	                    ^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 0. (α53' -> (α54' -> (val56' | α67')))›  <:  α231'    PolymorphicType  TypeVariable
//│ ╙──  ... looks like:  ‹∀ 0. (α53' -> (α54' -> (val56' | α67')))›  <:  α53'
//│ eval1_fixed_1: (Add[?] & {lhs: Add[?] | Lit, rhs: Add[?] | Lit} | (Lit with {val: 'val})) -> (int | 'val) | error
//│              = [Function (anonymous)]

eval1_fixed_1 e1
//│ res: error | int
//│    = 6


rec def eval1_fixed_2 = eval1f (fun x -> eval1f eval1_fixed_2 x)
//│ eval1_fixed_2: 'rhs -> int
//│   where
//│     'rhs <: Add[?] & {lhs: 'rhs, rhs: 'rhs} | Lit
//│              = [Function (anonymous)]

eval1_fixed_2 e1
//│ res: int
//│    = 6


:e
// Tying the know without a recursive def:
def eval1_fixed_3 =
  let fixed fixed = eval1f (fun x -> eval1f (fixed fixed) x)
  in fixed fixed
//│ ╔══[ERROR] Cyclic-looking constraint while typing application
//│ ║  l.98: 	  in fixed fixed
//│ ║        	     ^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 1. (α384'' -> α401'')›  <:  α460'    PolymorphicType  TypeVariable
//│ ╙──  ... looks like:  ‹∀ 1. (α384'' -> α401'')›  <:  α384''
//│ eval1_fixed_3: error
//│              = [Function (anonymous)]

eval1_fixed_3 e1
//│ res: error
//│    = 6



// --- Nega ---


class Nega[E]: { arg: E }
def nega arg = Nega { arg }
//│ Defined class Nega[+E]
//│ nega: 'arg -> Nega['arg]
//│     = [Function: nega]


def eval2 eval2 e = case e of {
  | Nega -> 0 - (eval2 eval2 e.arg)
  | _ -> eval1 eval2 e
  }
//│ eval2: ('a -> (forall 'b, 'arg. ('arg
//│   where
//│     'b <: {arg: 'arg})) -> int & 'a -> (forall 'c, 'rhs. ('rhs
//│   where
//│     'c <: {rhs: 'rhs})) -> int & 'a -> (forall 'c, 'lhs. ('lhs
//│   where
//│     'c <: {lhs: 'lhs})) -> int & 'a) -> (Add['b] & 'c | (Lit with {val: 'val}) | Nega['b] & 'b) -> (int | 'val)
//│      = [Function: eval2]

def eval2f eval2 e = case e of {
  | Nega -> 0 - (eval2 e.arg)
  | _ -> eval1f eval2 e
  }
//│ eval2f: ((forall 'a, 'arg. ('arg
//│   where
//│     'a <: {arg: 'arg})) -> int & (forall 'b, 'rhs. ('rhs
//│   where
//│     'b <: {rhs: 'rhs})) -> int & (forall 'b, 'lhs. ('lhs
//│   where
//│     'b <: {lhs: 'lhs})) -> int) -> (Add['a] & 'b | (Lit with {val: 'val}) | Nega['a] & 'a) -> (int | 'val)
//│       = [Function: eval2f]


e2 = add (lit 1) (nega e1)
//│ e2: Add[Lit & {val: 1} | Nega[Add[Add[Lit & {val: 2 | 3}] & {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}} | Lit & {val: 1}] with {lhs: Lit & {val: 1}, rhs: Add[Lit & {val: 2 | 3}] & {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}}}]] with {lhs: Lit & {val: 1}, rhs: Nega[Add[Add[Lit & {val: 2 | 3}] & {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}} | Lit & {val: 1}] with {lhs: Lit & {val: 1}, rhs: Add[Lit & {val: 2 | 3}] & {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}}}]}
//│   = Add {
//│       lhs: Lit { val: 1 },
//│       rhs: Nega { arg: Add { lhs: [Lit], rhs: [Add] } }
//│     }


:e
def eval2_fixed_1 = eval2 eval2
//│ ╔══[ERROR] Cyclic-looking constraint while typing application
//│ ║  l.160: 	def eval2_fixed_1 = eval2 eval2
//│ ║         	                    ^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 0. (α575' -> (α576' -> (α582' | α599')))›  <:  α748'    PolymorphicType  TypeVariable
//│ ╙──  ... looks like:  ‹∀ 0. (α575' -> (α576' -> (α582' | α599')))›  <:  α575'
//│ eval2_fixed_1: (Add[?] & {lhs: Add[?] | Lit | Nega[?], rhs: Add[?] | Lit | Nega[?]} | (Lit with {val: 'val}) | Nega[?] & {arg: Add[?] | Lit | Nega[?]}) -> (int | 'val) | error
//│              = [Function (anonymous)]

eval2_fixed_1 e1
eval2_fixed_1 e2
//│ res: error | int
//│    = 6
//│ res: error | int
//│    = -5

// FIXME strange type
// :e
def fix f = let fixed = fun x -> f (fun v -> (x x) v) in fixed fixed
//│ fix: ((forall 'a, 'b, 'c. ('b -> 'c
//│   where
//│     'a <: 'a -> 'b -> 'c)) -> 'd) -> 'd
//│    = [Function: fix]

def eval2_fixed_2 = fix eval2f
//│ eval2_fixed_2: 'lhs -> int
//│   where
//│     'lhs <: Add[?] & {lhs: 'lhs, rhs: 'lhs} | Lit | Nega[?] & {arg: 'lhs}
//│              = [Function (anonymous)]

eval2_fixed_2 e1
eval2_fixed_2 e2
//│ res: int
//│    = 6
//│ res: int
//│    = -5




// === === === ERROR CASES === === === //



// FIXME should be a code-gen error
:re
rec def eval1_fixed = eval1f (eval1f eval1_fixed)
//│ eval1_fixed: 'rhs -> int
//│   where
//│     'rhs <: Add[?] & {lhs: 'rhs, rhs: 'rhs} | Lit
//│ Runtime error:
//│   ReferenceError: eval1_fixed is not defined

rec def eval1_fixed() = eval1f (eval1f (eval1_fixed()))
//│ eval1_fixed: () -> 'rhs -> int
//│   where
//│     'rhs <: Add[?] & {lhs: 'rhs, rhs: 'rhs} | Lit
//│            = [Function: eval1_fixed1]

:re
eval1_fixed() e1
//│ res: int
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded



:ShowRelativeLineNums
:AllowTypeErrors



def eval1_fixed = eval1f (fun x -> eval1f eval1f x)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	def eval1_fixed = eval1f (fun x -> eval1f eval1f x)
//│ ║        	                                   ^^^^^^^^^^^^^
//│ ╟── function of type `?a -> (?val | ?b)` is not an instance of type `int`
//│ ║  l.33: 	def eval1f eval1 e = case e of {
//│ ║        	                 ^^^^^^^^^^^^^^^
//│ ║  l.34: 	  | Lit -> e.val
//│ ║        	^^^^^^^^^^^^^^^^
//│ ║  l.35: 	  | Add -> eval1 e.lhs + eval1 e.rhs
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.36: 	  }
//│ ║        	^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.35: 	  | Add -> eval1 e.lhs + eval1 e.rhs
//│ ╙──      	                         ^^^^^^^^^^^
//│ eval1_fixed: (Add[?] & {lhs: Add[?] & {lhs: (forall 'a, 'lhs. ('lhs
//│   where
//│     'a <: {lhs: 'lhs})) -> int & (forall 'a, 'rhs. ('rhs
//│   where
//│     'a <: {rhs: 'rhs})) -> int, rhs: (forall 'b, 'lhs0. ('lhs0
//│   where
//│     'b <: {lhs: 'lhs0})) -> int & (forall 'b, 'rhs0. ('rhs0
//│   where
//│     'b <: {rhs: 'rhs0})) -> int} | Lit, rhs: Add[?] & {lhs: (forall 'c, 'lhs1. ('lhs1
//│   where
//│     'c <: {lhs: 'lhs1})) -> int & (forall 'c, 'rhs1. ('rhs1
//│   where
//│     'c <: {rhs: 'rhs1})) -> int, rhs: (forall 'd, 'lhs2. ('lhs2
//│   where
//│     'd <: {lhs: 'lhs2})) -> int & (forall 'd, 'rhs2. ('rhs2
//│   where
//│     'd <: {rhs: 'rhs2})) -> int} | Lit} | (Lit with {val: 'val})) -> (int | 'val)

rec def eval1_fixed = eval1f (fun x -> eval1_fixed eval1_fixed x)
//│ ╔══[ERROR] Type mismatch in binding of application:
//│ ║  l.+1: 	rec def eval1_fixed = eval1f (fun x -> eval1_fixed eval1_fixed x)
//│ ║        	                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── function of type `?a -> (?val | ?b)` does not match type `Add[?] & ?c | Lit & ?d`
//│ ║  l.33: 	def eval1f eval1 e = case e of {
//│ ║        	                 ^^^^^^^^^^^^^^^
//│ ║  l.34: 	  | Lit -> e.val
//│ ║        	^^^^^^^^^^^^^^^^
//│ ║  l.35: 	  | Add -> eval1 e.lhs + eval1 e.rhs
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.36: 	  }
//│ ║        	^^^
//│ ╟── but it flows into application with expected type `Add[?] & ?c | Lit & ?e`
//│ ║  l.+1: 	rec def eval1_fixed = eval1f (fun x -> eval1_fixed eval1_fixed x)
//│ ║        	                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.33: 	def eval1f eval1 e = case e of {
//│ ╙──      	                          ^
//│ ╔══[ERROR] Type mismatch in binding of application:
//│ ║  l.+1: 	rec def eval1_fixed = eval1f (fun x -> eval1_fixed eval1_fixed x)
//│ ║        	                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── operator application of type `int` is not a function
//│ ║  l.35: 	  | Add -> eval1 e.lhs + eval1 e.rhs
//│ ║        	           ^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.+1: 	rec def eval1_fixed = eval1f (fun x -> eval1_fixed eval1_fixed x)
//│ ║        	                                       ^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from application:
//│ ║  l.+1: 	rec def eval1_fixed = eval1f (fun x -> eval1_fixed eval1_fixed x)
//│ ╙──      	                                       ^^^^^^^^^^^^^^^^^^^^^^^
//│ eval1_fixed: (Add['a] & 'a | (Lit with {val: (forall 'a, 'lhs. ('lhs
//│   where
//│     'a <: {lhs: 'lhs}
//│     'a <: {rhs: 'lhs})) -> int & 'val})) -> (int | 'val)

:e
rec def eval1_fixed = eval1f eval1_fixed e1
//│ ╔══[ERROR] Type mismatch in binding of application:
//│ ║  l.+1: 	rec def eval1_fixed = eval1f eval1_fixed e1
//│ ║        	                      ^^^^^^^^^^^^^^^^^^^^^
//│ ╟── operator application of type `int` is not a function
//│ ║  l.35: 	  | Add -> eval1 e.lhs + eval1 e.rhs
//│ ║        	           ^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── but it flows into application with expected type `(forall ?E, ?rhs. (?rhs0
//│   where
//│     ?a <: {rhs: ?rhs0})) -> ?b`
//│ ║  l.+1: 	rec def eval1_fixed = eval1f eval1_fixed e1
//│ ║        	                      ^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.35: 	  | Add -> eval1 e.lhs + eval1 e.rhs
//│ ║        	                         ^^^^^^^^^^^
//│ ╟── from reference:
//│ ║  l.+1: 	rec def eval1_fixed = eval1f eval1_fixed e1
//│ ╙──      	                             ^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in binding of application:
//│ ║  l.+1: 	rec def eval1_fixed = eval1f eval1_fixed e1
//│ ║        	                      ^^^^^^^^^^^^^^^^^^^^^
//│ ╟── operator application of type `int` is not a function
//│ ║  l.35: 	  | Add -> eval1 e.lhs + eval1 e.rhs
//│ ║        	           ^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── but it flows into application with expected type `(forall ?E, ?rhs. (?lhs
//│   where
//│     ?a <: {lhs: ?lhs})) -> ?b`
//│ ║  l.+1: 	rec def eval1_fixed = eval1f eval1_fixed e1
//│ ║        	                      ^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.35: 	  | Add -> eval1 e.lhs + eval1 e.rhs
//│ ║        	           ^^^^^^^^^^^
//│ ╟── from reference:
//│ ║  l.+1: 	rec def eval1_fixed = eval1f eval1_fixed e1
//│ ╙──      	                             ^^^^^^^^^^^
//│ eval1_fixed: int


def eval2_broken eval2 e = case e of {
  | Nega -> e.arg
  | _ -> eval1 eval2 e
  }
//│ eval2_broken: ('a -> (forall 'b, 'rhs. ('rhs
//│   where
//│     'b <: {rhs: 'rhs})) -> int & 'a -> (forall 'b, 'lhs. ('lhs
//│   where
//│     'b <: {lhs: 'lhs})) -> int & 'a) -> (Add['b] & 'b | (Lit with {val: 'arg}) | (Nega['b] with {arg: 'arg})) -> ('arg | int)

:e
eval2_broken eval2_broken e2
//│ ╔══[ERROR] Cyclic-looking constraint while typing application
//│ ║  l.+1: 	eval2_broken eval2_broken e2
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 0. (α1473' -> (α1474' -> (arg1476' | α1491')))›  <:  α1539    PolymorphicType  TypeVariable
//│ ╙──  ... looks like:  ‹∀ 0. (α1473' -> (α1474' -> (arg1476' | α1491')))›  <:  α1473'
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	eval2_broken eval2_broken e2
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── application of type `Add[?E] & {Add#E = ?E, lhs: ?lhs, rhs: ?rhs}` is not an instance of type `int`
//│ ║  l.8: 	def add lhs rhs = Add { lhs; rhs }
//│ ║       	                  ^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.20: 	  | Add -> eval1 eval1 e.lhs + eval1 eval1 e.rhs
//│ ║        	                               ^^^^^^^^^^^^^^^^^
//│ ╟── from field selection:
//│ ║  l.343: 	  | Nega -> e.arg
//│ ╙──       	            ^^^^^
//│ res: error | int


def eval2f_oops eval2 e = case e of {
  | Nega -> 0 - (eval2 e.arg)
  | _ -> eval1 eval2 e // should be: eval1f eval2 e
  }
//│ eval2f_oops: ((forall 'a, 'arg. ('arg
//│   where
//│     'a <: {arg: 'arg})) -> int & 'b -> (forall 'c, 'rhs. ('rhs
//│   where
//│     'c <: {rhs: 'rhs})) -> int & 'b -> (forall 'c, 'lhs. ('lhs
//│   where
//│     'c <: {lhs: 'lhs})) -> int & 'b) -> (Add['a] & 'c | (Lit with {val: 'val}) | Nega['a] & 'a) -> (int | 'val)

// :e
fix eval2f_oops e2
//│ ╔══[ERROR] Cyclic-looking constraint while typing application
//│ ║  l.+1: 	fix eval2f_oops e2
//│ ║        	^^^^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  (α1688 -> (α1693 | α1694))  <:  α1712    FunctionType  TypeVariable
//│ ╙──  ... looks like:  (α1610' -> (α1615' | α1631'))  <:  α1673'''
//│ res: error


