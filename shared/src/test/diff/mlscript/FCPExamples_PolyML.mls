:GeneralizeCurriedFunctions

// ============ Sec 1.1 ============

// i.e. auto
g = fun (f: forall 'a. 'a -> 'a) -> f f
g' = fun f -> f f
//│ g: (forall 'a. 'a -> 'a) -> (forall 'b, 'c. ('c
//│   where
//│     'b <: 'b -> 'c))
//│  = [Function: g]
//│ g': 'a -> (forall 'a, 'b. ('b
//│   where
//│     'a <: 'a -> 'b))
//│   = [Function: g]

// i.e. auto id (FreezeML F5)
(fun (f: forall 'a. 'a -> 'a) -> f f) (fun x -> x)
(fun f -> f f) (fun x -> x)
//│ res: 'a
//│   where
//│     'b <: 'b -> 'a
//│    = [Function (anonymous)]
//│ res: 'a
//│   where
//│     'b <: 'b -> 'a
//│    = [Function (anonymous)]

// i.e. (fun auto -> auto id) auto
(fun g -> g (fun x -> x)) (fun f -> f f)
(fun g -> g (fun x -> x)) (fun (f: forall 'a. 'a -> 'a) -> f f)
//│ res: 'a
//│   where
//│     'b <: (forall 'c. 'c -> 'c) -> 'a
//│    = [Function (anonymous)]
//│ res: 'a
//│   where
//│     'b <: (forall 'c. 'c -> 'c) -> 'a
//│    = [Function (anonymous)]

// ============ Sec 1.2 ============

fun f -> f (g f)
fun f -> f (g' f)
//│ res: (forall 'a. 'a -> 'a & 'b) -> (forall 'b. ('c
//│   where
//│     'b <: (forall 'd, 'e. ('e
//│   where
//│     'd <: 'd -> 'e)) -> 'c))
//│    = [Function: res]
//│ res: 'a -> (forall 'a. ('b
//│   where
//│     'a <: (forall 'c, 'd. ('d
//│   where
//│     'c <: 'c -> 'd)) -> 'b))
//│    = [Function: res]

// ============ Sec 4.1 ============

let f = fun x -> x in 
  let g = (fun x -> x) f in
    g g
//│ res: 'a -> 'a
//│    = [Function (anonymous)]

:NoJS

// ============ Sec 4.2 ============
// using FCP to solve method typing issues,
// which is overkill since it can be solved with subtyping and two levels of polymorphism...
// all of the following are typable in the main branch

// ------------ Dummy classes to represent the types in the examples ------------

class List[a]
  method Get: a
//│ Defined class List[+a]
//│ Declared List.Get: List['a] -> 'a

// Used to represent `::` in the papers
def cons[a]: a -> List[a] -> List[a]
//│ cons: 'a -> List['a] -> List['a]

// Used to represent `[]` in the papers
def nil: List['a]
//│ nil: List[nothing]

def match_list: forall 'a 'b. List['a] -> 'b -> ('a -> List['a] -> 'b) -> 'b
//│ match_list: List['a] -> 'b -> ('a -> List['a] -> 'b) -> 'b

// ------------ Type signatures for functions used in the examples ------------
// (I guess)

def mem[a]: a -> List[a] -> bool
//│ mem: anything -> List[?] -> bool

rec def mem x l = match_list l false (fun head -> fun tail -> if eq head x then true else mem x tail)
//│ anything -> List[?] -> bool
//│   <:  mem:
//│ anything -> List[?] -> bool




// def fold_left[a, b]: (a -> b -> a) -> a -> List[b] -> a
def fold_left: forall 'a 'b. ('a -> 'b -> 'a) -> 'a -> List['b] -> 'a
//│ fold_left: ('a -> 'b -> 'a) -> 'a -> List['b] -> 'a

rec def fl f x l = match_list l x (fun head -> fun tail -> fl f (f x head) tail)
//│ fl: ('b -> 'a -> 'b) -> 'b -> List['a] -> 'b

rec def fl2 f x l = match_list l x (fun head -> fun tail -> fold_left f (f x head) tail)
//│ fl2: 'c -> (forall 'd. 'd -> (forall 'e. List['e] -> (forall 'c, 'd, 'e, 'a, 'b, 'f. ('a | 'd
//│   where
//│     'c <: 'a -> 'b -> 'a & 'd -> 'e -> 'a
//│     'f <: List['b]))))

def fold_left = fl
//│ ('b -> 'a -> 'b) -> 'b -> List['a] -> 'b
//│   <:  fold_left:
//│ ('a -> 'b -> 'a) -> 'a -> List['b] -> 'a

def fold_left = fl2
//│ 'c -> (forall 'd. 'd -> (forall 'e. List['e] -> (forall 'c, 'd, 'e, 'a, 'b, 'f. ('a | 'd
//│   where
//│     'c <: 'a -> 'b -> 'a & 'd -> 'e -> 'a
//│     'f <: List['b]))))
//│   <:  fold_left:
//│ ('a -> 'b -> 'a) -> 'a -> List['b] -> 'a

// :d
// rec def fold_left f x l = match_list l x (fun head -> fun tail -> fold_left f (f x head) tail)

// ------------ polymorphic methods ------------

class Collection[a]: { l: List[a] }
  method Mem x = mem x this.l
  method Fold f x = fold_left f x this.l
//│ Defined class Collection[+a]
//│ Defined Collection.Mem: Collection[?] -> anything -> bool
//│ Defined Collection.Fold: Collection['a] -> (forall 'b. 'b -> (forall 'c. 'c -> (forall 'a, 'b, 'c, 'a0. ('a0 | 'c
//│   where
//│     'b <: ('a0 | 'c) -> 'a -> 'a0
//│     'b <: ('a0 | 'c) -> 'a -> 'a0))))

def coll_mem c x = c.Mem x
//│ coll_mem: 'a -> 'a -> (forall 'a. (bool
//│   where
//│     'a <: Collection['a]))

// typo in the paper? it was `fun x -> fun y -> ...`
def simple_and_double c =
  let l1 = c.Fold (fun y -> fun x -> cons x y) nil in
  let l2 = c.Fold (fun y -> fun x -> cons ((x, x),) y) nil in
  (l1, l2)
//│ simple_and_double: Collection[?] -> (forall 'b, 'a. ('a | List[nothing]
//│   where
//│     'b <: ('a | List[nothing]) -> nothing -> 'a
//│     'b <: ('a | List[nothing]) -> nothing -> 'a), forall 'c, 'a0. ('a0 | List[nothing]
//│   where
//│     'c <: ('a0 | List[nothing]) -> nothing -> 'a0
//│     'c <: ('a0 | List[nothing]) -> nothing -> 'a0),)

simple_and_double (Collection{l = cons 1 nil})
//│ res: (forall 'b, 'a. ('a | List[nothing]
//│   where
//│     'b <: ('a | List[nothing]) -> nothing -> 'a
//│     'b <: ('a | List[nothing]) -> nothing -> 'a), forall 'c, 'a0. ('a0 | List[nothing]
//│   where
//│     'c <: ('a0 | List[nothing]) -> nothing -> 'a0
//│     'c <: ('a0 | List[nothing]) -> nothing -> 'a0),)

// ------------ subtyping & methods ------------

class Float
class Color
class Point: { x: Float; y: Float }
class ColorPoint: Point & { c: Color }
class Circle: { x: Float; y: Float; r: Float }
  method Distance: Point -> Float
//│ Defined class Float
//│ Defined class Color
//│ Defined class Point
//│ Defined class ColorPoint
//│ Defined class Circle
//│ Declared Circle.Distance: Circle -> Point -> Float

c = error : Circle
cp = error : ColorPoint
c.Distance cp
//│ c: Circle
//│ cp: ColorPoint
//│ res: Float
