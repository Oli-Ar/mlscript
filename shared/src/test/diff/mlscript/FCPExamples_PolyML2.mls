:NoJS
:GeneralizeCurriedFunctions
:NoRecursiveTypes

// ============ Sec 4.2 ============
// alternative: separate `Cons` and `Nil` types with definition of `mem` and `fold_left`

// ------------ Dummy classes to represent the types in the examples ------------

class Nil: {}
class Cons[a]: { head: a; tail: List[a] }
type List[a] = Nil | Cons[a]
//│ Defined class Nil
//│ Defined class Cons[+a]
//│ Defined type alias List[+a]

def Nil = Nil {}
//│ Nil: Nil

def Cons head tail = Cons { head; tail }
//│ Cons: 'b -> (forall 'a, 'tail. (List['a] & 'tail) -> (Cons['a | 'b] with {head: 'b, tail: 'tail}))

// ------------ Type signatures for functions used in the examples ------------
// (I guess)

rec def mem x l = case l of
  { Nil -> false
  | Cons -> if eq l.head x then true else mem x l.tail
  }
//│ mem: anything -> 'tail -> bool
//│   where
//│     'tail <: (Cons[?] with {tail: 'tail}) | Nil

rec def fold_left f x l = case l of
  { Nil -> x
  | Cons -> fold_left f (f x l.head) l.tail
  }
//│ fold_left: ('a -> (forall 'head. 'head) -> 'b & 'c) -> 'a -> (Cons['b] & 'b | Nil) -> 'a
//│   where
//│     'a :> forall 'a, 'c, 'b. ('d
//│   where
//│     'c <: 'a -> (forall 'b, 'head. ('head
//│   where
//│     'b <: {head: 'head})) -> 'd
//│     'b <: {head: 'b})

// ------------ polymorphic methods ------------

:RecursiveTypes // needed for these recursive defs uses

class Collection[a]: { l: List[a] }
  method Mem x = mem x this.l
  method Fold f x = fold_left f x this.l
//│ Defined class Collection[+a]
//│ Defined Collection.Mem: Collection[?] -> anything -> bool
//│ Defined Collection.Fold: Collection['a] -> (forall 'b. 'b -> (forall 'b, 'c. ('c -> 'c
//│   where
//│     'b <: 'c -> (forall 'head. 'a | 'head) -> 'b)))
//│   where
//│     'c :> forall 'c, 'd, 'e. ('f
//│   where
//│     'd <: 'c -> (forall 'a, 'e, 'head. ('a | 'head
//│   where
//│     'e <: {head: 'head}
//│     'e <: {head: 'head})) -> 'f
//│     'e <: {head: 'b})

def coll_mem c x = c.Mem x
//│ coll_mem: 'a -> (forall 'a. ('a -> bool
//│   where
//│     'a <: Collection['a]))

// typo in the paper? it was `fun x -> fun y -> ...`
def simple_and_double c =
  let l1 = c.Fold (fun y -> fun x -> Cons x y) Nil in
  let l2 = c.Fold (fun y -> fun x -> Cons ((x, x),) y) Nil in
  (l1, l2)
//│ simple_and_double: Collection['a | 'a0] -> (forall 'b. Nil | 'b, forall 'c. Nil | 'c,)
//│   where
//│     'c :> forall 'c, 'd, 'e. ('f
//│   where
//│     'd <: 'c -> (forall 'a, 'e, 'head. ('a | 'head
//│   where
//│     'e <: {head: 'head}
//│     'e <: {head: 'head})) -> 'f
//│     'e <: {head: anything})
//│     'b :> forall 'b, 'g, 'h. ('i
//│   where
//│     'g <: 'b -> (forall 'a0, 'h, 'head0. ('a0 | 'head0
//│   where
//│     'h <: {head: 'head0}
//│     'h <: {head: 'head0})) -> 'i
//│     'h <: {head: anything})
