
class Exp
//│ Defined class Exp

class Lit: { n: int } & Exp
class Add: { lhs: Exp; rhs: Exp } & Exp
//│ Defined class Lit
//│ Defined class Add

rec def eval e = case e of {
  | Lit -> e.n
  | Add -> eval e.lhs + eval e.rhs
  }
//│ eval: 'a -> int
//│   where
//│     'a <: (Add with {lhs: 'a, rhs: 'a}) | Lit
//│     = [Function: eval]

e = Add { lhs = Lit {n=1}; rhs = Lit {n=2} }
//│ e: Add with {lhs: Lit & {n: 1}, rhs: Lit & {n: 2}}
//│  = Add { lhs: Lit { n: 1 }, rhs: Lit { n: 2 } }

eval e
//│ res: int
//│    = 3


class Neg: { e: Exp } & Exp
//│ Defined class Neg

e2 = Neg { e }
//│ e2: Neg with {e: Add with {lhs: Lit & {n: 1}, rhs: Lit & {n: 2}}}
//│   = Neg { e: Add { lhs: Lit { n: 1 }, rhs: Lit { n: 2 } } }

e2.e.lhs.n
//│ res: 1
//│    = 1

:e
eval e2
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.40: 	eval e2
//│ ║        	^^^^^^^
//│ ╟── application of type `Neg & {e: ?e}` does not match type `Add & ?a | Lit & ?b`
//│ ║  l.31: 	e2 = Neg { e }
//│ ║        	     ^^^^^^^^^
//│ ╟── but it flows into reference with expected type `Add & ?c | Lit & ?d`
//│ ║  l.40: 	eval e2
//│ ║        	     ^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.10: 	rec def eval e = case e of {
//│ ╙──      	                      ^
//│ res: error | int
//│ Runtime error:
//│   Error: non-exhaustive case expression


def eval eval e = case e of {
  | Lit -> e.n
  | Add -> eval eval e.lhs + eval eval e.rhs
  }
//│ eval: ('a -> 'rhs -> int & 'a -> 'lhs -> int & 'a) -> ((Add with {lhs: 'lhs, rhs: 'rhs}) | (Lit with {n: 'n})) -> (int | 'n)
//│     = [Function: eval1]

:e
eval eval e
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?n, ?lhs, ?rhs, ?a, ?b, ?c, ?d, ?e, ?f, ?g, ?h, ?i. ?a -> ?f -> (?n | ?i) <: (forall ?n, ?lhs, ?rhs, ?j, ?k, ?l, ?m, ?o, ?p, ?q, ?r, ?s. ?j -> ?p -> (?n | ?s)) -> ?t` exceeded recursion depth limit (400)
//│ ║  l.66: 	eval eval e
//│ ║        	^^^^^^^^^
//│ ╟── while constraining:  (α332 -> (α339 -> (n341 | α343)))  <!<  ((α320,) -> α321)
//│ ╟── while constraining:  ‹∀ 1. (α154'' -> (α155'' -> (n157'' | α166'')))›  <!<  ((α320,) -> α321)
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α154'' -> (α155'' -> (n157'' | α166'')))››  <!<  ((α320,) -> α321)
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α154'' -> (α155'' -> (n157'' | α166'')))››  <!<  α320
//│ ╟── while constraining:  α308  <!<  α320
//│ ╟── while constraining:  (α308,)  <!<  (α320,)
//│ ╟── while constraining:  (α320 -> (α327 -> (n329 | α331)))  <!<  ((α308,) -> α309)
//│ ╟── while constraining:  ‹∀ 1. (α154'' -> (α155'' -> (n157'' | α166'')))›  <!<  ((α308,) -> α309)
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α154'' -> (α155'' -> (n157'' | α166'')))››  <!<  ((α308,) -> α309)
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α154'' -> (α155'' -> (n157'' | α166'')))››  <!<  α308
//│ ╟── while constraining:  α296  <!<  α308
//│ ╟── while constraining:  (α296,)  <!<  (α308,)
//│ ╟── while constraining:  (α308 -> (α315 -> (n317 | α319)))  <!<  ((α296,) -> α297)
//│ ╟── while constraining:  ‹∀ 1. (α154'' -> (α155'' -> (n157'' | α166'')))›  <!<  ((α296,) -> α297)
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α154'' -> (α155'' -> (n157'' | α166'')))››  <!<  ((α296,) -> α297)
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  (α200,)  <!<  (α212,)
//│ ╟── while constraining:  (α212 -> (α219 -> (n221 | α223)))  <!<  ((α200,) -> α201)
//│ ╟── while constraining:  ‹∀ 1. (α154'' -> (α155'' -> (n157'' | α166'')))›  <!<  ((α200,) -> α201)
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α154'' -> (α155'' -> (n157'' | α166'')))››  <!<  ((α200,) -> α201)
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α154'' -> (α155'' -> (n157'' | α166'')))››  <!<  α200
//│ ╟── while constraining:  α188  <!<  α200
//│ ╟── while constraining:  (α188,)  <!<  (α200,)
//│ ╟── while constraining:  (α200 -> (α207 -> (n209 | α211)))  <!<  ((α188,) -> α189)
//│ ╟── while constraining:  ‹∀ 1. (α154'' -> (α155'' -> (n157'' | α166'')))›  <!<  ((α188,) -> α189)
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α154'' -> (α155'' -> (n157'' | α166'')))››  <!<  ((α188,) -> α189)
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α154'' -> (α155'' -> (n157'' | α166'')))››  <!<  α188
//│ ╟── while constraining:  (‹∀ 0. ‹∀ 1. (α154'' -> (α155'' -> (n157'' | α166'')))››,)  <!<  (α188,)
//│ ╟── while constraining:  (α188 -> (α195 -> (n197 | α199)))  <!<  ((‹∀ 0. ‹∀ 1. (α154'' -> (α155'' -> (n157'' | α166'')))››,) -> α187)
//│ ╟── while constraining:  ‹∀ 1. (α154'' -> (α155'' -> (n157'' | α166'')))›  <!<  ((‹∀ 0. ‹∀ 1. (α154'' -> (α155'' -> (n157'' | α166'')))››,) -> α187)
//│ ╙── while constraining:  ‹∀ 0. ‹∀ 1. (α154'' -> (α155'' -> (n157'' | α166'')))››  <!<  ((‹∀ 0. ‹∀ 1. (α154'' -> (α155'' -> (n157'' | α166'')))››,) -> α187)
//│ res: error
//│    = 3


def evalN evalN e = case e of {
  | Neg -> 0 - evalN evalN e.e
  | _ -> eval evalN e
  }
//│ evalN: ('a -> 'e -> int & 'a -> 'rhs -> int & 'a -> 'lhs -> int & 'a) -> ((Add with {lhs: 'lhs, rhs: 'rhs}) | (Lit with {n: 'n}) | (Neg with {e: 'e})) -> (int | 'n)
//│      = [Function: evalN]

:e
evalN eval e
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?e, ?rhs, ?lhs, ?n, ?a, ?b, ?c, ?d, ?f, ?g, ?h, ?i, ?j, ?k, ?l, ?m, ?o, ?p, ?q, ?r, ?s. ?a -> ?j -> (?q | ?r) <: (forall ?n0, ?lhs0, ?rhs0, ?t, ?u, ?v, ?w, ?x, ?y, ?z, ?a1, ?b1. ?t -> ?y -> (?n0 | ?b1)) -> ?c1` exceeded recursion depth limit (400)
//│ ║  l.114: 	evalN eval e
//│ ║         	^^^^^^^^^^
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α154'' -> (α155'' -> (n157'' | α166'')))››  <!<  α560
//│ ╟── while constraining:  α548  <!<  α560
//│ ╟── while constraining:  (α548,)  <!<  (α560,)
//│ ╟── while constraining:  (α560 -> (α567 -> (n569 | α571)))  <!<  ((α548,) -> α549)
//│ ╟── while constraining:  ‹∀ 1. (α154'' -> (α155'' -> (n157'' | α166'')))›  <!<  ((α548,) -> α549)
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α154'' -> (α155'' -> (n157'' | α166'')))››  <!<  ((α548,) -> α549)
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α154'' -> (α155'' -> (n157'' | α166'')))››  <!<  α548
//│ ╟── while constraining:  α536  <!<  α548
//│ ╟── while constraining:  (α536,)  <!<  (α548,)
//│ ╟── while constraining:  (α548 -> (α555 -> (n557 | α559)))  <!<  ((α536,) -> α537)
//│ ╟── while constraining:  ‹∀ 1. (α154'' -> (α155'' -> (n157'' | α166'')))›  <!<  ((α536,) -> α537)
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α154'' -> (α155'' -> (n157'' | α166'')))››  <!<  ((α536,) -> α537)
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α154'' -> (α155'' -> (n157'' | α166'')))››  <!<  α536
//│ ╟── while constraining:  α524  <!<  α536
//│ ╟── while constraining:  (α524,)  <!<  (α536,)
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  (α452 -> (α459 -> (n461 | α463)))  <!<  ((α440,) -> α441)
//│ ╟── while constraining:  ‹∀ 1. (α154'' -> (α155'' -> (n157'' | α166'')))›  <!<  ((α440,) -> α441)
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α154'' -> (α155'' -> (n157'' | α166'')))››  <!<  ((α440,) -> α441)
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α154'' -> (α155'' -> (n157'' | α166'')))››  <!<  α440
//│ ╟── while constraining:  α420  <!<  α440
//│ ╟── while constraining:  (α420,)  <!<  (α440,)
//│ ╟── while constraining:  (α440 -> (α447 -> (n449 | α451)))  <!<  ((α420,) -> α421)
//│ ╟── while constraining:  ‹∀ 1. (α154'' -> (α155'' -> (n157'' | α166'')))›  <!<  ((α420,) -> α421)
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α154'' -> (α155'' -> (n157'' | α166'')))››  <!<  ((α420,) -> α421)
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α154'' -> (α155'' -> (n157'' | α166'')))››  <!<  α420
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α154'' -> (α155'' -> (n157'' | α166'')))››  <!<  α419
//│ ╟── while constraining:  (‹∀ 0. ‹∀ 1. (α154'' -> (α155'' -> (n157'' | α166'')))››,)  <!<  (α419,)
//│ ╟── while constraining:  (α419 -> (α430 -> (α437 | α438)))  <!<  ((‹∀ 0. ‹∀ 1. (α154'' -> (α155'' -> (n157'' | α166'')))››,) -> α418)
//│ ╟── while constraining:  ‹∀ 1. (α364'' -> (α365'' -> (α371'' | α386'')))›  <!<  ((‹∀ 0. ‹∀ 1. (α154'' -> (α155'' -> (n157'' | α166'')))››,) -> α418)
//│ ╙── while constraining:  ‹∀ 0. ‹∀ 1. (α364'' -> (α365'' -> (α371'' | α386'')))››  <!<  ((‹∀ 0. ‹∀ 1. (α154'' -> (α155'' -> (n157'' | α166'')))››,) -> α418)
//│ res: error
//│    = 3

:e
evalN eval e2
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?e, ?rhs, ?lhs, ?n, ?a, ?b, ?c, ?d, ?f, ?g, ?h, ?i, ?j, ?k, ?l, ?m, ?o, ?p, ?q, ?r, ?s. ?a -> ?j -> (?q | ?r) <: (forall ?n0, ?lhs0, ?rhs0, ?t, ?u, ?v, ?w, ?x, ?y, ?z, ?a1, ?b1. ?t -> ?y -> (?n0 | ?b1)) -> ?c1` exceeded recursion depth limit (400)
//│ ║  l.154: 	evalN eval e2
//│ ║         	^^^^^^^^^^
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α154'' -> (α155'' -> (n157'' | α166'')))››  <!<  α742
//│ ╟── while constraining:  α730  <!<  α742
//│ ╟── while constraining:  (α730,)  <!<  (α742,)
//│ ╟── while constraining:  (α742 -> (α749 -> (n751 | α753)))  <!<  ((α730,) -> α731)
//│ ╟── while constraining:  ‹∀ 1. (α154'' -> (α155'' -> (n157'' | α166'')))›  <!<  ((α730,) -> α731)
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α154'' -> (α155'' -> (n157'' | α166'')))››  <!<  ((α730,) -> α731)
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α154'' -> (α155'' -> (n157'' | α166'')))››  <!<  α730
//│ ╟── while constraining:  α718  <!<  α730
//│ ╟── while constraining:  (α718,)  <!<  (α730,)
//│ ╟── while constraining:  (α730 -> (α737 -> (n739 | α741)))  <!<  ((α718,) -> α719)
//│ ╟── while constraining:  ‹∀ 1. (α154'' -> (α155'' -> (n157'' | α166'')))›  <!<  ((α718,) -> α719)
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α154'' -> (α155'' -> (n157'' | α166'')))››  <!<  ((α718,) -> α719)
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α154'' -> (α155'' -> (n157'' | α166'')))››  <!<  α718
//│ ╟── while constraining:  α706  <!<  α718
//│ ╟── while constraining:  (α706,)  <!<  (α718,)
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  (α634 -> (α641 -> (n643 | α645)))  <!<  ((α622,) -> α623)
//│ ╟── while constraining:  ‹∀ 1. (α154'' -> (α155'' -> (n157'' | α166'')))›  <!<  ((α622,) -> α623)
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α154'' -> (α155'' -> (n157'' | α166'')))››  <!<  ((α622,) -> α623)
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α154'' -> (α155'' -> (n157'' | α166'')))››  <!<  α622
//│ ╟── while constraining:  α602  <!<  α622
//│ ╟── while constraining:  (α602,)  <!<  (α622,)
//│ ╟── while constraining:  (α622 -> (α629 -> (n631 | α633)))  <!<  ((α602,) -> α603)
//│ ╟── while constraining:  ‹∀ 1. (α154'' -> (α155'' -> (n157'' | α166'')))›  <!<  ((α602,) -> α603)
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α154'' -> (α155'' -> (n157'' | α166'')))››  <!<  ((α602,) -> α603)
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α154'' -> (α155'' -> (n157'' | α166'')))››  <!<  α602
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α154'' -> (α155'' -> (n157'' | α166'')))››  <!<  α601
//│ ╟── while constraining:  (‹∀ 0. ‹∀ 1. (α154'' -> (α155'' -> (n157'' | α166'')))››,)  <!<  (α601,)
//│ ╟── while constraining:  (α601 -> (α612 -> (α619 | α620)))  <!<  ((‹∀ 0. ‹∀ 1. (α154'' -> (α155'' -> (n157'' | α166'')))››,) -> α600)
//│ ╟── while constraining:  ‹∀ 1. (α364'' -> (α365'' -> (α371'' | α386'')))›  <!<  ((‹∀ 0. ‹∀ 1. (α154'' -> (α155'' -> (n157'' | α166'')))››,) -> α600)
//│ ╙── while constraining:  ‹∀ 0. ‹∀ 1. (α364'' -> (α365'' -> (α371'' | α386'')))››  <!<  ((‹∀ 0. ‹∀ 1. (α154'' -> (α155'' -> (n157'' | α166'')))››,) -> α600)
//│ res: error
//│    = -3

:e
ev = evalN evalN
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?e, ?rhs, ?lhs, ?n, ?a, ?b, ?c, ?d, ?f, ?g, ?h, ?i, ?j, ?k, ?l, ?m, ?o, ?p, ?q, ?r, ?s. ?a -> ?j -> (?q | ?r) <: (forall ?e, ?rhs, ?lhs, ?n, ?t, ?u, ?v, ?w, ?x, ?y, ?z, ?a1, ?b1, ?c1, ?d1, ?e1, ?f1, ?g1, ?h1, ?i1, ?j1. ?t -> ?b1 -> (?h1 | ?i1)) -> ?k1` exceeded recursion depth limit (400)
//│ ║  l.194: 	ev = evalN evalN
//│ ║         	     ^^^^^^^^^^^
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α364'' -> (α365'' -> (α371'' | α386'')))››  <!<  α951'
//│ ╟── while constraining:  α931'  <!<  α951'
//│ ╟── while constraining:  (α931',)  <!<  (α951',)
//│ ╟── while constraining:  (α951' -> (α962' -> (α969' | α970')))  <!<  ((α931',) -> α932')
//│ ╟── while constraining:  ‹∀ 1. (α364'' -> (α365'' -> (α371'' | α386'')))›  <!<  ((α931',) -> α932')
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α364'' -> (α365'' -> (α371'' | α386'')))››  <!<  ((α931',) -> α932')
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α364'' -> (α365'' -> (α371'' | α386'')))››  <!<  α931'
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α364'' -> (α365'' -> (α371'' | α386'')))››  <!<  α930'
//│ ╟── while constraining:  α910'  <!<  α930'
//│ ╟── while constraining:  (α910',)  <!<  (α930',)
//│ ╟── while constraining:  (α930' -> (α941' -> (α948' | α949')))  <!<  ((α910',) -> α911')
//│ ╟── while constraining:  ‹∀ 1. (α364'' -> (α365'' -> (α371'' | α386'')))›  <!<  ((α910',) -> α911')
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α364'' -> (α365'' -> (α371'' | α386'')))››  <!<  ((α910',) -> α911')
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α364'' -> (α365'' -> (α371'' | α386'')))››  <!<  α910'
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α364'' -> (α365'' -> (α371'' | α386'')))››  <!<  α909'
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  ‹∀ 1. (α364'' -> (α365'' -> (α371'' | α386'')))›  <!<  ((α805',) -> α806')
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α364'' -> (α365'' -> (α371'' | α386'')))››  <!<  ((α805',) -> α806')
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α364'' -> (α365'' -> (α371'' | α386'')))››  <!<  α805'
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α364'' -> (α365'' -> (α371'' | α386'')))››  <!<  α804'
//│ ╟── while constraining:  α784'  <!<  α804'
//│ ╟── while constraining:  (α784',)  <!<  (α804',)
//│ ╟── while constraining:  (α804' -> (α815' -> (α822' | α823')))  <!<  ((α784',) -> α785')
//│ ╟── while constraining:  ‹∀ 1. (α364'' -> (α365'' -> (α371'' | α386'')))›  <!<  ((α784',) -> α785')
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α364'' -> (α365'' -> (α371'' | α386'')))››  <!<  ((α784',) -> α785')
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α364'' -> (α365'' -> (α371'' | α386'')))››  <!<  α784'
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α364'' -> (α365'' -> (α371'' | α386'')))››  <!<  α783'
//│ ╟── while constraining:  (‹∀ 0. ‹∀ 1. (α364'' -> (α365'' -> (α371'' | α386'')))››,)  <!<  (α783',)
//│ ╟── while constraining:  (α783' -> (α794' -> (α801' | α802')))  <!<  ((‹∀ 0. ‹∀ 1. (α364'' -> (α365'' -> (α371'' | α386'')))››,) -> α782')
//│ ╟── while constraining:  ‹∀ 1. (α364'' -> (α365'' -> (α371'' | α386'')))›  <!<  ((‹∀ 0. ‹∀ 1. (α364'' -> (α365'' -> (α371'' | α386'')))››,) -> α782')
//│ ╙── while constraining:  ‹∀ 0. ‹∀ 1. (α364'' -> (α365'' -> (α371'' | α386'')))››  <!<  ((‹∀ 0. ‹∀ 1. (α364'' -> (α365'' -> (α371'' | α386'')))››,) -> α782')
//│ ev: error
//│   = [Function (anonymous)]

(ev e, ev e2)
//│ res: (error, error,)
//│    = [ 3, -3 ]


e3 = Add { lhs = Neg { e = Lit {n=1} }; rhs = Lit {n=2} }
//│ e3: Add with {lhs: Neg with {e: Lit & {n: 1}}, rhs: Lit & {n: 2}}
//│   = Add { lhs: Neg { e: Lit { n: 1 } }, rhs: Lit { n: 2 } }

ev e3
//│ res: error
//│    = 1


// * With a continuation, to make `evalN` not need to mention `eval` at all:

def evalN evalN k e = case e of {
  | Neg -> 0 - evalN evalN k e.e
  | _ -> k e
  }
//│ evalN: ('a -> 'b -> 'e -> int & 'a) -> ('c -> 'd & 'b) -> ((Neg with {e: 'e}) | 'c & ~neg) -> (int | 'd)
//│      = [Function: evalN1]


:e
def evalComposed evalComposed = evalN evalN (fun e -> eval evalComposed e)
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?e, ?a, ?b, ?c, ?d, ?f, ?g, ?h, ?i, ?j, ?k. ?c -> ?f -> ?i -> (?b | ?k) <: (forall ?e, ?a, ?b, ?l, ?m, ?n, ?o, ?p, ?q, ?r, ?s. ?l -> ?n -> ?q -> (?b | ?s)) -> ?t` exceeded recursion depth limit (400)
//│ ║  l.258: 	def evalComposed evalComposed = evalN evalN (fun e -> eval evalComposed e)
//│ ║         	                                ^^^^^^^^^^^
//│ ╟── while constraining:  (α1198'' -> (α1200'' -> (α1206'' -> (α1208'' | α1202''))))  <!<  ((α1187'',) -> α1188'')
//│ ╟── while constraining:  ‹∀ 1. (α1031'' -> (α1032'' -> (α1033'' -> (α1040'' | α1042''))))›  <!<  ((α1187'',) -> α1188'')
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α1031'' -> (α1032'' -> (α1033'' -> (α1040'' | α1042''))))››  <!<  ((α1187'',) -> α1188'')
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α1031'' -> (α1032'' -> (α1033'' -> (α1040'' | α1042''))))››  <!<  α1187''
//│ ╟── while constraining:  α1176''  <!<  α1187''
//│ ╟── while constraining:  (α1176'',)  <!<  (α1187'',)
//│ ╟── while constraining:  (α1187'' -> (α1189'' -> (α1195'' -> (α1197'' | α1191''))))  <!<  ((α1176'',) -> α1177'')
//│ ╟── while constraining:  ‹∀ 1. (α1031'' -> (α1032'' -> (α1033'' -> (α1040'' | α1042''))))›  <!<  ((α1176'',) -> α1177'')
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α1031'' -> (α1032'' -> (α1033'' -> (α1040'' | α1042''))))››  <!<  ((α1176'',) -> α1177'')
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α1031'' -> (α1032'' -> (α1033'' -> (α1040'' | α1042''))))››  <!<  α1176''
//│ ╟── while constraining:  α1165''  <!<  α1176''
//│ ╟── while constraining:  (α1165'',)  <!<  (α1176'',)
//│ ╟── while constraining:  (α1176'' -> (α1178'' -> (α1184'' -> (α1186'' | α1180''))))  <!<  ((α1165'',) -> α1166'')
//│ ╟── while constraining:  ‹∀ 1. (α1031'' -> (α1032'' -> (α1033'' -> (α1040'' | α1042''))))›  <!<  ((α1165'',) -> α1166'')
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α1031'' -> (α1032'' -> (α1033'' -> (α1040'' | α1042''))))››  <!<  ((α1165'',) -> α1166'')
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  (α1077'',)  <!<  (α1088'',)
//│ ╟── while constraining:  (α1088'' -> (α1090'' -> (α1096'' -> (α1098'' | α1092''))))  <!<  ((α1077'',) -> α1078'')
//│ ╟── while constraining:  ‹∀ 1. (α1031'' -> (α1032'' -> (α1033'' -> (α1040'' | α1042''))))›  <!<  ((α1077'',) -> α1078'')
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α1031'' -> (α1032'' -> (α1033'' -> (α1040'' | α1042''))))››  <!<  ((α1077'',) -> α1078'')
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α1031'' -> (α1032'' -> (α1033'' -> (α1040'' | α1042''))))››  <!<  α1077''
//│ ╟── while constraining:  α1066''  <!<  α1077''
//│ ╟── while constraining:  (α1066'',)  <!<  (α1077'',)
//│ ╟── while constraining:  (α1077'' -> (α1079'' -> (α1085'' -> (α1087'' | α1081''))))  <!<  ((α1066'',) -> α1067'')
//│ ╟── while constraining:  ‹∀ 1. (α1031'' -> (α1032'' -> (α1033'' -> (α1040'' | α1042''))))›  <!<  ((α1066'',) -> α1067'')
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α1031'' -> (α1032'' -> (α1033'' -> (α1040'' | α1042''))))››  <!<  ((α1066'',) -> α1067'')
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α1031'' -> (α1032'' -> (α1033'' -> (α1040'' | α1042''))))››  <!<  α1066''
//│ ╟── while constraining:  (‹∀ 0. ‹∀ 1. (α1031'' -> (α1032'' -> (α1033'' -> (α1040'' | α1042''))))››,)  <!<  (α1066'',)
//│ ╟── while constraining:  (α1066'' -> (α1068'' -> (α1074'' -> (α1076'' | α1070''))))  <!<  ((‹∀ 0. ‹∀ 1. (α1031'' -> (α1032'' -> (α1033'' -> (α1040'' | α1042''))))››,) -> α1065'')
//│ ╟── while constraining:  ‹∀ 1. (α1031'' -> (α1032'' -> (α1033'' -> (α1040'' | α1042''))))›  <!<  ((‹∀ 0. ‹∀ 1. (α1031'' -> (α1032'' -> (α1033'' -> (α1040'' | α1042''))))››,) -> α1065'')
//│ ╙── while constraining:  ‹∀ 0. ‹∀ 1. (α1031'' -> (α1032'' -> (α1033'' -> (α1040'' | α1042''))))››  <!<  ((‹∀ 0. ‹∀ 1. (α1031'' -> (α1032'' -> (α1033'' -> (α1040'' | α1042''))))››,) -> α1065'')
//│ evalComposed: anything -> error
//│             = [Function: evalComposed]

:e
def evalComposed evalComposed = evalN evalN (eval evalComposed)
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?e, ?a, ?b, ?c, ?d, ?f, ?g, ?h, ?i, ?j, ?k. ?c -> ?f -> ?i -> (?b | ?k) <: (forall ?e, ?a, ?b, ?l, ?m, ?n, ?o, ?p, ?q, ?r, ?s. ?l -> ?n -> ?q -> (?b | ?s)) -> ?t` exceeded recursion depth limit (400)
//│ ║  l.298: 	def evalComposed evalComposed = evalN evalN (eval evalComposed)
//│ ║         	                                ^^^^^^^^^^^
//│ ╟── while constraining:  (α1377'' -> (α1379'' -> (α1385'' -> (α1387'' | α1381''))))  <!<  ((α1366'',) -> α1367'')
//│ ╟── while constraining:  ‹∀ 1. (α1031'' -> (α1032'' -> (α1033'' -> (α1040'' | α1042''))))›  <!<  ((α1366'',) -> α1367'')
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α1031'' -> (α1032'' -> (α1033'' -> (α1040'' | α1042''))))››  <!<  ((α1366'',) -> α1367'')
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α1031'' -> (α1032'' -> (α1033'' -> (α1040'' | α1042''))))››  <!<  α1366''
//│ ╟── while constraining:  α1355''  <!<  α1366''
//│ ╟── while constraining:  (α1355'',)  <!<  (α1366'',)
//│ ╟── while constraining:  (α1366'' -> (α1368'' -> (α1374'' -> (α1376'' | α1370''))))  <!<  ((α1355'',) -> α1356'')
//│ ╟── while constraining:  ‹∀ 1. (α1031'' -> (α1032'' -> (α1033'' -> (α1040'' | α1042''))))›  <!<  ((α1355'',) -> α1356'')
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α1031'' -> (α1032'' -> (α1033'' -> (α1040'' | α1042''))))››  <!<  ((α1355'',) -> α1356'')
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α1031'' -> (α1032'' -> (α1033'' -> (α1040'' | α1042''))))››  <!<  α1355''
//│ ╟── while constraining:  α1344''  <!<  α1355''
//│ ╟── while constraining:  (α1344'',)  <!<  (α1355'',)
//│ ╟── while constraining:  (α1355'' -> (α1357'' -> (α1363'' -> (α1365'' | α1359''))))  <!<  ((α1344'',) -> α1345'')
//│ ╟── while constraining:  ‹∀ 1. (α1031'' -> (α1032'' -> (α1033'' -> (α1040'' | α1042''))))›  <!<  ((α1344'',) -> α1345'')
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α1031'' -> (α1032'' -> (α1033'' -> (α1040'' | α1042''))))››  <!<  ((α1344'',) -> α1345'')
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  (α1256'',)  <!<  (α1267'',)
//│ ╟── while constraining:  (α1267'' -> (α1269'' -> (α1275'' -> (α1277'' | α1271''))))  <!<  ((α1256'',) -> α1257'')
//│ ╟── while constraining:  ‹∀ 1. (α1031'' -> (α1032'' -> (α1033'' -> (α1040'' | α1042''))))›  <!<  ((α1256'',) -> α1257'')
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α1031'' -> (α1032'' -> (α1033'' -> (α1040'' | α1042''))))››  <!<  ((α1256'',) -> α1257'')
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α1031'' -> (α1032'' -> (α1033'' -> (α1040'' | α1042''))))››  <!<  α1256''
//│ ╟── while constraining:  α1245''  <!<  α1256''
//│ ╟── while constraining:  (α1245'',)  <!<  (α1256'',)
//│ ╟── while constraining:  (α1256'' -> (α1258'' -> (α1264'' -> (α1266'' | α1260''))))  <!<  ((α1245'',) -> α1246'')
//│ ╟── while constraining:  ‹∀ 1. (α1031'' -> (α1032'' -> (α1033'' -> (α1040'' | α1042''))))›  <!<  ((α1245'',) -> α1246'')
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α1031'' -> (α1032'' -> (α1033'' -> (α1040'' | α1042''))))››  <!<  ((α1245'',) -> α1246'')
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α1031'' -> (α1032'' -> (α1033'' -> (α1040'' | α1042''))))››  <!<  α1245''
//│ ╟── while constraining:  (‹∀ 0. ‹∀ 1. (α1031'' -> (α1032'' -> (α1033'' -> (α1040'' | α1042''))))››,)  <!<  (α1245'',)
//│ ╟── while constraining:  (α1245'' -> (α1247'' -> (α1253'' -> (α1255'' | α1249''))))  <!<  ((‹∀ 0. ‹∀ 1. (α1031'' -> (α1032'' -> (α1033'' -> (α1040'' | α1042''))))››,) -> α1244'')
//│ ╟── while constraining:  ‹∀ 1. (α1031'' -> (α1032'' -> (α1033'' -> (α1040'' | α1042''))))›  <!<  ((‹∀ 0. ‹∀ 1. (α1031'' -> (α1032'' -> (α1033'' -> (α1040'' | α1042''))))››,) -> α1244'')
//│ ╙── while constraining:  ‹∀ 0. ‹∀ 1. (α1031'' -> (α1032'' -> (α1033'' -> (α1040'' | α1042''))))››  <!<  ((‹∀ 0. ‹∀ 1. (α1031'' -> (α1032'' -> (α1033'' -> (α1040'' | α1042''))))››,) -> α1244'')
//│ evalComposed: ('a -> nothing -> int & 'a) -> error
//│             = [Function: evalComposed1]


:e
// * NOTE: This inferred type is a good example
// *    of the need for an algorithm to tie recursive TV knots and inline the rest;
// *    once we inline, `b` we should get the expected simplified recursive type.
ev2 = evalComposed evalComposed
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?rhs, ?lhs, ?a, ?b, ?c, ?d, ?e, ?f, ?g. ?a -> ?g <: (forall ?rhs, ?lhs, ?h, ?i, ?j, ?k, ?l, ?m, ?n. ?h -> ?n) -> ?o` exceeded recursion depth limit (400)
//│ ║  l.342: 	ev2 = evalComposed evalComposed
//│ ║         	      ^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α1243'' -> α1417'')››  <!<  α1502'
//│ ╟── while constraining:  α1494'  <!<  α1502'
//│ ╟── while constraining:  (α1494',)  <!<  (α1502',)
//│ ╟── while constraining:  (α1502' -> α1510')  <!<  ((α1494',) -> α1495')
//│ ╟── while constraining:  ‹∀ 1. (α1243'' -> α1417'')›  <!<  ((α1494',) -> α1495')
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α1243'' -> α1417'')››  <!<  ((α1494',) -> α1495')
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α1243'' -> α1417'')››  <!<  α1494'
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α1243'' -> α1417'')››  <!<  α1493'
//│ ╟── while constraining:  α1485'  <!<  α1493'
//│ ╟── while constraining:  (α1485',)  <!<  (α1493',)
//│ ╟── while constraining:  (α1493' -> α1501')  <!<  ((α1485',) -> α1486')
//│ ╟── while constraining:  ‹∀ 1. (α1243'' -> α1417'')›  <!<  ((α1485',) -> α1486')
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α1243'' -> α1417'')››  <!<  ((α1485',) -> α1486')
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α1243'' -> α1417'')››  <!<  α1485'
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α1243'' -> α1417'')››  <!<  α1484'
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  ‹∀ 1. (α1243'' -> α1417'')›  <!<  ((α1440',) -> α1441')
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α1243'' -> α1417'')››  <!<  ((α1440',) -> α1441')
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α1243'' -> α1417'')››  <!<  α1440'
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α1243'' -> α1417'')››  <!<  α1439'
//│ ╟── while constraining:  α1431'  <!<  α1439'
//│ ╟── while constraining:  (α1431',)  <!<  (α1439',)
//│ ╟── while constraining:  (α1439' -> α1447')  <!<  ((α1431',) -> α1432')
//│ ╟── while constraining:  ‹∀ 1. (α1243'' -> α1417'')›  <!<  ((α1431',) -> α1432')
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α1243'' -> α1417'')››  <!<  ((α1431',) -> α1432')
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α1243'' -> α1417'')››  <!<  α1431'
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α1243'' -> α1417'')››  <!<  α1430'
//│ ╟── while constraining:  (‹∀ 0. ‹∀ 1. (α1243'' -> α1417'')››,)  <!<  (α1430',)
//│ ╟── while constraining:  (α1430' -> α1438')  <!<  ((‹∀ 0. ‹∀ 1. (α1243'' -> α1417'')››,) -> α1429')
//│ ╟── while constraining:  ‹∀ 1. (α1243'' -> α1417'')›  <!<  ((‹∀ 0. ‹∀ 1. (α1243'' -> α1417'')››,) -> α1429')
//│ ╙── while constraining:  ‹∀ 0. ‹∀ 1. (α1243'' -> α1417'')››  <!<  ((‹∀ 0. ‹∀ 1. (α1243'' -> α1417'')››,) -> α1429')
//│ ev2: error
//│    = [Function (anonymous)]

ev2 e3
//│ res: error
//│    = 1


def ev2_ty: (Add & { lhs: 'a; rhs: 'a } | Lit | Neg & { e: 'a } as 'a) -> int
//│ ev2_ty: 'a -> int
//│   where
//│     'a <: (Add with {lhs: 'a, rhs: 'a}) | Lit | (Neg with {e: 'a})
//│       = <missing implementation>

ev2_ty = ev2
//│ error
//│   <:  ev2_ty:
//│ 'a -> int
//│   where
//│     'a <: (Add with {lhs: 'a, rhs: 'a}) | Lit | (Neg with {e: 'a})
//│       = [Function (anonymous)]

