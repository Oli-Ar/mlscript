
class Expr
class Lit: Expr & { val: int }
class Add: Expr & { lhs: Expr; rhs: Expr }
//│ Defined class Expr
//│ Defined class Lit
//│ Defined class Add

rec def eval x = case x of {
  Lit -> x.val
  | Add -> eval x.lhs + eval x.rhs
  }
//│ eval: 'rhs -> int
//│   where
//│     'rhs <: (Add with {lhs: 'rhs, rhs: 'rhs}) | Lit
//│     = [Function: eval]

def eval eval x = case x of {
  Lit -> x.val
  | Add -> eval eval x.lhs + eval eval x.rhs
  }
//│ eval: ('a -> (forall 'b, 'rhs. ('rhs
//│   where
//│     'b <: {rhs: 'rhs})) -> int & 'a -> (forall 'b, 'lhs. ('lhs
//│   where
//│     'b <: {lhs: 'lhs})) -> int & 'a) -> (Add & 'b | (Lit with {val: 'val})) -> (int | 'val)
//│     = [Function: eval1]

:e
eval eval
//│ ╔══[ERROR] Cyclic-looking constraint while typing application
//│ ║  l.30: 	eval eval
//│ ║        	^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 0. (α50' -> (α51' -> (val53' | α64')))›  <:  α102    PolymorphicType  TypeVariable
//│ ╙──  ... looks like:  ‹∀ 0. (α50' -> (α51' -> (val53' | α64')))›  <:  α50'
//│ res: ((Add with {lhs: Add | Lit, rhs: Add | Lit}) | (Lit with {val: 'val})) -> (int | 'val) | error
//│    = [Function (anonymous)]

class Neg: Expr & { underlying: Expr }
//│ Defined class Neg

def evalN evalN x = case x of {
  Neg -> 0 - (evalN evalN x.underlying)
  | _ -> eval evalN x
  }
//│ evalN: ('a -> (forall 'b, 'underlying. ('underlying
//│   where
//│     'b <: {underlying: 'underlying})) -> int & 'a -> (forall 'c, 'rhs. ('rhs
//│   where
//│     'c <: {rhs: 'rhs})) -> int & 'a -> (forall 'c, 'lhs. ('lhs
//│   where
//│     'c <: {lhs: 'lhs})) -> int & 'a) -> (Add & 'c | (Lit with {val: 'val}) | Neg & 'b) -> (int | 'val)
//│      = [Function: evalN]

:e
evalN evalN
//│ ╔══[ERROR] Cyclic-looking constraint while typing application
//│ ║  l.57: 	evalN evalN
//│ ║        	^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 0. (α146' -> (α147' -> (α153' | α170')))›  <:  α228    PolymorphicType  TypeVariable
//│ ╙──  ... looks like:  ‹∀ 0. (α146' -> (α147' -> (α153' | α170')))›  <:  α146'
//│ res: ((Add with {lhs: Add | Lit | Neg, rhs: Add | Lit | Neg}) | (Lit with {val: 'val}) | (Neg with {underlying: Add | Lit | Neg})) -> (int | 'val) | error
//│    = [Function (anonymous)]

e = Add{lhs = Lit{val = 1}; rhs = Neg{underlying = Lit{val = 2}}}
//│ e: Add with {lhs: Lit & {val: 1}, rhs: Neg with {underlying: Lit & {val: 2}}}
//│  = Add { lhs: Lit { val: 1 }, rhs: Neg { underlying: Lit { val: 2 } } }

:e
evalN evalN e
//│ ╔══[ERROR] Cyclic-looking constraint while typing application
//│ ║  l.72: 	evalN evalN e
//│ ║        	^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 0. (α146' -> (α147' -> (α153' | α170')))›  <:  α372    PolymorphicType  TypeVariable
//│ ╙──  ... looks like:  ‹∀ 0. (α146' -> (α147' -> (α153' | α170')))›  <:  α146'
//│ res: error | int
//│    = -1




// === === === ERROR CASES === === === //



:ShowRelativeLineNums
:AllowTypeErrors



:e
def evalN2 evalN2 x = case x of {
  Neg -> 0 - (evalN2 evalN2 x.underlying)
  | _ -> eval eval x
  }
//│ ╔══[ERROR] Cyclic-looking constraint while typing application
//│ ║  l.+3: 	  | _ -> eval eval x
//│ ║        	         ^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 0. (α50' -> (α51' -> (val53' | α64')))›  <:  α474'    PolymorphicType  TypeVariable
//│ ╙──  ... looks like:  ‹∀ 0. (α50' -> (α51' -> (val53' | α64')))›  <:  α50'
//│ evalN2: ('a -> (forall 'b, 'underlying. ('underlying
//│   where
//│     'b <: {underlying: 'underlying})) -> int & 'a) -> ((Add with {lhs: Add | Lit, rhs: Add | Lit}) | (Lit with {val: 'val}) | Neg & 'b) -> (error | int | 'val)

:e
evalN2 evalN2 e
//│ ╔══[ERROR] Cyclic-looking constraint while typing application
//│ ║  l.+1: 	evalN2 evalN2 e
//│ ║        	^^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 0. (α450' -> (α451' -> (α457' | α500')))›  <:  α554    PolymorphicType  TypeVariable
//│ ╙──  ... looks like:  ‹∀ 0. (α450' -> (α451' -> (α457' | α500')))›  <:  α450'
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	evalN2 evalN2 e
//│ ║        	^^^^^^^^^^^^^^^
//│ ╟── application of type `Neg & {underlying: ?underlying}` does not match type `Add & ?a | Lit & ?b`
//│ ║  l.67: 	e = Add{lhs = Lit{val = 1}; rhs = Neg{underlying = Lit{val = 2}}}
//│ ║        	                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.18: 	def eval eval x = case x of {
//│ ║        	                       ^
//│ ╟── from field selection:
//│ ║  l.20: 	  | Add -> eval eval x.lhs + eval eval x.rhs
//│ ╙──      	                                       ^^^^^
//│ res: error | int


def evalN3 evalN3 x = case x of {
  Neg -> 0 - (evalN2 x.underlying)
  | _ -> eval evalN3 x
  }
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.+2: 	  Neg -> 0 - (evalN2 x.underlying)
//│ ║        	         ^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── function of type `?a -> (?b | ?c)` is not an instance of type `int`
//│ ║  l.95: 	def evalN2 evalN2 x = case x of {
//│ ║        	                  ^^^^^^^^^^^^^^^
//│ ║  l.96: 	  Neg -> 0 - (evalN2 evalN2 x.underlying)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.97: 	  | _ -> eval eval x
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ║  l.98: 	  }
//│ ║        	^^^
//│ ╟── but it flows into application with expected type `int`
//│ ║  l.+2: 	  Neg -> 0 - (evalN2 x.underlying)
//│ ╙──      	              ^^^^^^^^^^^^^^^^^^^
//│ evalN3: ('a -> (forall 'b, 'rhs. ('rhs
//│   where
//│     'b <: {rhs: 'rhs})) -> int & 'a -> (forall 'b, 'lhs. ('lhs
//│   where
//│     'b <: {lhs: 'lhs})) -> int & 'a) -> (Add & 'b | (Lit with {val: 'val}) | (Neg with {underlying: (forall 'c, 'underlying. ('underlying
//│   where
//│     'c <: {underlying: 'underlying})) -> (forall 'd, 'underlying0. ('underlying0
//│   where
//│     'd <: {underlying: 'underlying0})) -> int}) & 'c) -> (error | int | 'val)

def evalN3 evalN3 x = case x of {
  Neg -> 0 - (evalN3 x.underlying)
  | _ -> eval evalN3 x
  }
//│ evalN3: ((forall 'a, 'underlying. ('underlying
//│   where
//│     'a <: {underlying: 'underlying})) -> int & 'b -> (forall 'c, 'rhs. ('rhs
//│   where
//│     'c <: {rhs: 'rhs})) -> int & 'b -> (forall 'c, 'lhs. ('lhs
//│   where
//│     'c <: {lhs: 'lhs})) -> int & 'b) -> (Add & 'c | (Lit with {val: 'val}) | Neg & 'a) -> (int | 'val)

:e
evalN3 evalN3 e
//│ ╔══[ERROR] Cyclic-looking constraint while typing application
//│ ║  l.+1: 	evalN3 evalN3 e
//│ ║        	^^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 0. (α719' -> (α720' -> (α725' | α741')))›  <:  α797    PolymorphicType  TypeVariable
//│ ╙──  ... looks like:  ‹∀ 0. (α719' -> (α720' -> (α725' | α741')))›  <:  α719'
//│ res: error | int


