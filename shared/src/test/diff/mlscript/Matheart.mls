// testing cases for various `case` in constrainIndex 
("haha", 1)[0]
//│ res: "haha"
//│    = 'haha'

:e
(1, 2, 3)[true]
//│ ╔══[ERROR] The receiver and index should have the correct type
//│ ╙──
//│ res: error
//│    = undefined

:e
(1, 2, 3)[false]
//│ ╔══[ERROR] The receiver and index should have the correct type
//│ ╙──
//│ res: error
//│    = undefined

:e
def my_str: string
my_str = "h"
(1, 2, 3)[my_str]
//│ my_str: string
//│       = <missing implementation>
//│ "h"
//│   <:  my_str:
//│ string
//│       = 'h'
//│ ╔══[ERROR] The receiver and index should have the correct type
//│ ╙──
//│ res: error
//│    = undefined

:e
def my_a = false : bool
(1, 2, 3)[my_a]
//│ my_a: bool
//│     = false
//│ ╔══[ERROR] The receiver and index should have the correct type
//│ ╙──
//│ res: error
//│    = undefined

:e
(1, 2, 3)[false: bool]
//│ ╔══[ERROR] The receiver and index should have the correct type
//│ ╙──
//│ res: error
//│    = undefined

:e
(1, 2, 3)[false || true]
//│ ╔══[ERROR] The receiver and index should have the correct type
//│ ╙──
//│ res: error
//│    = undefined

:e
(1, 2, 3)["true"]
//│ ╔══[ERROR] The receiver and index should have the correct type
//│ ╙──
//│ res: error
//│    = undefined

:e
def s: string
(1, 2, 3)[s]
//│ s: string
//│  = <missing implementation>
//│ ╔══[ERROR] The receiver and index should have the correct type
//│ ╙──
//│ res: error
//│    = <no result>
//│      s is not implemented

:e
(1, 2, 3)[concat "true"  "bruh"]
//│ ╔══[ERROR] The receiver and index should have the correct type
//│ ╙──
//│ res: error
//│    = undefined

concat "true" "bruh"
//│ res: string
//│    = 'truebruh'

:e
(1, 2, 3)["haha"]
//│ ╔══[ERROR] The receiver and index should have the correct type
//│ ╙──
//│ res: error
//│    = undefined

:pe
(1, 2, 3)[-10]
//│ /!\ Parse error: Expected end-of-input:1:10, found "[-10];" at l.96:10: (1, 2, 3)[-10]


(1, 2, 3)[0]
//│ res: 1
//│    = 1

(1, 2, 3)[1]
//│ res: 2
//│    = 2

:e
(1, 2, 3)[3]
//│ ╔══[ERROR] Out of range!
//│ ║  l.109: 	(1, 2, 3)[3]
//│ ╙──       	^^^^^^^^^
//│ res: error
//│    = undefined

a = 2
(1, 2, 3)[a]
//│ a: 2
//│  = 2
//│ res: 3
//│    = 3

a = 1 + 1
(1, 2, 3)[a]
//│ a: int
//│  = 2
//│ res: 1 | 2 | 3 | undefined
//│    = 3

(1, 2, 3)[1 + 1]
//│ res: 1 | 2 | 3 | undefined
//│    = 3

(1 + 1, 2, 3)[0]
//│ res: int
//│    = 2

(1, "haha")[0]
//│ res: 1
//│    = 1

(1, "haha")[1]
//│ res: "haha"
//│    = 'haha'

zh = "你好"
//│ zh: "你好"
//│   = '′0⊐9'

ch = "मनीष منش" 
//│ ch: "मनीष منش"
//│   = '⍐⍄⍨⍙ ᘅᘆᖈ'

:e
"foo"[2]
//│ ╔══[ERROR] Type mismatch in array access:
//│ ║  l.155: 	"foo"[2]
//│ ║         	^^^^^^^^
//│ ╟── string literal of type `"foo"` does not match type `Array[~undefined]`
//│ ║  l.155: 	"foo"[2]
//│ ╙──       	^^^^^
//│ ╔══[ERROR] mlscript doesn't allow string indexing
//│ ║  l.155: 	"foo"[2]
//│ ╙──       	^^^^^
//│ res: error
//│    = 'o'

:e
"foo"[3]
//│ ╔══[ERROR] Type mismatch in array access:
//│ ║  l.169: 	"foo"[3]
//│ ║         	^^^^^^^^
//│ ╟── string literal of type `"foo"` does not match type `Array[~undefined]`
//│ ║  l.169: 	"foo"[3]
//│ ╙──       	^^^^^
//│ ╔══[ERROR] mlscript doesn't allow string indexing
//│ ║  l.169: 	"foo"[3]
//│ ╙──       	^^^^^
//│ res: error
//│    = undefined

('f', 'o', 'o')[2]
//│ res: "o"
//│    = 'o'

(1, 2, 3)[(1, 2, 3)[0]]
//│ res: 2
//│    = 2

(1, 2, 3)[(1, 2, 3)[(1, 2, 3)[0]]]
//│ res: 3
//│    = 3

:e
(1, 2, 3)[(1, 2, 3)[(1, 2, 3)[(1, 2, 3)[0]]]]
//│ ╔══[ERROR] Out of range!
//│ ║  l.195: 	(1, 2, 3)[(1, 2, 3)[(1, 2, 3)[(1, 2, 3)[0]]]]
//│ ╙──       	^^^^^^^^^
//│ res: error
//│    = undefined

:e
:ge
(1, 2, 3)[k]
//│ ╔══[ERROR] identifier not found: k
//│ ║  l.204: 	(1, 2, 3)[k]
//│ ╙──       	          ^
//│ res: error
//│ Code generation encountered an error:
//│   unresolved symbol k

:e
3[1]
//│ ╔══[ERROR] Type mismatch in array access:
//│ ║  l.213: 	3[1]
//│ ║         	^^^^
//│ ╟── integer literal of type `3` does not match type `Array[~undefined]`
//│ ║  l.213: 	3[1]
//│ ╙──       	^
//│ ╔══[ERROR] The receiver and index should have the correct type
//│ ╙──
//│ res: error
//│    = undefined

:e
def k: int
k[1]
//│ k: int
//│  = <missing implementation>
//│ ╔══[ERROR] Type mismatch in array access:
//│ ║  l.227: 	k[1]
//│ ║         	^^^^
//│ ╟── type `int` does not match type `Array[~undefined]`
//│ ║  l.226: 	def k: int
//│ ║         	       ^^^
//│ ╟── but it flows into reference with expected type `Array[~undefined]`
//│ ║  l.227: 	k[1]
//│ ╙──       	^
//│ ╔══[ERROR] The receiver and index should have the correct type
//│ ╙──
//│ res: error
//│    = <no result>
//│      k is not implemented

:e
(1 + 1)[0]
//│ ╔══[ERROR] Type mismatch in array access:
//│ ║  l.246: 	(1 + 1)[0]
//│ ║         	^^^^^^^^^^
//│ ╟── operator application of type `int` does not match type `Array[~undefined]`
//│ ║  l.246: 	(1 + 1)[0]
//│ ╙──       	 ^^^^^
//│ ╔══[ERROR] The receiver and index should have the correct type
//│ ╙──
//│ res: error
//│    = undefined

def k: int
k = 0
(1, 2, 3)[k]
//│ k: int
//│  = <missing implementation>
//│ 0
//│   <:  k:
//│ int
//│  = 0
//│ res: 1 | 2 | 3 | undefined
//│    = 1

:e
def k = 1 + 1: int
def i: int
k[i + 1]
//│ int
//│   <:  k:
//│ int
//│  = 2
//│ i: int
//│  = <missing implementation>
//│ ╔══[ERROR] Type mismatch in array access:
//│ ║  l.273: 	k[i + 1]
//│ ║         	^^^^^^^^
//│ ╟── type `int` does not match type `Array[~undefined]`
//│ ║  l.258: 	def k: int
//│ ║         	       ^^^
//│ ╟── but it flows into reference with expected type `Array[~undefined]`
//│ ║  l.273: 	k[i + 1]
//│ ╙──       	^
//│ ╔══[ERROR] The receiver and index should have the correct type
//│ ╙──
//│ res: error
//│    = <no result>
//│      i is not implemented


def haha : Array[string]
haha = ("hello", "world", "!")
//│ haha: Array[string]
//│     = <missing implementation>
//│ ("hello", "world", "!",)
//│   <:  haha:
//│ Array[string]
//│     = [ 'hello', 'world', '!' ]

:pe
haha[-1]
//│ /!\ Parse error: Expected end-of-input:1:5, found "[-1];" at l.306:5: haha[-1]

haha[4]
//│ res: string | undefined
//│    = undefined

haha[2 + 2]
//│ res: string | undefined
//│    = undefined

def k: int
k = 0
haha[k]
//│ k: int
//│  = <missing implementation>
//│ 0
//│   <:  k:
//│ int
//│  = 0
//│ res: string | undefined
//│    = 'hello'

def haha2 : Array[int] // arraybase
haha2[0]
//│ haha2: Array[int]
//│      = <missing implementation>

:e
my_record = {x = (1,2); y = 2}
my_record.x[my_record.y]
//│ my_record: {x: (1, 2,), y: 2}
//│          = { x: [ 1, 2 ], y: 2 }
//│ ╔══[ERROR] Out of range!
//│ ║  l.335: 	my_record = {x = (1,2); y = 2}
//│ ╙──       	                 ^^^^^
//│ res: error
//│    = undefined

:e
def my_func x = (1, 2, 3)
my_func[0]
//│ my_func: anything -> (1, 2, 3,)
//│        = [Function: my_func]
//│ ╔══[ERROR] Type mismatch in array access:
//│ ║  l.347: 	my_func[0]
//│ ║         	^^^^^^^^^^
//│ ╟── function of type `?a -> (1, 2, 3,)` does not match type `Array[~undefined]`
//│ ║  l.346: 	def my_func x = (1, 2, 3)
//│ ║         	            ^^^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `Array[~undefined]`
//│ ║  l.347: 	my_func[0]
//│ ╙──       	^^^^^^^
//│ ╔══[ERROR] The receiver and index should have the correct type
//│ ╙──
//│ res: error
//│    = undefined


(my_func 3)[0]
//│ res: 1
//│    = 1

:e
(1, 2, 3)[my_func 0]
//│ ╔══[ERROR] The receiver and index should have the correct type
//│ ╙──
//│ res: error
//│    = undefined

:e
(1, 2, 3)[(1, 2)]
//│ ╔══[ERROR] The receiver and index should have the correct type
//│ ╙──
//│ res: error
//│    = undefined

:e
(1, 2, 3)[my_func]
//│ ╔══[ERROR] The receiver and index should have the correct type
//│ ╙──
//│ res: error
//│    = undefined

(1, 2, 3)[(my_func 3)[0]]
//│ res: 2
//│    = 2

pick_arr = (1, 3, 0, 2)
rec def pick n m = if m > 0 then (pick pick_arr[n] (m-1)) else n
//│ pick_arr: (1, 3, 0, 2,)
//│         = [ 1, 3, 0, 2 ]
//│ pick: 'a -> int -> 'a
//│     = [Function: pick]

pick 1 5
//│ res: 0 | 1 | 2 | 3
//│    = 3

(case (1) of {1 ->  (1, 2) | 2 -> (3, 4) })[0]
//│ res: 1 | 3
//│    = 1

a = if true then (0,1) else (3,4,5)
//│ a: Array[0 | 1 | 3 | 4 | 5] & {_1: 0 | 3, _2: 1 | 4}
//│  = [ 0, 1 ]

i = if true then 0 else 1
//│ 0 | 1
//│   <:  i:
//│ int
//│  = 0

a[i]
//│ res: 0 | 1 | 3 | 4 | 5 | undefined
//│    = 0

def a: (1,2) | (3,4,5)
//│ a: Array[1 | 2 | 3 | 4 | 5] & {_1: 1 | 3, _2: 2 | 4}
//│  = <missing implementation>

def i: 0 | 1
//│ i: 0 | 1
//│  = <missing implementation>

a[0]
//│ res: 1 | 3
//│    = <no result>
//│      a is not implemented


a[i]
//│ res: 1 | 2 | 3 | 4
//│    = <no result>
//│      a is not implemented

(1, 2, 3)[i]
//│ res: 1 | 2
//│    = <no result>
//│      i is not implemented

def a:  (0, 1, 2) & {x: 1} // {x: 1} fieldtype
//│ a: (0, 1, 2,) & {x: 1}
//│  = <missing implementation>

// FIXME
a[0] 
//│ ╔══[ERROR] Intersection type to be implemented
//│ ║  l.447: 	def a:  (0, 1, 2) & {x: 1} // {x: 1} fieldtype
//│ ╙──       	        ^^^^^^^^^^^^^^^^^^
//│ res: error
//│    = <no result>
//│      a is not implemented

:e
({x = 1} & {y = 1}).x
//│ ╔══[ERROR] Type mismatch in field selection:
//│ ║  l.461: 	({x = 1} & {y = 1}).x
//│ ║         	^^^^^^^^^^^^^^^^^^^^^
//│ ╟── receiver of type `{_1: {x: 1, y: 1}}` does not have field 'x'
//│ ║  l.461: 	({x = 1} & {y = 1}).x
//│ ╙──       	^^^^^^^^^^^^^^^^^^^
//│ res: error
//│    = undefined

:e
({x = 1})[0]
//│ ╔══[ERROR] Type mismatch in array access:
//│ ║  l.472: 	({x = 1})[0]
//│ ║         	^^^^^^^^^^^^
//│ ╟── record literal of type `{x: 1}` does not match type `Array[~undefined]`
//│ ║  l.472: 	({x = 1})[0]
//│ ╙──       	 ^^^^^^^
//│ ╔══[ERROR] The receiver and index should have the correct type
//│ ╙──
//│ res: error
//│    = undefined

def ar: (Array[0 | 1] & Array[1 | 2])
//│ ar: Array[1]
//│   = <missing implementation>

def foo x y = let inner a b = (x[a], b[y]) in inner
//│ foo: Array[~undefined] -> anything -> anything -> Array[~undefined] -> (nothing, nothing,)
//│    = [Function: foo]

kk = (0: int): int
//│ kk: int
//│   = 0

(1, 2, 3)[kk]
//│ res: 1 | 2 | 3 | undefined
//│    = 1


def foo x = x[1] // modify the Simplifier to adapt tp new change
//│ foo: Array[~undefined] -> nothing
//│    = [Function: foo1]


foo ((1, 2, 3))
//│ res: 2
//│    = 2

nw = (1, 2, 3, 4, 5)
def chose i = nw[i]
//│ nw: (1, 2, 3, 4, 5,)
//│   = [ 1, 2, 3, 4, 5 ]
//│ chose: anything -> nothing
//│      = [Function: chose]

chose 2
//│ res: 3
//│    = 3
