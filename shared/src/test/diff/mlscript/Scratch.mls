// testing cases for various `case` in constrainIndex 
true
//│ res: true
//│    = true

0.2 + 0.1
//│ /!\ Parse error: Expected (Index ~ filter | Index ~ "("):1:3, found "2 + 0.1;" at l.6:3: 0.2 + 0.1

:d
1
//│ 0. Typing term 1
//│ 0. : 1<int,number>
//│ ⬤ Typed as: 1<int,number>
//│  where: 
//│ res: 1
//│    = 1

(1, 2, 3)[true]
//│ ╔══[ERROR] The index must be an integer
//│ ╙──
//│ res: error
//│    = undefined


(1, 2, 3)[false]
//│ ╔══[ERROR] The index must be an integer
//│ ╙──
//│ res: error
//│    = undefined


def a = false
(1, 2, 3)[a]
//│ a: false
//│  = false
//│ ╔══[ERROR] The index must be an integer
//│ ╙──
//│ res: error
//│    = undefined

:d
def a = false : bool
(1, 2, 3)[a]
//│ 1. Typing term false : TypeName(bool)
//│ | 1. Typing term false
//│ | 1. : false<bool>
//│ | 1. Typing type TypeName(bool)
//│ | | vars=Map() newDefsInfo=Map()
//│ | => Bool | 
//│ | CONSTRAIN false<bool> <! Bool
//│ |   where 
//│ | C false<bool> <! Bool    (0)
//│ | | C false<bool> <! bool<>    (1)
//│ 1. : Bool
//│ ⬤ Typed as: Bool
//│  where: 
//│ a: bool
//│  = false
//│ 0. Typing term (1, 2, 3,)[a]
//│ | 0. Typing term (1, 2, 3,)
//│ | | 0. Typing term 1
//│ | | 0. : 1<int,number>
//│ | | 0. Typing term 2
//│ | | 0. : 2<int,number>
//│ | | 0. Typing term 3
//│ | | 0. : 3<int,number>
//│ | 0. : (1<int,number>, 2<int,number>, 3<int,number>,)
//│ | 0. Typing term a
//│ | 0. : Bool
//│ | CONSTRAIN (1<int,number>, 2<int,number>, 3<int,number>,) <! Array‹~(Undefined)›
//│ |   where 
//│ | C (1<int,number>, 2<int,number>, 3<int,number>,) <! Array‹~(Undefined)›    (0)
//│ | | C ((1<int,number> | 2<int,number>) | 3<int,number>) <! ~(Undefined)    (1)
//│ | | | C (1<int,number> | 2<int,number>) <! ~(Undefined)    (2)
//│ | | | | C 1<int,number> <! ~(Undefined)    (3)
//│ | | | | | ARGH  DNF(1<int,number>{})  <!  DNF(~(undefined<>))
//│ | | | | | | Consider 1<int,number>{} <: DNF(~(undefined<>))
//│ | | | | | | Possible: List(~(undefined<>))
//│ | | | | | | A  1<int,number>{}  %  List()  <!  List(~(undefined<>))  %  ⊥
//│ | | | | | | | A  1<int,number>{}  %  List(undefined<>)  <!  List()  %  ⊥
//│ | | | | | | | | OK  1<int,number>{} & undefined<>  =:=  ⊥
//│ | | | | C 2<int,number> <! ~(Undefined)    (4)
//│ | | | | | ARGH  DNF(2<int,number>{})  <!  DNF(~(undefined<>))
//│ | | | | | | Consider 2<int,number>{} <: DNF(~(undefined<>))
//│ | | | | | | Possible: List(~(undefined<>))
//│ | | | | | | A  2<int,number>{}  %  List()  <!  List(~(undefined<>))  %  ⊥
//│ | | | | | | | A  2<int,number>{}  %  List(undefined<>)  <!  List()  %  ⊥
//│ | | | | | | | | OK  2<int,number>{} & undefined<>  =:=  ⊥
//│ | | | C 3<int,number> <! ~(Undefined)    (5)
//│ | | | | ARGH  DNF(3<int,number>{})  <!  DNF(~(undefined<>))
//│ | | | | | Consider 3<int,number>{} <: DNF(~(undefined<>))
//│ | | | | | Possible: List(~(undefined<>))
//│ | | | | | A  3<int,number>{}  %  List()  <!  List(~(undefined<>))  %  ⊥
//│ | | | | | | A  3<int,number>{}  %  List(undefined<>)  <!  List()  %  ⊥
//│ | | | | | | | OK  3<int,number>{} & undefined<>  =:=  ⊥
//│ | 0. Receiver: (1<int,number>, 2<int,number>, 3<int,number>,), Index: Bool
//│ ╔══[ERROR] The index must be an integer
//│ ║  l.42: 	def a = false : bool
//│ ╙──      	                ^^^^
//│ | ==> error<>
//│ 0. : error<>
//│ ⬤ Typed as: error<>
//│  where: 
//│ res: error
//│    = undefined


(1, 2, 3)[false: bool]
//│ ╔══[ERROR] The index must be an integer
//│ ║  l.108: 	(1, 2, 3)[false: bool]
//│ ╙──       	                 ^^^^
//│ res: error
//│    = undefined

(1, 2, 3)[false || true]
//│ ╔══[WARNING] Get into this case 2!
//│ ║  l.115: 	(1, 2, 3)[false || true]
//│ ╙──       	          ^^^^^^^^^^^^^
//│ ╔══[ERROR] The index must be an integer
//│ ╙──
//│ res: error
//│    = undefined

a
//│ res: bool
//│    = false

(1, 2, 3)["true"]
//│ ╔══[ERROR] The index must be an integer
//│ ║  l.128: 	(1, 2, 3)["true"]
//│ ╙──       	          ^^^^^^
//│ res: error
//│    = undefined

def s: string
(1, 2, 3)[s]
//│ s: string
//│  = <missing implementation>
//│ ╔══[ERROR] The index must be an integer
//│ ║  l.135: 	def s: string
//│ ╙──       	       ^^^^^^
//│ res: error
//│    = <no result>
//│      s is not implemented

:d
(1, 2, 3)[concat "true"  "bruh"]
//│ 0. Typing term (1, 2, 3,)[((concat ("true",)) ("bruh",))]
//│ | 0. Typing term (1, 2, 3,)
//│ | | 0. Typing term 1
//│ | | 0. : 1<int,number>
//│ | | 0. Typing term 2
//│ | | 0. : 2<int,number>
//│ | | 0. Typing term 3
//│ | | 0. : 3<int,number>
//│ | 0. : (1<int,number>, 2<int,number>, 3<int,number>,)
//│ | 0. Typing term ((concat ("true",)) ("bruh",))
//│ | | 0. Typing term (concat ("true",))
//│ | | | 0. Typing term concat
//│ | | | 0. : (string<> -> (string<> -> string<>))
//│ | | | 0. Typing term ("true",)
//│ | | | | 0. Typing term "true"
//│ | | | | 0. : "true"<string>
//│ | | | 0. : ("true"<string>,)
//│ | | | CONSTRAIN (string<> -> (string<> -> string<>)) <! ("true"<string> -> α25 [indexedIn: List(), indexedBy: List()])
//│ | | |   where 
//│ | | | C (string<> -> (string<> -> string<>)) <! ("true"<string> -> α25 [indexedIn: List(), indexedBy: List()])    (0)
//│ | | | | C ("true"<string>,) <! (string<>,)    (1)
//│ | | | | | C "true"<string> <! string<>    (2)
//│ | | | | C (string<> -> string<>) <! α25 [indexedIn: List(), indexedBy: List()]    (3)
//│ | | 0. : α25 [indexedIn: List(), indexedBy: List()]
//│ | | 0. Typing term ("bruh",)
//│ | | | 0. Typing term "bruh"
//│ | | | 0. : "bruh"<string>
//│ | | 0. : ("bruh"<string>,)
//│ | | CONSTRAIN α25 [indexedIn: List(), indexedBy: List()] <! ("bruh"<string> -> α26 [indexedIn: List(), indexedBy: List()])
//│ | |   where 
//│ 		α25 [indexedIn: List(), indexedBy: List()] :> (string<> -> string<>)
//│ | | C α25 [indexedIn: List(), indexedBy: List()] <! ("bruh"<string> -> α26 [indexedIn: List(), indexedBy: List()])    (0)
//│ | | | C (string<> -> string<>) <! ("bruh"<string> -> α26 [indexedIn: List(), indexedBy: List()])    (1)
//│ | | | | C ("bruh"<string>,) <! (string<>,)    (2)
//│ | | | | | C "bruh"<string> <! string<>    (3)
//│ | | | | C string<> <! α26 [indexedIn: List(), indexedBy: List()]    (4)
//│ | 0. : α26 [indexedIn: List(), indexedBy: List()]
//│ | CONSTRAIN (1<int,number>, 2<int,number>, 3<int,number>,) <! Array‹~(Undefined)›
//│ |   where 
//│ | C (1<int,number>, 2<int,number>, 3<int,number>,) <! Array‹~(Undefined)›    (0)
//│ | | C ((1<int,number> | 2<int,number>) | 3<int,number>) <! ~(Undefined)    (1)
//│ | | | C (1<int,number> | 2<int,number>) <! ~(Undefined)    (2)
//│ | | | | C 1<int,number> <! ~(Undefined)    (3)
//│ | | | | | ARGH  DNF(1<int,number>{})  <!  DNF(~(undefined<>))
//│ | | | | | | Consider 1<int,number>{} <: DNF(~(undefined<>))
//│ | | | | | | Possible: List(~(undefined<>))
//│ | | | | | | A  1<int,number>{}  %  List()  <!  List(~(undefined<>))  %  ⊥
//│ | | | | | | | A  1<int,number>{}  %  List(undefined<>)  <!  List()  %  ⊥
//│ | | | | | | | | OK  1<int,number>{} & undefined<>  =:=  ⊥
//│ | | | | C 2<int,number> <! ~(Undefined)    (4)
//│ | | | | | ARGH  DNF(2<int,number>{})  <!  DNF(~(undefined<>))
//│ | | | | | | Consider 2<int,number>{} <: DNF(~(undefined<>))
//│ | | | | | | Possible: List(~(undefined<>))
//│ | | | | | | A  2<int,number>{}  %  List()  <!  List(~(undefined<>))  %  ⊥
//│ | | | | | | | A  2<int,number>{}  %  List(undefined<>)  <!  List()  %  ⊥
//│ | | | | | | | | OK  2<int,number>{} & undefined<>  =:=  ⊥
//│ | | | C 3<int,number> <! ~(Undefined)    (5)
//│ | | | | ARGH  DNF(3<int,number>{})  <!  DNF(~(undefined<>))
//│ | | | | | Consider 3<int,number>{} <: DNF(~(undefined<>))
//│ | | | | | Possible: List(~(undefined<>))
//│ | | | | | A  3<int,number>{}  %  List()  <!  List(~(undefined<>))  %  ⊥
//│ | | | | | | A  3<int,number>{}  %  List(undefined<>)  <!  List()  %  ⊥
//│ | | | | | | | OK  3<int,number>{} & undefined<>  =:=  ⊥
//│ | 0. Receiver: (1<int,number>, 2<int,number>, 3<int,number>,), Index: α26 [indexedIn: List(), indexedBy: List()]
//│ ╔══[WARNING] Get into this case 2!
//│ ║  l.147: 	(1, 2, 3)[concat "true"  "bruh"]
//│ ╙──       	          ^^^^^^^^^^^^^^^^^^^^^
//│ | | 0. Receiver: (1<int,number>, 2<int,number>, 3<int,number>,), Index: string<>
//│ ╔══[ERROR] The index must be an integer
//│ ╙──
//│ | | ==> error<>
//│ | ==> (α27 [indexedIn: List(), indexedBy: List()] | error<>)
//│ 0. : (α27 [indexedIn: List(), indexedBy: List()] | error<>)
//│ ⬤ Typed as: (α27 [indexedIn: List(), indexedBy: List()] | error<>)
//│  where: 
//│ res: error
//│    = undefined

concat "true" "bruh"
//│ res: string
//│    = 'truebruh'

(1, 2, 3)["haha"]
//│ ╔══[ERROR] The index must be an integer
//│ ║  l.230: 	(1, 2, 3)["haha"]
//│ ╙──       	          ^^^^^^
//│ res: error
//│    = undefined

(1, 2, 3)[-10]
//│ /!\ Parse error: Expected end-of-input:1:10, found "[-10];" at l.237:10: (1, 2, 3)[-10]

:d
(1, 2, 3)[0]
//│ 0. Typing term (1, 2, 3,)[0]
//│ | 0. Typing term (1, 2, 3,)
//│ | | 0. Typing term 1
//│ | | 0. : 1<int,number>
//│ | | 0. Typing term 2
//│ | | 0. : 2<int,number>
//│ | | 0. Typing term 3
//│ | | 0. : 3<int,number>
//│ | 0. : (1<int,number>, 2<int,number>, 3<int,number>,)
//│ | 0. Typing term 0
//│ | 0. : 0<int,number>
//│ | CONSTRAIN (1<int,number>, 2<int,number>, 3<int,number>,) <! Array‹~(Undefined)›
//│ |   where 
//│ | C (1<int,number>, 2<int,number>, 3<int,number>,) <! Array‹~(Undefined)›    (0)
//│ | | C ((1<int,number> | 2<int,number>) | 3<int,number>) <! ~(Undefined)    (1)
//│ | | | C (1<int,number> | 2<int,number>) <! ~(Undefined)    (2)
//│ | | | | C 1<int,number> <! ~(Undefined)    (3)
//│ | | | | | ARGH  DNF(1<int,number>{})  <!  DNF(~(undefined<>))
//│ | | | | | | Consider 1<int,number>{} <: DNF(~(undefined<>))
//│ | | | | | | Possible: List(~(undefined<>))
//│ | | | | | | A  1<int,number>{}  %  List()  <!  List(~(undefined<>))  %  ⊥
//│ | | | | | | | A  1<int,number>{}  %  List(undefined<>)  <!  List()  %  ⊥
//│ | | | | | | | | OK  1<int,number>{} & undefined<>  =:=  ⊥
//│ | | | | C 2<int,number> <! ~(Undefined)    (4)
//│ | | | | | ARGH  DNF(2<int,number>{})  <!  DNF(~(undefined<>))
//│ | | | | | | Consider 2<int,number>{} <: DNF(~(undefined<>))
//│ | | | | | | Possible: List(~(undefined<>))
//│ | | | | | | A  2<int,number>{}  %  List()  <!  List(~(undefined<>))  %  ⊥
//│ | | | | | | | A  2<int,number>{}  %  List(undefined<>)  <!  List()  %  ⊥
//│ | | | | | | | | OK  2<int,number>{} & undefined<>  =:=  ⊥
//│ | | | C 3<int,number> <! ~(Undefined)    (5)
//│ | | | | ARGH  DNF(3<int,number>{})  <!  DNF(~(undefined<>))
//│ | | | | | Consider 3<int,number>{} <: DNF(~(undefined<>))
//│ | | | | | Possible: List(~(undefined<>))
//│ | | | | | A  3<int,number>{}  %  List()  <!  List(~(undefined<>))  %  ⊥
//│ | | | | | | A  3<int,number>{}  %  List(undefined<>)  <!  List()  %  ⊥
//│ | | | | | | | OK  3<int,number>{} & undefined<>  =:=  ⊥
//│ | 0. Receiver: (1<int,number>, 2<int,number>, 3<int,number>,), Index: 0<int,number>
//│ | ==> 1<int,number>
//│ 0. : 1<int,number>
//│ ⬤ Typed as: 1<int,number>
//│  where: 
//│ res: 1
//│    = 1

(1, 2, 3)[1]
//│ res: 2
//│    = 2

(1, 2, 3)[3]
//│ ╔══[ERROR] Out of range!
//│ ║  l.291: 	(1, 2, 3)[3]
//│ ╙──       	^^^^^^^^^
//│ res: error
//│    = undefined

a = 2
(1, 2, 3)[a]
//│ a: 2
//│  = 2
//│ res: 3
//│    = 3

:d
a = 1 + 1
(1, 2, 3)[a]
//│ 1. Typing term ((+ (1,)) (1,))
//│ | 1. Typing term (+ (1,))
//│ | | 1. Typing term +
//│ | | 1. : (int<number> -> (int<number> -> int<number>))
//│ | | 1. Typing term (1,)
//│ | | | 1. Typing term 1
//│ | | | 1. : 1<int,number>
//│ | | 1. : (1<int,number>,)
//│ | | CONSTRAIN (int<number> -> (int<number> -> int<number>)) <! (1<int,number> -> α32' [indexedIn: List(), indexedBy: List()])
//│ | |   where 
//│ | | C (int<number> -> (int<number> -> int<number>)) <! (1<int,number> -> α32' [indexedIn: List(), indexedBy: List()])    (0)
//│ | | | C (1<int,number>,) <! (int<number>,)    (1)
//│ | | | | C 1<int,number> <! int<number>    (2)
//│ | | | C (int<number> -> int<number>) <! α32' [indexedIn: List(), indexedBy: List()]    (3)
//│ | 1. : α32' [indexedIn: List(), indexedBy: List()]
//│ | 1. Typing term (1,)
//│ | | 1. Typing term 1
//│ | | 1. : 1<int,number>
//│ | 1. : (1<int,number>,)
//│ | CONSTRAIN α32' [indexedIn: List(), indexedBy: List()] <! (1<int,number> -> α33' [indexedIn: List(), indexedBy: List()])
//│ |   where 
//│ 		α32' [indexedIn: List(), indexedBy: List()] :> (int<number> -> int<number>)
//│ | C α32' [indexedIn: List(), indexedBy: List()] <! (1<int,number> -> α33' [indexedIn: List(), indexedBy: List()])    (0)
//│ | | C (int<number> -> int<number>) <! (1<int,number> -> α33' [indexedIn: List(), indexedBy: List()])    (1)
//│ | | | C (1<int,number>,) <! (int<number>,)    (2)
//│ | | | | C 1<int,number> <! int<number>    (3)
//│ | | | C int<number> <! α33' [indexedIn: List(), indexedBy: List()]    (4)
//│ 1. : α33' [indexedIn: List(), indexedBy: List()]
//│ ⬤ Typed as: α33' [indexedIn: List(), indexedBy: List()]
//│  where: 
//│ 		α33' [indexedIn: List(), indexedBy: List()] :> int<number>
//│ a: int
//│  = 2
//│ 0. Typing term (1, 2, 3,)[a]
//│ | 0. Typing term (1, 2, 3,)
//│ | | 0. Typing term 1
//│ | | 0. : 1<int,number>
//│ | | 0. Typing term 2
//│ | | 0. : 2<int,number>
//│ | | 0. Typing term 3
//│ | | 0. : 3<int,number>
//│ | 0. : (1<int,number>, 2<int,number>, 3<int,number>,)
//│ | 0. Typing term a
//│ | 0. : α35 [indexedIn: List(), indexedBy: List()]
//│ | CONSTRAIN (1<int,number>, 2<int,number>, 3<int,number>,) <! Array‹~(Undefined)›
//│ |   where 
//│ | C (1<int,number>, 2<int,number>, 3<int,number>,) <! Array‹~(Undefined)›    (0)
//│ | | C ((1<int,number> | 2<int,number>) | 3<int,number>) <! ~(Undefined)    (1)
//│ | | | C (1<int,number> | 2<int,number>) <! ~(Undefined)    (2)
//│ | | | | C 1<int,number> <! ~(Undefined)    (3)
//│ | | | | | ARGH  DNF(1<int,number>{})  <!  DNF(~(undefined<>))
//│ | | | | | | Consider 1<int,number>{} <: DNF(~(undefined<>))
//│ | | | | | | Possible: List(~(undefined<>))
//│ | | | | | | A  1<int,number>{}  %  List()  <!  List(~(undefined<>))  %  ⊥
//│ | | | | | | | A  1<int,number>{}  %  List(undefined<>)  <!  List()  %  ⊥
//│ | | | | | | | | OK  1<int,number>{} & undefined<>  =:=  ⊥
//│ | | | | C 2<int,number> <! ~(Undefined)    (4)
//│ | | | | | ARGH  DNF(2<int,number>{})  <!  DNF(~(undefined<>))
//│ | | | | | | Consider 2<int,number>{} <: DNF(~(undefined<>))
//│ | | | | | | Possible: List(~(undefined<>))
//│ | | | | | | A  2<int,number>{}  %  List()  <!  List(~(undefined<>))  %  ⊥
//│ | | | | | | | A  2<int,number>{}  %  List(undefined<>)  <!  List()  %  ⊥
//│ | | | | | | | | OK  2<int,number>{} & undefined<>  =:=  ⊥
//│ | | | C 3<int,number> <! ~(Undefined)    (5)
//│ | | | | ARGH  DNF(3<int,number>{})  <!  DNF(~(undefined<>))
//│ | | | | | Consider 3<int,number>{} <: DNF(~(undefined<>))
//│ | | | | | Possible: List(~(undefined<>))
//│ | | | | | A  3<int,number>{}  %  List()  <!  List(~(undefined<>))  %  ⊥
//│ | | | | | | A  3<int,number>{}  %  List(undefined<>)  <!  List()  %  ⊥
//│ | | | | | | | OK  3<int,number>{} & undefined<>  =:=  ⊥
//│ | 0. Receiver: (1<int,number>, 2<int,number>, 3<int,number>,), Index: α35 [indexedIn: List(), indexedBy: List()]
//│ ╔══[WARNING] Get into this case 2!
//│ ║  l.306: 	a = 1 + 1
//│ ╙──       	    ^^^^^
//│ | | 0. Receiver: (1<int,number>, 2<int,number>, 3<int,number>,), Index: int<number>
//│ | | ==> (((1<int,number> | 2<int,number>) | 3<int,number>) | Undefined)
//│ | ==> (α36 [indexedIn: List(), indexedBy: List()] | (((1<int,number> | 2<int,number>) | 3<int,number>) | Undefined))
//│ 0. : (α36 [indexedIn: List(), indexedBy: List()] | (((1<int,number> | 2<int,number>) | 3<int,number>) | Undefined))
//│ ⬤ Typed as: (α36 [indexedIn: List(), indexedBy: List()] | (((1<int,number> | 2<int,number>) | 3<int,number>) | Undefined))
//│  where: 
//│ res: 1 | 2 | 3 | undefined
//│    = 3

:d
1 + 1
//│ 0. Typing term ((+ (1,)) (1,))
//│ | 0. Typing term (+ (1,))
//│ | | 0. Typing term +
//│ | | 0. : (int<number> -> (int<number> -> int<number>))
//│ | | 0. Typing term (1,)
//│ | | | 0. Typing term 1
//│ | | | 0. : 1<int,number>
//│ | | 0. : (1<int,number>,)
//│ | | CONSTRAIN (int<number> -> (int<number> -> int<number>)) <! (1<int,number> -> α38 [indexedIn: List(), indexedBy: List()])
//│ | |   where 
//│ | | C (int<number> -> (int<number> -> int<number>)) <! (1<int,number> -> α38 [indexedIn: List(), indexedBy: List()])    (0)
//│ | | | C (1<int,number>,) <! (int<number>,)    (1)
//│ | | | | C 1<int,number> <! int<number>    (2)
//│ | | | C (int<number> -> int<number>) <! α38 [indexedIn: List(), indexedBy: List()]    (3)
//│ | 0. : α38 [indexedIn: List(), indexedBy: List()]
//│ | 0. Typing term (1,)
//│ | | 0. Typing term 1
//│ | | 0. : 1<int,number>
//│ | 0. : (1<int,number>,)
//│ | CONSTRAIN α38 [indexedIn: List(), indexedBy: List()] <! (1<int,number> -> α39 [indexedIn: List(), indexedBy: List()])
//│ |   where 
//│ 		α38 [indexedIn: List(), indexedBy: List()] :> (int<number> -> int<number>)
//│ | C α38 [indexedIn: List(), indexedBy: List()] <! (1<int,number> -> α39 [indexedIn: List(), indexedBy: List()])    (0)
//│ | | C (int<number> -> int<number>) <! (1<int,number> -> α39 [indexedIn: List(), indexedBy: List()])    (1)
//│ | | | C (1<int,number>,) <! (int<number>,)    (2)
//│ | | | | C 1<int,number> <! int<number>    (3)
//│ | | | C int<number> <! α39 [indexedIn: List(), indexedBy: List()]    (4)
//│ 0. : α39 [indexedIn: List(), indexedBy: List()]
//│ ⬤ Typed as: α39 [indexedIn: List(), indexedBy: List()]
//│  where: 
//│ 		α39 [indexedIn: List(), indexedBy: List()] :> int<number>
//│ res: int
//│    = 2

:d
(1, 2, 3)[1 + 1]
//│ 0. Typing term (1, 2, 3,)[((+ (1,)) (1,))]
//│ | 0. Typing term (1, 2, 3,)
//│ | | 0. Typing term 1
//│ | | 0. : 1<int,number>
//│ | | 0. Typing term 2
//│ | | 0. : 2<int,number>
//│ | | 0. Typing term 3
//│ | | 0. : 3<int,number>
//│ | 0. : (1<int,number>, 2<int,number>, 3<int,number>,)
//│ | 0. Typing term ((+ (1,)) (1,))
//│ | | 0. Typing term (+ (1,))
//│ | | | 0. Typing term +
//│ | | | 0. : (int<number> -> (int<number> -> int<number>))
//│ | | | 0. Typing term (1,)
//│ | | | | 0. Typing term 1
//│ | | | | 0. : 1<int,number>
//│ | | | 0. : (1<int,number>,)
//│ | | | CONSTRAIN (int<number> -> (int<number> -> int<number>)) <! (1<int,number> -> α41 [indexedIn: List(), indexedBy: List()])
//│ | | |   where 
//│ | | | C (int<number> -> (int<number> -> int<number>)) <! (1<int,number> -> α41 [indexedIn: List(), indexedBy: List()])    (0)
//│ | | | | C (1<int,number>,) <! (int<number>,)    (1)
//│ | | | | | C 1<int,number> <! int<number>    (2)
//│ | | | | C (int<number> -> int<number>) <! α41 [indexedIn: List(), indexedBy: List()]    (3)
//│ | | 0. : α41 [indexedIn: List(), indexedBy: List()]
//│ | | 0. Typing term (1,)
//│ | | | 0. Typing term 1
//│ | | | 0. : 1<int,number>
//│ | | 0. : (1<int,number>,)
//│ | | CONSTRAIN α41 [indexedIn: List(), indexedBy: List()] <! (1<int,number> -> α42 [indexedIn: List(), indexedBy: List()])
//│ | |   where 
//│ 		α41 [indexedIn: List(), indexedBy: List()] :> (int<number> -> int<number>)
//│ | | C α41 [indexedIn: List(), indexedBy: List()] <! (1<int,number> -> α42 [indexedIn: List(), indexedBy: List()])    (0)
//│ | | | C (int<number> -> int<number>) <! (1<int,number> -> α42 [indexedIn: List(), indexedBy: List()])    (1)
//│ | | | | C (1<int,number>,) <! (int<number>,)    (2)
//│ | | | | | C 1<int,number> <! int<number>    (3)
//│ | | | | C int<number> <! α42 [indexedIn: List(), indexedBy: List()]    (4)
//│ | 0. : α42 [indexedIn: List(), indexedBy: List()]
//│ | CONSTRAIN (1<int,number>, 2<int,number>, 3<int,number>,) <! Array‹~(Undefined)›
//│ |   where 
//│ | C (1<int,number>, 2<int,number>, 3<int,number>,) <! Array‹~(Undefined)›    (0)
//│ | | C ((1<int,number> | 2<int,number>) | 3<int,number>) <! ~(Undefined)    (1)
//│ | | | C (1<int,number> | 2<int,number>) <! ~(Undefined)    (2)
//│ | | | | C 1<int,number> <! ~(Undefined)    (3)
//│ | | | | | ARGH  DNF(1<int,number>{})  <!  DNF(~(undefined<>))
//│ | | | | | | Consider 1<int,number>{} <: DNF(~(undefined<>))
//│ | | | | | | Possible: List(~(undefined<>))
//│ | | | | | | A  1<int,number>{}  %  List()  <!  List(~(undefined<>))  %  ⊥
//│ | | | | | | | A  1<int,number>{}  %  List(undefined<>)  <!  List()  %  ⊥
//│ | | | | | | | | OK  1<int,number>{} & undefined<>  =:=  ⊥
//│ | | | | C 2<int,number> <! ~(Undefined)    (4)
//│ | | | | | ARGH  DNF(2<int,number>{})  <!  DNF(~(undefined<>))
//│ | | | | | | Consider 2<int,number>{} <: DNF(~(undefined<>))
//│ | | | | | | Possible: List(~(undefined<>))
//│ | | | | | | A  2<int,number>{}  %  List()  <!  List(~(undefined<>))  %  ⊥
//│ | | | | | | | A  2<int,number>{}  %  List(undefined<>)  <!  List()  %  ⊥
//│ | | | | | | | | OK  2<int,number>{} & undefined<>  =:=  ⊥
//│ | | | C 3<int,number> <! ~(Undefined)    (5)
//│ | | | | ARGH  DNF(3<int,number>{})  <!  DNF(~(undefined<>))
//│ | | | | | Consider 3<int,number>{} <: DNF(~(undefined<>))
//│ | | | | | Possible: List(~(undefined<>))
//│ | | | | | A  3<int,number>{}  %  List()  <!  List(~(undefined<>))  %  ⊥
//│ | | | | | | A  3<int,number>{}  %  List(undefined<>)  <!  List()  %  ⊥
//│ | | | | | | | OK  3<int,number>{} & undefined<>  =:=  ⊥
//│ | 0. Receiver: (1<int,number>, 2<int,number>, 3<int,number>,), Index: α42 [indexedIn: List(), indexedBy: List()]
//│ ╔══[WARNING] Get into this case 2!
//│ ║  l.428: 	(1, 2, 3)[1 + 1]
//│ ╙──       	          ^^^^^
//│ | | 0. Receiver: (1<int,number>, 2<int,number>, 3<int,number>,), Index: int<number>
//│ | | ==> (((1<int,number> | 2<int,number>) | 3<int,number>) | Undefined)
//│ | ==> (α43 [indexedIn: List(), indexedBy: List()] | (((1<int,number> | 2<int,number>) | 3<int,number>) | Undefined))
//│ 0. : (α43 [indexedIn: List(), indexedBy: List()] | (((1<int,number> | 2<int,number>) | 3<int,number>) | Undefined))
//│ ⬤ Typed as: (α43 [indexedIn: List(), indexedBy: List()] | (((1<int,number> | 2<int,number>) | 3<int,number>) | Undefined))
//│  where: 
//│ res: 1 | 2 | 3 | undefined
//│    = 3

:d
(1 + 1, 2, 3)[0]
//│ 0. Typing term (((+ (1,)) (1,)), 2, 3,)[0]
//│ | 0. Typing term (((+ (1,)) (1,)), 2, 3,)
//│ | | 0. Typing term ((+ (1,)) (1,))
//│ | | | 0. Typing term (+ (1,))
//│ | | | | 0. Typing term +
//│ | | | | 0. : (int<number> -> (int<number> -> int<number>))
//│ | | | | 0. Typing term (1,)
//│ | | | | | 0. Typing term 1
//│ | | | | | 0. : 1<int,number>
//│ | | | | 0. : (1<int,number>,)
//│ | | | | CONSTRAIN (int<number> -> (int<number> -> int<number>)) <! (1<int,number> -> α45 [indexedIn: List(), indexedBy: List()])
//│ | | | |   where 
//│ | | | | C (int<number> -> (int<number> -> int<number>)) <! (1<int,number> -> α45 [indexedIn: List(), indexedBy: List()])    (0)
//│ | | | | | C (1<int,number>,) <! (int<number>,)    (1)
//│ | | | | | | C 1<int,number> <! int<number>    (2)
//│ | | | | | C (int<number> -> int<number>) <! α45 [indexedIn: List(), indexedBy: List()]    (3)
//│ | | | 0. : α45 [indexedIn: List(), indexedBy: List()]
//│ | | | 0. Typing term (1,)
//│ | | | | 0. Typing term 1
//│ | | | | 0. : 1<int,number>
//│ | | | 0. : (1<int,number>,)
//│ | | | CONSTRAIN α45 [indexedIn: List(), indexedBy: List()] <! (1<int,number> -> α46 [indexedIn: List(), indexedBy: List()])
//│ | | |   where 
//│ 		α45 [indexedIn: List(), indexedBy: List()] :> (int<number> -> int<number>)
//│ | | | C α45 [indexedIn: List(), indexedBy: List()] <! (1<int,number> -> α46 [indexedIn: List(), indexedBy: List()])    (0)
//│ | | | | C (int<number> -> int<number>) <! (1<int,number> -> α46 [indexedIn: List(), indexedBy: List()])    (1)
//│ | | | | | C (1<int,number>,) <! (int<number>,)    (2)
//│ | | | | | | C 1<int,number> <! int<number>    (3)
//│ | | | | | C int<number> <! α46 [indexedIn: List(), indexedBy: List()]    (4)
//│ | | 0. : α46 [indexedIn: List(), indexedBy: List()]
//│ | | 0. Typing term 2
//│ | | 0. : 2<int,number>
//│ | | 0. Typing term 3
//│ | | 0. : 3<int,number>
//│ | 0. : (α46 [indexedIn: List(), indexedBy: List()], 2<int,number>, 3<int,number>,)
//│ | 0. Typing term 0
//│ | 0. : 0<int,number>
//│ | CONSTRAIN (α46 [indexedIn: List(), indexedBy: List()], 2<int,number>, 3<int,number>,) <! Array‹~(Undefined)›
//│ |   where 
//│ 		α46 [indexedIn: List(), indexedBy: List()] :> int<number>
//│ | C (α46 [indexedIn: List(), indexedBy: List()], 2<int,number>, 3<int,number>,) <! Array‹~(Undefined)›    (0)
//│ | | C ((α46 [indexedIn: List(), indexedBy: List()] | 2<int,number>) | 3<int,number>) <! ~(Undefined)    (1)
//│ | | | C (α46 [indexedIn: List(), indexedBy: List()] | 2<int,number>) <! ~(Undefined)    (2)
//│ | | | | C α46 [indexedIn: List(), indexedBy: List()] <! ~(Undefined)    (3)
//│ | | | | | C int<number> <! ~(Undefined)    (4)
//│ | | | | | | ARGH  DNF(int<number>{})  <!  DNF(~(undefined<>))
//│ | | | | | | | Consider int<number>{} <: DNF(~(undefined<>))
//│ | | | | | | | Possible: List(~(undefined<>))
//│ | | | | | | | A  int<number>{}  %  List()  <!  List(~(undefined<>))  %  ⊥
//│ | | | | | | | | A  int<number>{}  %  List(undefined<>)  <!  List()  %  ⊥
//│ | | | | | | | | | OK  int<number>{} & undefined<>  =:=  ⊥
//│ | | | | C 2<int,number> <! ~(Undefined)    (5)
//│ | | | | | ARGH  DNF(2<int,number>{})  <!  DNF(~(undefined<>))
//│ | | | | | | Consider 2<int,number>{} <: DNF(~(undefined<>))
//│ | | | | | | Possible: List(~(undefined<>))
//│ | | | | | | A  2<int,number>{}  %  List()  <!  List(~(undefined<>))  %  ⊥
//│ | | | | | | | A  2<int,number>{}  %  List(undefined<>)  <!  List()  %  ⊥
//│ | | | | | | | | OK  2<int,number>{} & undefined<>  =:=  ⊥
//│ | | | C 3<int,number> <! ~(Undefined)    (6)
//│ | | | | ARGH  DNF(3<int,number>{})  <!  DNF(~(undefined<>))
//│ | | | | | Consider 3<int,number>{} <: DNF(~(undefined<>))
//│ | | | | | Possible: List(~(undefined<>))
//│ | | | | | A  3<int,number>{}  %  List()  <!  List(~(undefined<>))  %  ⊥
//│ | | | | | | A  3<int,number>{}  %  List(undefined<>)  <!  List()  %  ⊥
//│ | | | | | | | OK  3<int,number>{} & undefined<>  =:=  ⊥
//│ | 0. Receiver: (α46 [indexedIn: List(), indexedBy: List()], 2<int,number>, 3<int,number>,), Index: 0<int,number>
//│ | ==> α46 [indexedIn: List(), indexedBy: List()]
//│ 0. : α46 [indexedIn: List(), indexedBy: List()]
//│ ⬤ Typed as: α46 [indexedIn: List(), indexedBy: List()]
//│  where: 
//│ 		α46 [indexedIn: List(), indexedBy: List()] :> int<number> <: ~(Undefined)
//│ res: int
//│    = 2

(1, "haha")[0]
//│ res: 1
//│    = 1

(1, "haha")[1]
//│ res: "haha"
//│    = 'haha'

zh = "你好"
//│ zh: "你好"
//│   = '′0⊐9'

ch = "मनीष منش" 
//│ ch: "मनीष منش"
//│   = '⍐⍄⍨⍙ ᘅᘆᖈ'


:d
def foo x = x[1] // modify the TypeSimplifier
//│ 1. Typing term ((x,) => x[1])
//│ | 1. Typing pattern (x,)
//│ | | 1. Typing pattern x
//│ | | 1. : α48' [indexedIn: List(), indexedBy: List()]
//│ | 1. : (α48' [indexedIn: List(), indexedBy: List()],)
//│ | 1. Typing term x[1]
//│ | | 1. Typing term x
//│ | | 1. : α48' [indexedIn: List(), indexedBy: List()]
//│ | | 1. Typing term 1
//│ | | 1. : 1<int,number>
//│ | | CONSTRAIN α48' [indexedIn: List(), indexedBy: List()] <! Array‹~(Undefined)›
//│ | |   where 
//│ | | C α48' [indexedIn: List(), indexedBy: List()] <! Array‹~(Undefined)›    (0)
//│ | | 1. Receiver: α48' [indexedIn: List(), indexedBy: List()], Index: 1<int,number>
//│ ╔══[WARNING] Get into this case 1!
//│ ╙──
//│ | | ==> α49' [indexedIn: List(), indexedBy: List()]
//│ | 1. : α49' [indexedIn: List(), indexedBy: List()]
//│ 1. : (α48' [indexedIn: List(), indexedBy: List((1<int,number>,α49' [indexedIn: List(), indexedBy: List()]))] -> α49' [indexedIn: List(), indexedBy: List()])
//│ ⬤ Typed as: (α48' [indexedIn: List(), indexedBy: List((1<int,number>,α49' [indexedIn: List(), indexedBy: List()]))] -> α49' [indexedIn: List(), indexedBy: List()])
//│  where: 
//│ 		α48' [indexedIn: List(), indexedBy: List((1<int,number>,α49' [indexedIn: List(), indexedBy: List()]))] <: Array‹~(Undefined)›
//│ foo: Array[~undefined] -> nothing
//│    = [Function: foo]

:d
foo ((1, 2, 3))
//│ 0. Typing term (foo (((1, 2, 3,)),))
//│ | 0. Typing term foo
//│ | 0. : (α52 [indexedIn: List(), indexedBy: List((1<int,number>,α49' [indexedIn: List(), indexedBy: List()]))] -> α53 [indexedIn: List(), indexedBy: List()])
//│ | 0. Typing term (((1, 2, 3,)),)
//│ | | 0. Typing term ((1, 2, 3,))
//│ | | | 0. Typing term (1, 2, 3,)
//│ | | | | 0. Typing term 1
//│ | | | | 0. : 1<int,number>
//│ | | | | 0. Typing term 2
//│ | | | | 0. : 2<int,number>
//│ | | | | 0. Typing term 3
//│ | | | | 0. : 3<int,number>
//│ | | | 0. : (1<int,number>, 2<int,number>, 3<int,number>,)
//│ | | 0. : (1<int,number>, 2<int,number>, 3<int,number>,)
//│ | 0. : ((1<int,number>, 2<int,number>, 3<int,number>,),)
//│ | CONSTRAIN (α52 [indexedIn: List(), indexedBy: List((1<int,number>,α49' [indexedIn: List(), indexedBy: List()]))] -> α53 [indexedIn: List(), indexedBy: List()]) <! ((1<int,number>, 2<int,number>, 3<int,number>,) -> α54 [indexedIn: List(), indexedBy: List()])
//│ |   where 
//│ 		α52 [indexedIn: List(), indexedBy: List((1<int,number>,α49' [indexedIn: List(), indexedBy: List()]))] <: Array‹~(Undefined)›
//│ | C (α52 [indexedIn: List(), indexedBy: List((1<int,number>,α49' [indexedIn: List(), indexedBy: List()]))] -> α53 [indexedIn: List(), indexedBy: List()]) <! ((1<int,number>, 2<int,number>, 3<int,number>,) -> α54 [indexedIn: List(), indexedBy: List()])    (0)
//│ | | C ((1<int,number>, 2<int,number>, 3<int,number>,),) <! (α52 [indexedIn: List(), indexedBy: List((1<int,number>,α49' [indexedIn: List(), indexedBy: List()]))],)    (1)
//│ | | | C (1<int,number>, 2<int,number>, 3<int,number>,) <! α52 [indexedIn: List(), indexedBy: List((1<int,number>,α49' [indexedIn: List(), indexedBy: List()]))]    (2)
//│ | | | | C (1<int,number>, 2<int,number>, 3<int,number>,) <! Array‹~(Undefined)›    (3)
//│ | | | | | C ((1<int,number> | 2<int,number>) | 3<int,number>) <! ~(Undefined)    (4)
//│ | | | | | | C (1<int,number> | 2<int,number>) <! ~(Undefined)    (5)
//│ | | | | | | | C 1<int,number> <! ~(Undefined)    (6)
//│ | | | | | | | | ARGH  DNF(1<int,number>{})  <!  DNF(~(undefined<>))
//│ | | | | | | | | | Consider 1<int,number>{} <: DNF(~(undefined<>))
//│ | | | | | | | | | Possible: List(~(undefined<>))
//│ | | | | | | | | | A  1<int,number>{}  %  List()  <!  List(~(undefined<>))  %  ⊥
//│ | | | | | | | | | | A  1<int,number>{}  %  List(undefined<>)  <!  List()  %  ⊥
//│ | | | | | | | | | | | OK  1<int,number>{} & undefined<>  =:=  ⊥
//│ | | | | | | | C 2<int,number> <! ~(Undefined)    (7)
//│ | | | | | | | | ARGH  DNF(2<int,number>{})  <!  DNF(~(undefined<>))
//│ | | | | | | | | | Consider 2<int,number>{} <: DNF(~(undefined<>))
//│ | | | | | | | | | Possible: List(~(undefined<>))
//│ | | | | | | | | | A  2<int,number>{}  %  List()  <!  List(~(undefined<>))  %  ⊥
//│ | | | | | | | | | | A  2<int,number>{}  %  List(undefined<>)  <!  List()  %  ⊥
//│ | | | | | | | | | | | OK  2<int,number>{} & undefined<>  =:=  ⊥
//│ | | | | | | C 3<int,number> <! ~(Undefined)    (8)
//│ | | | | | | | ARGH  DNF(3<int,number>{})  <!  DNF(~(undefined<>))
//│ | | | | | | | | Consider 3<int,number>{} <: DNF(~(undefined<>))
//│ | | | | | | | | Possible: List(~(undefined<>))
//│ | | | | | | | | A  3<int,number>{}  %  List()  <!  List(~(undefined<>))  %  ⊥
//│ | | | | | | | | | A  3<int,number>{}  %  List(undefined<>)  <!  List()  %  ⊥
//│ | | | | | | | | | | OK  3<int,number>{} & undefined<>  =:=  ⊥
//│ | | | | 0. Receiver: (1<int,number>, 2<int,number>, 3<int,number>,), Index: 1<int,number>
//│ | | | | ==> 2<int,number>
//│ | | | | C 2<int,number> <! α49' [indexedIn: List(), indexedBy: List()]    (9)
//│ | | C α53 [indexedIn: List(), indexedBy: List()] <! α54 [indexedIn: List(), indexedBy: List()]    (10)
//│ 0. : α54 [indexedIn: List(), indexedBy: List()]
//│ ⬤ Typed as: α54 [indexedIn: List(), indexedBy: List()]
//│  where: 
//│ res: nothing
//│    = 2

"foo"[2]
//│ ╔══[ERROR] Type mismatch in array access:
//│ ║  l.682: 	"foo"[2]
//│ ║         	^^^^^^^^
//│ ╟── string literal of type `"foo"` does not match type `Array[~undefined]`
//│ ║  l.682: 	"foo"[2]
//│ ╙──       	^^^^^
//│ ╔══[ERROR] mlscript doesn't allow string indexing
//│ ║  l.682: 	"foo"[2]
//│ ╙──       	^^^^^
//│ res: error
//│    = 'o'

"foo"[3]
//│ ╔══[ERROR] Type mismatch in array access:
//│ ║  l.695: 	"foo"[3]
//│ ║         	^^^^^^^^
//│ ╟── string literal of type `"foo"` does not match type `Array[~undefined]`
//│ ║  l.695: 	"foo"[3]
//│ ╙──       	^^^^^
//│ ╔══[ERROR] mlscript doesn't allow string indexing
//│ ║  l.695: 	"foo"[3]
//│ ╙──       	^^^^^
//│ res: error
//│    = undefined

('f', 'o', 'o')[2]
//│ res: "o"
//│    = 'o'

(1, 2, 3)[(1, 2, 3)[0]]
//│ res: 2
//│    = 2

(1, 2, 3)[(1, 2, 3)[(1, 2, 3)[0]]]
//│ res: 3
//│    = 3

(1, 2, 3)[(1, 2, 3)[(1, 2, 3)[(1, 2, 3)[0]]]]
//│ ╔══[ERROR] Out of range!
//│ ║  l.720: 	(1, 2, 3)[(1, 2, 3)[(1, 2, 3)[(1, 2, 3)[0]]]]
//│ ╙──       	^^^^^^^^^
//│ res: error
//│    = undefined


(1, 2, 3)[k]
//│ ╔══[ERROR] identifier not found: k
//│ ║  l.728: 	(1, 2, 3)[k]
//│ ╙──       	          ^
//│ ╔══[ERROR] Encounter error at index during array indexing
//│ ╙──
//│ res: error
//│ Code generation encountered an error:
//│   unresolved symbol k

:d
3[1]
//│ 0. Typing term 3[1]
//│ | 0. Typing term 3
//│ | 0. : 3<int,number>
//│ | 0. Typing term 1
//│ | 0. : 1<int,number>
//│ | CONSTRAIN 3<int,number> <! Array‹~(Undefined)›
//│ |   where 
//│ | C 3<int,number> <! Array‹~(Undefined)›    (0)
//│ | | CONSTRAINT FAILURE: 3<int,number> <: Array‹~(Undefined)›
//│ | | allVarPols: 
//│ | | norm[-] Array‹~(Undefined)›
//│ | | | DNF: DNF(Array‹~(Undefined)›{})
//│ | | | norm[-] ~(Undefined)
//│ | | | | DNF: DNF(~(undefined<>))
//│ | | | | norm[+] undefined<>
//│ | | | | | DNF: DNF(undefined<>{})
//│ | | | | ~> undefined<>
//│ | | | ~> ~(undefined<>)
//│ | | ~> Array‹~(undefined<>)›
//│ | | allVarPols: 
//│ | | norm[+] 3<int,number>
//│ | | | DNF: DNF(3<int,number>{})
//│ | | ~> 3<int,number>
//│ | | CONSTRAIN error<> <! ⊤
//│ | |   where 
//│ | | C error<> <! ⊤    (0)
//│ ╔══[ERROR] Type mismatch in array access:
//│ ║  l.739: 	3[1]
//│ ║         	^^^^
//│ ╟── integer literal of type `3` does not match type `Array[~undefined]`
//│ ║  l.739: 	3[1]
//│ ╙──       	^
//│ | 0. Receiver: 3<int,number>, Index: 1<int,number>
//│ ╔══[ERROR] The indexing operation should be acted on an array
//│ ║  l.739: 	3[1]
//│ ╙──       	^
//│ | ==> error<>
//│ 0. : error<>
//│ ⬤ Typed as: error<>
//│  where: 
//│ res: error
//│    = undefined

def k: int
k[1]
//│ k: int
//│  = <missing implementation>
//│ ╔══[ERROR] Type mismatch in array access:
//│ ║  l.784: 	k[1]
//│ ║         	^^^^
//│ ╟── type `int` does not match type `Array[~undefined]`
//│ ║  l.783: 	def k: int
//│ ║         	       ^^^
//│ ╟── but it flows into reference with expected type `Array[~undefined]`
//│ ║  l.784: 	k[1]
//│ ╙──       	^
//│ ╔══[ERROR] The indexing operation should be acted on an array
//│ ║  l.783: 	def k: int
//│ ╙──       	       ^^^
//│ res: error
//│    = <no result>
//│      k is not implemented

(1 + 1)[0]
//│ ╔══[ERROR] Type mismatch in array access:
//│ ║  l.803: 	(1 + 1)[0]
//│ ║         	^^^^^^^^^^
//│ ╟── operator application of type `int` does not match type `Array[~undefined]`
//│ ║  l.803: 	(1 + 1)[0]
//│ ╙──       	 ^^^^^
//│ ╔══[WARNING] Get into this case 1!
//│ ║  l.803: 	(1 + 1)[0]
//│ ╙──       	 ^^^^^
//│ ╔══[ERROR] The indexing operation should be acted on an array
//│ ╙──
//│ res: error
//│    = undefined

nw = (1, 2, 3, 4, 5)
def chose i = nw[i]
//│ nw: (1, 2, 3, 4, 5,)
//│   = [ 1, 2, 3, 4, 5 ]
//│ ╔══[WARNING] Get into this case 2!
//│ ╙──
//│ chose: anything -> nothing
//│      = [Function: chose]

chose 2
//│ res: nothing
//│    = 3

// why this one does not goto `case (t : ArrayBase, ClassTag(Var("int"), _))`
:d
def k: int
(1, 2, 3)[k]
//│ 1. Typing type TypeName(int)
//│ | vars=Map() newDefsInfo=Map()
//│ => Int | 
//│ ⬤ Typed as: Int
//│  where: 
//│ k: int
//│  = <missing implementation>
//│ 0. Typing term (1, 2, 3,)[k]
//│ | 0. Typing term (1, 2, 3,)
//│ | | 0. Typing term 1
//│ | | 0. : 1<int,number>
//│ | | 0. Typing term 2
//│ | | 0. : 2<int,number>
//│ | | 0. Typing term 3
//│ | | 0. : 3<int,number>
//│ | 0. : (1<int,number>, 2<int,number>, 3<int,number>,)
//│ | 0. Typing term k
//│ | 0. : Int
//│ | CONSTRAIN (1<int,number>, 2<int,number>, 3<int,number>,) <! Array‹~(Undefined)›
//│ |   where 
//│ | C (1<int,number>, 2<int,number>, 3<int,number>,) <! Array‹~(Undefined)›    (0)
//│ | | C ((1<int,number> | 2<int,number>) | 3<int,number>) <! ~(Undefined)    (1)
//│ | | | C (1<int,number> | 2<int,number>) <! ~(Undefined)    (2)
//│ | | | | C 1<int,number> <! ~(Undefined)    (3)
//│ | | | | | ARGH  DNF(1<int,number>{})  <!  DNF(~(undefined<>))
//│ | | | | | | Consider 1<int,number>{} <: DNF(~(undefined<>))
//│ | | | | | | Possible: List(~(undefined<>))
//│ | | | | | | A  1<int,number>{}  %  List()  <!  List(~(undefined<>))  %  ⊥
//│ | | | | | | | A  1<int,number>{}  %  List(undefined<>)  <!  List()  %  ⊥
//│ | | | | | | | | OK  1<int,number>{} & undefined<>  =:=  ⊥
//│ | | | | C 2<int,number> <! ~(Undefined)    (4)
//│ | | | | | ARGH  DNF(2<int,number>{})  <!  DNF(~(undefined<>))
//│ | | | | | | Consider 2<int,number>{} <: DNF(~(undefined<>))
//│ | | | | | | Possible: List(~(undefined<>))
//│ | | | | | | A  2<int,number>{}  %  List()  <!  List(~(undefined<>))  %  ⊥
//│ | | | | | | | A  2<int,number>{}  %  List(undefined<>)  <!  List()  %  ⊥
//│ | | | | | | | | OK  2<int,number>{} & undefined<>  =:=  ⊥
//│ | | | C 3<int,number> <! ~(Undefined)    (5)
//│ | | | | ARGH  DNF(3<int,number>{})  <!  DNF(~(undefined<>))
//│ | | | | | Consider 3<int,number>{} <: DNF(~(undefined<>))
//│ | | | | | Possible: List(~(undefined<>))
//│ | | | | | A  3<int,number>{}  %  List()  <!  List(~(undefined<>))  %  ⊥
//│ | | | | | | A  3<int,number>{}  %  List(undefined<>)  <!  List()  %  ⊥
//│ | | | | | | | OK  3<int,number>{} & undefined<>  =:=  ⊥
//│ | 0. Receiver: (1<int,number>, 2<int,number>, 3<int,number>,), Index: Int
//│ ╔══[ERROR] The index does not have a value
//│ ║  l.834: 	(1, 2, 3)[k]
//│ ╙──       	^^^^^^^^^
//│ | ==> error<>
//│ 0. : error<>
//│ ⬤ Typed as: error<>
//│  where: 
//│ res: error
//│    = <no result>
//│      k is not implemented


def k: string
(1, 2, 3)[k]
//│ k: string
//│  = <missing implementation>
//│ ╔══[ERROR] The index must be an integer
//│ ║  l.892: 	def k: string
//│ ╙──       	       ^^^^^^
//│ res: error
//│    = <no result>
//│      k is not implemented

:d
(1, 2, 3)["a"]
//│ 0. Typing term (1, 2, 3,)["a"]
//│ | 0. Typing term (1, 2, 3,)
//│ | | 0. Typing term 1
//│ | | 0. : 1<int,number>
//│ | | 0. Typing term 2
//│ | | 0. : 2<int,number>
//│ | | 0. Typing term 3
//│ | | 0. : 3<int,number>
//│ | 0. : (1<int,number>, 2<int,number>, 3<int,number>,)
//│ | 0. Typing term "a"
//│ | 0. : "a"<string>
//│ | CONSTRAIN (1<int,number>, 2<int,number>, 3<int,number>,) <! Array‹~(Undefined)›
//│ |   where 
//│ | C (1<int,number>, 2<int,number>, 3<int,number>,) <! Array‹~(Undefined)›    (0)
//│ | | C ((1<int,number> | 2<int,number>) | 3<int,number>) <! ~(Undefined)    (1)
//│ | | | C (1<int,number> | 2<int,number>) <! ~(Undefined)    (2)
//│ | | | | C 1<int,number> <! ~(Undefined)    (3)
//│ | | | | | ARGH  DNF(1<int,number>{})  <!  DNF(~(undefined<>))
//│ | | | | | | Consider 1<int,number>{} <: DNF(~(undefined<>))
//│ | | | | | | Possible: List(~(undefined<>))
//│ | | | | | | A  1<int,number>{}  %  List()  <!  List(~(undefined<>))  %  ⊥
//│ | | | | | | | A  1<int,number>{}  %  List(undefined<>)  <!  List()  %  ⊥
//│ | | | | | | | | OK  1<int,number>{} & undefined<>  =:=  ⊥
//│ | | | | C 2<int,number> <! ~(Undefined)    (4)
//│ | | | | | ARGH  DNF(2<int,number>{})  <!  DNF(~(undefined<>))
//│ | | | | | | Consider 2<int,number>{} <: DNF(~(undefined<>))
//│ | | | | | | Possible: List(~(undefined<>))
//│ | | | | | | A  2<int,number>{}  %  List()  <!  List(~(undefined<>))  %  ⊥
//│ | | | | | | | A  2<int,number>{}  %  List(undefined<>)  <!  List()  %  ⊥
//│ | | | | | | | | OK  2<int,number>{} & undefined<>  =:=  ⊥
//│ | | | C 3<int,number> <! ~(Undefined)    (5)
//│ | | | | ARGH  DNF(3<int,number>{})  <!  DNF(~(undefined<>))
//│ | | | | | Consider 3<int,number>{} <: DNF(~(undefined<>))
//│ | | | | | Possible: List(~(undefined<>))
//│ | | | | | A  3<int,number>{}  %  List()  <!  List(~(undefined<>))  %  ⊥
//│ | | | | | | A  3<int,number>{}  %  List(undefined<>)  <!  List()  %  ⊥
//│ | | | | | | | OK  3<int,number>{} & undefined<>  =:=  ⊥
//│ | 0. Receiver: (1<int,number>, 2<int,number>, 3<int,number>,), Index: "a"<string>
//│ ╔══[ERROR] The index must be an integer
//│ ║  l.904: 	(1, 2, 3)["a"]
//│ ╙──       	          ^^^
//│ | ==> error<>
//│ 0. : error<>
//│ ⬤ Typed as: error<>
//│  where: 
//│ res: error
//│    = undefined

def haha : Array[string]
haha[0]
//│ haha: Array[string]
//│     = <missing implementation>
//│ /!!!\ Uncaught error: scala.NotImplementedError: an implementation is missing
//│ 	at: scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrainIndex$2(ConstraintSolver.scala:800)
//│ 	at: mlscript.TyperHelpers.trace(TyperHelpers.scala:30)
//│ 	at: mlscript.ConstraintSolver.constrainIndex(ConstraintSolver.scala:802)
//│ 	at: mlscript.Typer.$anonfun$typeTerm$2(Typer.scala:536)
//│ 	at: mlscript.TyperHelpers.trace(TyperHelpers.scala:30)
//│ 	at: mlscript.Typer.typeTerm(Typer.scala:697)
//│ 	at: mlscript.Typer.typeStatement(Typer.scala:351)
//│ 	at: mlscript.DiffTests.$anonfun$new$53(DiffTests.scala:553)
//│ 	at: mlscript.DiffTests.$anonfun$new$53$adapted(DiffTests.scala:506)

def haha2 : Array[int] // arraybase
haha2[0]
//│ haha2: Array[int]
//│      = <missing implementation>

my_record = {x = (1,2); y = 2}
my_record.x[my_record.y]
//│ my_record: {x: (1, 2,), y: 2}
//│          = { x: [ 1, 2 ], y: 2 }
//│ ╔══[WARNING] Get into this case 1!
//│ ║  l.975: 	my_record.x[my_record.y]
//│ ╙──       	^^^^^^^^^^^
//│ ╔══[WARNING] Get into this case 2!
//│ ║  l.975: 	my_record.x[my_record.y]
//│ ╙──       	            ^^^^^^^^^^^
//│ ╔══[ERROR] Out of range!
//│ ║  l.974: 	my_record = {x = (1,2); y = 2}
//│ ╙──       	                 ^^^^^
//│ res: error
//│    = undefined

def my_func x = (1, 2, 3)
my_func[0]
//│ my_func: anything -> (1, 2, 3,)
//│        = [Function: my_func]
//│ ╔══[ERROR] Type mismatch in array access:
//│ ║  l.991: 	my_func[0]
//│ ║         	^^^^^^^^^^
//│ ╟── function of type `?a -> (1, 2, 3,)` does not match type `Array[~undefined]`
//│ ║  l.990: 	def my_func x = (1, 2, 3)
//│ ║         	            ^^^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `Array[~undefined]`
//│ ║  l.991: 	my_func[0]
//│ ╙──       	^^^^^^^
//│ ╔══[ERROR] The indexing operation should be acted on an array
//│ ║  l.990: 	def my_func x = (1, 2, 3)
//│ ╙──       	            ^^^^^^^^^^^^^
//│ res: error
//│    = undefined


(my_func 3)[0]
//│ ╔══[WARNING] Get into this case 1!
//│ ║  l.1010: 	(my_func 3)[0]
//│ ╙──        	 ^^^^^^^^^
//│ res: 1
//│    = 1

(1, 2, 3)[my_func 3]
//│ ╔══[WARNING] Get into this case 2!
//│ ║  l.1017: 	(1, 2, 3)[my_func 3]
//│ ╙──        	          ^^^^^^^^^
//│ /!!!\ Uncaught error: scala.NotImplementedError: an implementation is missing
//│ 	at: scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrainIndex$2(ConstraintSolver.scala:800)
//│ 	at: mlscript.TyperHelpers.trace(TyperHelpers.scala:30)
//│ 	at: mlscript.ConstraintSolver.constrainIndex(ConstraintSolver.scala:802)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrainIndex$5(ConstraintSolver.scala:793)
//│ 	at: scala.collection.immutable.List.map(List.scala:246)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrainIndex$2(ConstraintSolver.scala:793)
//│ 	at: mlscript.TyperHelpers.trace(TyperHelpers.scala:30)
//│ 	at: mlscript.ConstraintSolver.constrainIndex(ConstraintSolver.scala:802)
//│ 	at: mlscript.Typer.$anonfun$typeTerm$2(Typer.scala:536)

(1, 2, 3)[my_func]
//│ ╔══[ERROR] The index must be an integer
//│ ║  l.990: 	def my_func x = (1, 2, 3)
//│ ╙──       	            ^^^^^^^^^^^^^
//│ res: error
//│    = undefined

(1, 2, 3)[(my_func 3)[0]]
//│ ╔══[WARNING] Get into this case 1!
//│ ║  l.1040: 	(1, 2, 3)[(my_func 3)[0]]
//│ ╙──        	           ^^^^^^^^^
//│ ╔══[WARNING] Get into this case 2!
//│ ╙──
//│ res: 2
//│    = 2

pick_arr = (1, 3, 0, 2)
rec def pick n m = if m > 0 then (pick pick_arr[n] (m-1)) else n
//│ pick_arr: (1, 3, 0, 2,)
//│         = [ 1, 3, 0, 2 ]
//│ ╔══[WARNING] Get into this case 2!
//│ ╙──
//│ pick: 'a -> int -> 'a
//│     = [Function: pick]

pick 1 5
//│ res: 1
//│    = 3

(case (1) of {1 ->  (1, 2) | 2 -> (3, 4) })[0]
//│ res: 1 | 3
//│    = 1

a = if true then (0,1) else (3,4,5)
//│ a: Array[0 | 1 | 3 | 4 | 5] & {_1: 0 | 3, _2: 1 | 4}
//│  = [ 0, 1 ]

i = if true then 0 else 1
//│ i: 0 | 1
//│  = 0

a[i]
//│ ╔══[WARNING] Get into this case 1!
//│ ║  l.1066: 	a = if true then (0,1) else (3,4,5)
//│ ╙──        	       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[WARNING] Get into this case 2!
//│ ║  l.1070: 	i = if true then 0 else 1
//│ ╙──        	       ^^^^^^^^^^^^^^^^^^
//│ ╔══[WARNING] Get into this case 2!
//│ ║  l.1070: 	i = if true then 0 else 1
//│ ╙──        	       ^^^^^^^^^^^^^^^^^^
//│ res: 0 | 1 | 3 | 4
//│    = 0

:d
def a: (1,2) | (3,4,5)
//│ 1. Typing type Union(Tuple(List((None,Field(None,Literal(1))), (None,Field(None,Literal(2))))),Tuple(List((None,Field(None,Literal(3))), (None,Field(None,Literal(4))), (None,Field(None,Literal(5))))))
//│ | vars=Map() newDefsInfo=Map()
//│ => ((1<int,number>, 2<int,number>,) | (3<int,number>, 4<int,number>, 5<int,number>,)) | 
//│ ⬤ Typed as: ((1<int,number>, 2<int,number>,) | (3<int,number>, 4<int,number>, 5<int,number>,))
//│  where: 
//│ a: Array[1 | 2 | 3 | 4 | 5] & {_1: 1 | 3, _2: 2 | 4}
//│  = <missing implementation>

:d
def i: 0 | 1
//│ 1. Typing type Union(Literal(0),Literal(1))
//│ | vars=Map() newDefsInfo=Map()
//│ => (0<int,number> | 1<int,number>) | 
//│ ⬤ Typed as: (0<int,number> | 1<int,number>)
//│  where: 
//│ i: 0 | 1
//│  = <missing implementation>

a[0]
//│ res: 1 | 3
//│    = <no result>
//│      a is not implemented


a[i]
//│ res: 1 | 2 | 3 | 4
//│    = <no result>
//│      a is not implemented

(1, 2, 3)[i]
//│ res: 1 | 2
//│    = <no result>
//│      i is not implemented

def a:  (0, 1, 2) & {x: 1} // {x: 1} fieldtype
//│ a: (0, 1, 2,) & {x: 1}
//│  = <missing implementation>

a[0] // DNF.mk
//│ /!!!\ Uncaught error: scala.NotImplementedError: an implementation is missing
//│ 	at: scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrainIndex$2(ConstraintSolver.scala:800)
//│ 	at: mlscript.TyperHelpers.trace(TyperHelpers.scala:30)
//│ 	at: mlscript.ConstraintSolver.constrainIndex(ConstraintSolver.scala:802)
//│ 	at: mlscript.Typer.$anonfun$typeTerm$2(Typer.scala:536)
//│ 	at: mlscript.TyperHelpers.trace(TyperHelpers.scala:30)
//│ 	at: mlscript.Typer.typeTerm(Typer.scala:697)
//│ 	at: mlscript.Typer.typeStatement(Typer.scala:351)
//│ 	at: mlscript.DiffTests.$anonfun$new$53(DiffTests.scala:553)
//│ 	at: mlscript.DiffTests.$anonfun$new$53$adapted(DiffTests.scala:506)

({x = 1})[0]
//│ ╔══[ERROR] Type mismatch in array access:
//│ ║  l.1140: 	({x = 1})[0]
//│ ║          	^^^^^^^^^^^^
//│ ╟── record literal of type `{x: 1}` does not match type `Array[~undefined]`
//│ ║  l.1140: 	({x = 1})[0]
//│ ╙──        	 ^^^^^^^
//│ ╔══[ERROR] The indexing operation should be acted on an array
//│ ║  l.1140: 	({x = 1})[0]
//│ ╙──        	 ^^^^^^^
//│ res: error
//│    = undefined

:d
def ar: (Array[0 | 1] & Array[1 | 2])
//│ 1. Typing type Inter(AppliedType(TypeName(Array),List(Union(Literal(0),Literal(1)))),AppliedType(TypeName(Array),List(Union(Literal(1),Literal(2)))))
//│ | vars=Map() newDefsInfo=Map()
//│ => (Array[(0<int,number> | 1<int,number>)] & Array[(1<int,number> | 2<int,number>)]) | 
//│ ⬤ Typed as: (Array[(0<int,number> | 1<int,number>)] & Array[(1<int,number> | 2<int,number>)])
//│  where: 
//│ ar: Array[1]
//│   = <missing implementation>

def foo x y = let inner a b = (x[a], b[y]) in inner
//│ ╔══[WARNING] Get into this case 1!
//│ ╙──
//│ ╔══[WARNING] Get into this case 1!
//│ ╙──
//│ foo: Array[~undefined] -> anything -> anything -> Array[~undefined] -> (nothing, nothing,)
//│    = [Function: foo1]
