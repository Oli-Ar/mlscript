
:GeneralizeCurriedFunctions
// :DistributeForalls

// def s n = fun f -> fun x -> f (n f x)
// def s n = fun f -> f (n f)
// def s n = fun f -> fun x -> (n f x)
def s n = fun f -> n f
// def s n = n
//│ s: 'a -> (forall 'b. 'b -> (forall 'a, 'b, 'c. ('c
//│   where
//│     'a <: 'b -> 'c)))
//│  = [Function: s]

:ns
s
//│ res: forall 'a. 'a -> (forall 'b. 'b -> (forall 'c. ('c
//│   where
//│     'a <: 'b -> 'c)))
//│    = [Function: s]

type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ Defined type alias ChurchInt

def zero: ChurchInt
//│ zero: ChurchInt
//│     = <missing implementation>

// def z f x = x

// def succ: ChurchInt -> ChurchInt

// def to_church: int -> ChurchInt
def to_church: int -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
//│ to_church: int -> (forall 'M. ('M -> 'M) -> 'M -> 'M)
//│          = <missing implementation>

:d
// rec def to_ch n =
//   if n == 0 then zero
//   else s (to_ch (n - 1))
// rec def to_ch n =
//   if n == 0 then zero
//   else s (to_ch n)
// rec def to_ch n =
//   if true then zero
//   else s (to_ch n)
// rec def to_ch n =
//   if true then zero
//   else s (to_church n)
// def to_ch n =
//   if true then zero
//   else s (to_church n)
def to_ch n =
  s (to_church n)
// def to_ch (n:int) =
//   s (to_church n)
// def to_ch =
//   s (to_church 0)
//│ 1. Typing term ((n,) => (s (((to_church (n,))),)))   None
//│ | TYPING POLY LAM
//│ | 2. Typing pattern (n,)   Some(0)
//│ | | 2. Typing pattern n   Some(0)
//│ | | 2. : α39''
//│ | 2. : (α39'',)
//│ | 3. Typing term (s (((to_church (n,))),))   Some(0)
//│ | | 3. Typing term s   Some(0)
//│ | | 3. : ‹∀ 0. ‹∀ 1. (α21'' -> ‹∀ 3. (α22'''' -> ‹∀ 4. {α23''''' where: α21'' <: ((α22'''',) -> α23''''')}›)›)››
//│ | | 3. Typing term (((to_church (n,))),)   Some(0)
//│ | | | 3. Typing term ((to_church (n,)))   Some(0)
//│ | | | | 3. Typing term (to_church (n,))   Some(0)
//│ | | | | | 3. Typing term to_church   Some(0)
//│ | | | | | 3. : ‹∀ 0. (Int -> ‹∀ 1. (('M35'' -> 'M35'') -> ('M35'' -> 'M35''))›)›
//│ | | | | | 3. Typing term (n,)   Some(0)
//│ | | | | | | 3. Typing term n   Some(0)
//│ | | | | | | 3. : α39''
//│ | | | | | 3. : (α39'',)
//│ | | | | | CONSTRAIN ‹∀ 0. (Int -> ‹∀ 1. (('M35'' -> 'M35'') -> ('M35'' -> 'M35''))›)› <! (α39'' -> α40''')
//│ | | | | |   where 
//│ | | | | | 3. C ‹∀ 0. (Int -> ‹∀ 1. (('M35'' -> 'M35'') -> ('M35'' -> 'M35''))›)› <! (α39'' -> α40''')
//│ | | | | | | 3. C (Int -> ‹∀ 1. (('M35'' -> 'M35'') -> ('M35'' -> 'M35''))›) <! (α39'' -> α40''')
//│ | | | | | | | 3. C (α39'',) <! (Int,)
//│ | | | | | | | | 3. C α39'' <! Int
//│ | | | | | | | | | NEW α39'' UB (0)
//│ | | | | | | | 3. C ‹∀ 1. (('M35'' -> 'M35'') -> ('M35'' -> 'M35''))› <! α40'''
//│ | | | | | | | | NEW α40''' LB (0)
//│ | | | | 3. : α40'''
//│ | | | 3. : α40'''
//│ | | 3. : (α40''',)
//│ | | CONSTRAIN ‹∀ 0. ‹∀ 1. (α21'' -> ‹∀ 3. (α22'''' -> ‹∀ 4. {α23''''' where: α21'' <: ((α22'''',) -> α23''''')}›)›)›› <! (α40''' -> α41''')
//│ | |   where 
//│ 		α40''' :> ‹∀ 1. (('M35'' -> 'M35'') -> ('M35'' -> 'M35''))›
//│ | | 3. C ‹∀ 0. ‹∀ 1. (α21'' -> ‹∀ 3. (α22'''' -> ‹∀ 4. {α23''''' where: α21'' <: ((α22'''',) -> α23''''')}›)›)›› <! (α40''' -> α41''')
//│ | | | 3. C ‹∀ 1. (α21'' -> ‹∀ 3. (α22'''' -> ‹∀ 4. {α23''''' where: α21'' <: ((α22'''',) -> α23''''')}›)›)› <! (α40''' -> α41''')
//│ | | | | INST [1]   ‹∀ 1. (α21'' -> ‹∀ 3. (α22'''' -> ‹∀ 4. {α23''''' where: α21'' <: ((α22'''',) -> α23''''')}›)›)›
//│ | | | |   where  
//│ | | | | TO [3] ~>  (α42''' -> ‹∀ 3. (α43'''' -> ‹∀ 4. {α44''''' where: α42''' <: ((α43'''',) -> α44''''')}›)›)
//│ | | | |   where  
//│ | | | | 3. C (α42''' -> ‹∀ 3. (α43'''' -> ‹∀ 4. {α44''''' where: α42''' <: ((α43'''',) -> α44''''')}›)›) <! (α40''' -> α41''')
//│ | | | | | 3. C (α40''',) <! (α42''',)
//│ | | | | | | 3. C α40''' <! α42'''
//│ | | | | | | | NEW α40''' UB (3)
//│ | | | | | | | 3. C ‹∀ 1. (('M35'' -> 'M35'') -> ('M35'' -> 'M35''))› <! α42'''
//│ | | | | | | | | NEW α42''' LB (0)
//│ | | | | | 3. C ‹∀ 3. (α43'''' -> ‹∀ 4. {α44''''' where: α42''' <: ((α43'''',) -> α44''''')}›)› <! α41'''
//│ | | | | | | NEW α41''' LB (3)
//│ | 3. : α41'''
//│ 1. : ‹∀ 1. (α39'' -> ‹∀ 2. α41'''›)›
//│ ⬤ Typed as: ‹∀ 0. ‹∀ 1. (α39'' -> ‹∀ 2. α41'''›)››
//│  where: 
//│ 		α39'' <: Int
//│ 		α41''' :> ‹∀ 3. (α43'''' -> ‹∀ 4. {α44''''' where: α42''' <: ((α43'''',) -> α44''''')}›)›
//│ 		α42''' :> ‹∀ 1. (('M35'' -> 'M35'') -> ('M35'' -> 'M35''))›
//│ to_ch: int -> (forall 'a. 'a -> (forall 'a, 'b, 'c. ('c
//│   where
//│     'b <: 'a -> 'c)))
//│      = <no result>
//│        to_church is not implemented

// rec def to_ch n =
//   s (to_ch (n - 1))
// rec def to_ch n =
//   s (to_ch n)
// rec def to_ch n =
//   to_ch n

// :ns
// to_ch
// to_ch: ChurchInt
// :re
// to_ch 1 2

// :DistributeForalls
:d
// FIXME?
to_church = to_ch
//│ 1. Typing term to_ch   None
//│ 1. : ‹∀ 0. ‹∀ 1. (α39'' -> ‹∀ 2. α41'''›)››
//│ ⬤ Typed as: ‹∀ 0. ‹∀ 0. ‹∀ 1. (α39'' -> ‹∀ 2. α41'''›)›››
//│  where: 
//│ 		α39'' <: Int
//│ 		α41''' :> ‹∀ 3. (α43'''' -> ‹∀ 4. {α44''''' where: α42''' <: ((α43'''',) -> α44''''')}›)›
//│ 		α42''' :> ‹∀ 1. (('M35'' -> 'M35'') -> ('M35'' -> 'M35''))›
//│ ⬤ Typed as: ‹∀ 0. (Int -> ‹∀ 1. (('M35'' -> 'M35'') -> ('M35'' -> 'M35''))›)›
//│  where: 
//│ int -> (forall 'a. 'a -> (forall 'a, 'b, 'c. ('c
//│   where
//│     'b <: 'a -> 'c)))
//│   <:  to_church:
//│ int -> (forall 'M. ('M -> 'M) -> 'M -> 'M)
//│ CONSTRAIN ‹∀ 0. ‹∀ 0. ‹∀ 1. (α39'' -> ‹∀ 2. α41'''›)››› <! ‹∀ 0. (Int -> ‹∀ 1. (('M35'' -> 'M35'') -> ('M35'' -> 'M35''))›)›
//│   where 
//│ 		α39'' <: Int
//│ 		α41''' :> ‹∀ 3. (α43'''' -> ‹∀ 4. {α44''''' where: α42''' <: ((α43'''',) -> α44''''')}›)›
//│ 		α42''' :> ‹∀ 1. (('M35'' -> 'M35'') -> ('M35'' -> 'M35''))›
//│ 0. C ‹∀ 0. ‹∀ 0. ‹∀ 1. (α39'' -> ‹∀ 2. α41'''›)››› <! ‹∀ 0. (Int -> ‹∀ 1. (('M35'' -> 'M35'') -> ('M35'' -> 'M35''))›)›
//│ | BUMP TO LEVEL 1
//│ | 1. C ‹∀ 0. ‹∀ 0. ‹∀ 1. (α39'' -> ‹∀ 2. α41'''›)››› <! (Int -> ‹∀ 1. (('M35'' -> 'M35'') -> ('M35'' -> 'M35''))›)
//│ | | 1. C ‹∀ 0. ‹∀ 1. (α39'' -> ‹∀ 2. α41'''›)›› <! (Int -> ‹∀ 1. (('M35'' -> 'M35'') -> ('M35'' -> 'M35''))›)
//│ | | | 1. C ‹∀ 1. (α39'' -> ‹∀ 2. α41'''›)› <! (Int -> ‹∀ 1. (('M35'' -> 'M35'') -> ('M35'' -> 'M35''))›)
//│ | | | | INST [1]   ‹∀ 1. (α39'' -> ‹∀ 2. α41'''›)›
//│ | | | |   where  
//│ 		α39'' <: Int
//│ 		α41''' :> ‹∀ 3. (α43'''' -> ‹∀ 4. {α44''''' where: α42''' <: ((α43'''',) -> α44''''')}›)›
//│ 		α42''' :> ‹∀ 1. (('M35'' -> 'M35'') -> ('M35'' -> 'M35''))›
//│ | | | | TO [1] ~>  (α70' -> ‹∀ 2. α41'''›)
//│ | | | |   where  
//│ 		α41''' :> ‹∀ 3. (α43'''' -> ‹∀ 4. {α44''''' where: α42''' <: ((α43'''',) -> α44''''')}›)›
//│ 		α42''' :> ‹∀ 1. (('M35'' -> 'M35'') -> ('M35'' -> 'M35''))›
//│ 		α70' <: Int
//│ | | | | 1. C (α70' -> ‹∀ 2. α41'''›) <! (Int -> ‹∀ 1. (('M35'' -> 'M35'') -> ('M35'' -> 'M35''))›)
//│ | | | | | 1. C (Int,) <! (α70',)
//│ | | | | | | 1. C Int <! α70'
//│ | | | | | | | NEW α70' LB (0)
//│ | | | | | | | 1. C Int <! Int
//│ | | | | | 1. C ‹∀ 2. α41'''› <! ‹∀ 1. (('M35'' -> 'M35'') -> ('M35'' -> 'M35''))›
//│ | | | | | | BUMP TO LEVEL 2
//│ | | | | | | 2. C ‹∀ 2. α41'''› <! ((‘M'' -> ‘M'') -> (‘M'' -> ‘M''))
//│ | | | | | | | INST [2]   ‹∀ 2. α41'''›
//│ | | | | | | |   where  
//│ 		α41''' :> ‹∀ 3. (α43'''' -> ‹∀ 4. {α44''''' where: α42''' <: ((α43'''',) -> α44''''')}›)›
//│ 		α42''' :> ‹∀ 1. (('M35'' -> 'M35'') -> ('M35'' -> 'M35''))›
//│ | | | | | | | TO [2] ~>  α71''
//│ | | | | | | |   where  
//│ 		α71'' :> ‹∀ 3. (α72'''' -> ‹∀ 4. {α74''''' where: α73'' <: ((α72'''',) -> α74''''')}›)›
//│ 		α73'' :> ‹∀ 1. (('M35'' -> 'M35'') -> ('M35'' -> 'M35''))›
//│ | | | | | | | 2. C α71'' <! ((‘M'' -> ‘M'') -> (‘M'' -> ‘M''))
//│ | | | | | | | | NEW α71'' UB (2)
//│ | | | | | | | | 2. C ‹∀ 3. (α72'''' -> ‹∀ 4. {α74''''' where: α73'' <: ((α72'''',) -> α74''''')}›)› <! ((‘M'' -> ‘M'') -> (‘M'' -> ‘M''))
//│ | | | | | | | | | INST [3]   ‹∀ 3. (α72'''' -> ‹∀ 4. {α74''''' where: α73'' <: ((α72'''',) -> α74''''')}›)›
//│ | | | | | | | | |   where  
//│ 		α73'' :> ‹∀ 1. (('M35'' -> 'M35'') -> ('M35'' -> 'M35''))›
//│ | | | | | | | | | TO [2] ~>  (α75'' -> ‹∀ 4. {α76''''' where: α73'' <: ((α75'',) -> α76''''')}›)
//│ | | | | | | | | |   where  
//│ 		α73'' :> ‹∀ 1. (('M35'' -> 'M35'') -> ('M35'' -> 'M35''))›
//│ | | | | | | | | | 2. C (α75'' -> ‹∀ 4. {α76''''' where: α73'' <: ((α75'',) -> α76''''')}›) <! ((‘M'' -> ‘M'') -> (‘M'' -> ‘M''))
//│ | | | | | | | | | | 2. C ((‘M'' -> ‘M''),) <! (α75'',)
//│ | | | | | | | | | | | 2. C (‘M'' -> ‘M'') <! α75''
//│ | | | | | | | | | | | | NEW α75'' LB (2)
//│ | | | | | | | | | | 2. C ‹∀ 4. {α76''''' where: α73'' <: ((α75'',) -> α76''''')}› <! (‘M'' -> ‘M'')
//│ | | | | | | | | | | | INST [4]   ‹∀ 4. {α76''''' where: α73'' <: ((α75'',) -> α76''''')}›
//│ | | | | | | | | | | |   where  
//│ 		α73'' :> ‹∀ 1. (('M35'' -> 'M35'') -> ('M35'' -> 'M35''))›
//│ 		α75'' :> (‘M'' -> ‘M'')
//│ | | | | | | | | | | | TO [2] ~>  {α77'' where: α73'' <: ((α75'',) -> α77'')}
//│ | | | | | | | | | | |   where  
//│ 		α73'' :> ‹∀ 1. (('M35'' -> 'M35'') -> ('M35'' -> 'M35''))›
//│ 		α75'' :> (‘M'' -> ‘M'')
//│ | | | | | | | | | | | 2. C {α77'' where: α73'' <: ((α75'',) -> α77'')} <! (‘M'' -> ‘M'')
//│ | | | | | | | | | | | | DISCHARGE CONSTRAINTS
//│ | | | | | | | | | | | | | 2. C α73'' <! ((α75'',) -> α77'')
//│ | | | | | | | | | | | | | | NEW α73'' UB (2)
//│ | | | | | | | | | | | | | | 2. C ‹∀ 1. (('M35'' -> 'M35'') -> ('M35'' -> 'M35''))› <! ((α75'',) -> α77'')
//│ | | | | | | | | | | | | | | | INST [1]   ‹∀ 1. (('M35'' -> 'M35'') -> ('M35'' -> 'M35''))›
//│ | | | | | | | | | | | | | | |   where  
//│ | | | | | | | | | | | | | | | TO [2] ~>  (('M78'' -> 'M78'') -> ('M78'' -> 'M78''))
//│ | | | | | | | | | | | | | | |   where  
//│ | | | | | | | | | | | | | | | 2. C (('M78'' -> 'M78'') -> ('M78'' -> 'M78'')) <! ((α75'',) -> α77'')
//│ | | | | | | | | | | | | | | | | 2. C (α75'',) <! (('M78'' -> 'M78''),)
//│ | | | | | | | | | | | | | | | | | 2. C (α75'',) <! (('M78'' -> 'M78''),)
//│ | | | | | | | | | | | | | | | | | | 2. C α75'' <! ('M78'' -> 'M78'')
//│ | | | | | | | | | | | | | | | | | | | 2. C α75'' <! ('M78'' -> 'M78'')
//│ | | | | | | | | | | | | | | | | | | | | NEW α75'' UB (2)
//│ | | | | | | | | | | | | | | | | | | | | 2. C (‘M'' -> ‘M'') <! ('M78'' -> 'M78'')
//│ | | | | | | | | | | | | | | | | | | | | | 2. C ('M78'',) <! (‘M'',)
//│ | | | | | | | | | | | | | | | | | | | | | | 2. C 'M78'' <! ‘M''
//│ | | | | | | | | | | | | | | | | | | | | | | | NEW 'M78'' UB (2)
//│ | | | | | | | | | | | | | | | | | | | | | 2. C ‘M'' <! 'M78''
//│ | | | | | | | | | | | | | | | | | | | | | | NEW 'M78'' LB (2)
//│ | | | | | | | | | | | | | | | | | | | | | | 2. C ‘M'' <! ‘M''
//│ | | | | | | | | | | | | | | | | 2. C ('M78'' -> 'M78'') <! α77''
//│ | | | | | | | | | | | | | | | | | NEW α77'' LB (2)
//│ | | | | | | | | | | | | 2. C α77'' <! (‘M'' -> ‘M'')
//│ | | | | | | | | | | | | | NEW α77'' UB (2)
//│ | | | | | | | | | | | | | 2. C ('M78'' -> 'M78'') <! (‘M'' -> ‘M'')
//│ | | | | | | | | | | | | | | 2. C (‘M'',) <! ('M78'',)
//│ | | | | | | | | | | | | | | | 2. C ‘M'' <! 'M78''
//│ | | | | | | | | | | | | | | | | Cached!
//│ | | | | | | | | | | | | | | 2. C 'M78'' <! ‘M''
//│ | | | | | | | | | | | | | | | Cached!
//│          = <no result>
//│            to_ch and to_church are not implemented

:DistributeForalls

to_church = to_ch
//│ int -> (forall 'a. 'a -> (forall 'a, 'b, 'c. ('c
//│   where
//│     'b <: 'a -> 'c)))
//│   <:  to_church:
//│ int -> (forall 'M. ('M -> 'M) -> 'M -> 'M)
//│          = <no result>
//│            to_ch and to_church are not implemented



rec def to_ch_weird n =
  s (to_ch_weird n)
//│ to_ch_weird: anything -> anything -> nothing
//│            = [Function: to_ch_weird]



