:GeneralizeCurriedFunctions

// type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)

:d
// :ns
// def s n = fun f -> fun x -> f (n f x)
// def s n = fun f -> fun x -> (n f x)
def s n = fun f -> n f
// def s n = n
//│ 1. Typing term ((n,) => ((f,) => (n (f,))))   None
//│ | TYPING POLY LAM
//│ | 2. Typing pattern (n,)   Some(0)
//│ | | 2. Typing pattern n   Some(0)
//│ | | 2. : α21''
//│ | 2. : (α21'',)
//│ | 3. Typing term ((f,) => (n (f,)))   Some(0)
//│ | | TYPING POLY LAM
//│ | | 4. Typing pattern (f,)   Some(0)
//│ | | | 4. Typing pattern f   Some(0)
//│ | | | 4. : α22''''
//│ | | 4. : (α22'''',)
//│ | | 5. Typing term (n (f,))   Some(0)
//│ | | | 5. Typing term n   Some(0)
//│ | | | 5. : α21''
//│ | | | 5. Typing term (f,)   Some(0)
//│ | | | | 5. Typing term f   Some(0)
//│ | | | | 5. : α22''''
//│ | | | 5. : (α22'''',)
//│ | | | CONSTRAIN α21'' <! (α22'''' -> α23''''')
//│ | | |   where 
//│ | | | 5. C α21'' <! (α22'''' -> α23''''')
//│ | | | | STASHING α21'' bound in extr ctx
//│ | | 5. : α23'''''
//│ | 3. : ‹∀ 3. (α22'''' -> ‹∀ 4. {α23''''' where: α21'' <: (α22'''' -> α23''''')}›)›
//│ 1. : ‹∀ 1. (α21'' -> ‹∀ 3. (α22'''' -> ‹∀ 4. {α23''''' where: α21'' <: (α22'''' -> α23''''')}›)›)›
//│ ⬤ Typed as: ‹∀ 0. ‹∀ 1. (α21'' -> ‹∀ 3. (α22'''' -> ‹∀ 4. {α23''''' where: α21'' <: (α22'''' -> α23''''')}›)›)››
//│  where: 
//│ s: 'a -> (forall 'b. 'b -> (forall 'a, 'b, 'c. ('c
//│   where
//│     'a <: 'b -> 'c)))
//│  = [Function: s]

// def succ: (forall 'N. ('N -> 'N) -> ('N -> 'N)) -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
def succ: (forall 'N. ('N -> 'N)) -> (forall 'M. ('M -> 'M))
//│ succ: (forall 'N. 'N -> 'N) -> (forall 'M. 'M -> 'M)
//│     = <missing implementation>

// :DistributeForalls

// :ns
// :e // * Needs distrib (see below)
:d
succ = s
// succ n = s n
// s id : (forall 'M. ('M -> 'M))
//│ 1. Typing term s   None
//│ 1. : ‹∀ 0. ‹∀ 1. (α21'' -> ‹∀ 3. (α22'''' -> ‹∀ 4. {α23''''' where: α21'' <: (α22'''' -> α23''''')}›)›)››
//│ ⬤ Typed as: ‹∀ 0. ‹∀ 0. ‹∀ 1. (α21'' -> ‹∀ 3. (α22'''' -> ‹∀ 4. {α23''''' where: α21'' <: (α22'''' -> α23''''')}›)›)›››
//│  where: 
//│ ⬤ Typed as: ‹∀ 0. (‹∀ 1. ('N33'' -> 'N33'')› -> ‹∀ 1. ('M34'' -> 'M34'')›)›
//│  where: 
//│ 'a -> (forall 'b. 'b -> (forall 'a, 'b, 'c. ('c
//│   where
//│     'a <: 'b -> 'c)))
//│   <:  succ:
//│ (forall 'N. 'N -> 'N) -> (forall 'M. 'M -> 'M)
//│ CONSTRAIN ‹∀ 0. ‹∀ 0. ‹∀ 1. (α21'' -> ‹∀ 3. (α22'''' -> ‹∀ 4. {α23''''' where: α21'' <: (α22'''' -> α23''''')}›)›)››› <! ‹∀ 0. (‹∀ 1. ('N33'' -> 'N33'')› -> ‹∀ 1. ('M34'' -> 'M34'')›)›
//│   where 
//│ 0. C ‹∀ 0. ‹∀ 0. ‹∀ 1. (α21'' -> ‹∀ 3. (α22'''' -> ‹∀ 4. {α23''''' where: α21'' <: (α22'''' -> α23''''')}›)›)››› <! ‹∀ 0. (‹∀ 1. ('N33'' -> 'N33'')› -> ‹∀ 1. ('M34'' -> 'M34'')›)›
//│ | BUMP TO LEVEL 1
//│ | 1. C ‹∀ 0. ‹∀ 0. ‹∀ 1. (α21'' -> ‹∀ 3. (α22'''' -> ‹∀ 4. {α23''''' where: α21'' <: (α22'''' -> α23''''')}›)›)››› <! (‹∀ 1. ('N33'' -> 'N33'')› -> ‹∀ 1. ('M34'' -> 'M34'')›)
//│ | | 1. C ‹∀ 0. ‹∀ 1. (α21'' -> ‹∀ 3. (α22'''' -> ‹∀ 4. {α23''''' where: α21'' <: (α22'''' -> α23''''')}›)›)›› <! (‹∀ 1. ('N33'' -> 'N33'')› -> ‹∀ 1. ('M34'' -> 'M34'')›)
//│ | | | 1. C ‹∀ 1. (α21'' -> ‹∀ 3. (α22'''' -> ‹∀ 4. {α23''''' where: α21'' <: (α22'''' -> α23''''')}›)›)› <! (‹∀ 1. ('N33'' -> 'N33'')› -> ‹∀ 1. ('M34'' -> 'M34'')›)
//│ | | | | INST [1]   ‹∀ 1. (α21'' -> ‹∀ 3. (α22'''' -> ‹∀ 4. {α23''''' where: α21'' <: (α22'''' -> α23''''')}›)›)›
//│ | | | |   where  
//│ | | | | TO [1] ~>  (α56' -> ‹∀ 3. (α57'''' -> ‹∀ 4. {α58''''' where: α56' <: (α57'''' -> α58''''')}›)›)
//│ | | | |   where  
//│ | | | | 1. C (α56' -> ‹∀ 3. (α57'''' -> ‹∀ 4. {α58''''' where: α56' <: (α57'''' -> α58''''')}›)›) <! (‹∀ 1. ('N33'' -> 'N33'')› -> ‹∀ 1. ('M34'' -> 'M34'')›)
//│ | | | | | 1. C (‹∀ 1. ('N33'' -> 'N33'')›,) <! (α56',)
//│ | | | | | | 1. C ‹∀ 1. ('N33'' -> 'N33'')› <! α56'
//│ | | | | | | | NEW α56' LB (0)
//│ | | | | | 1. C ‹∀ 3. (α57'''' -> ‹∀ 4. {α58''''' where: α56' <: (α57'''' -> α58''''')}›)› <! ‹∀ 1. ('M34'' -> 'M34'')›
//│ | | | | | | BUMP TO LEVEL 2
//│ | | | | | | 2. C ‹∀ 3. (α57'''' -> ‹∀ 4. {α58''''' where: α56' <: (α57'''' -> α58''''')}›)› <! (‘M'' -> ‘M'')
//│ | | | | | | | INST [3]   ‹∀ 3. (α57'''' -> ‹∀ 4. {α58''''' where: α56' <: (α57'''' -> α58''''')}›)›
//│ | | | | | | |   where  
//│ 		α56' :> ‹∀ 1. ('N33'' -> 'N33'')›
//│ | | | | | | | TO [2] ~>  (α59'' -> ‹∀ 4. {α60''''' where: α56' <: (α59'' -> α60''''')}›)
//│ | | | | | | |   where  
//│ 		α56' :> ‹∀ 1. ('N33'' -> 'N33'')›
//│ | | | | | | | 2. C (α59'' -> ‹∀ 4. {α60''''' where: α56' <: (α59'' -> α60''''')}›) <! (‘M'' -> ‘M'')
//│ | | | | | | | | 2. C (‘M'',) <! (α59'',)
//│ | | | | | | | | | 2. C ‘M'' <! α59''
//│ | | | | | | | | | | NEW α59'' LB (2)
//│ | | | | | | | | 2. C ‹∀ 4. {α60''''' where: α56' <: (α59'' -> α60''''')}› <! ‘M''
//│ | | | | | | | | | INST [4]   ‹∀ 4. {α60''''' where: α56' <: (α59'' -> α60''''')}›
//│ | | | | | | | | |   where  
//│ 		α56' :> ‹∀ 1. ('N33'' -> 'N33'')›
//│ 		α59'' :> ‘M''
//│ | | | | | | | | | TO [2] ~>  {α61'' where: α56' <: (α59'' -> α61'')}
//│ | | | | | | | | |   where  
//│ 		α56' :> ‹∀ 1. ('N33'' -> 'N33'')›
//│ 		α59'' :> ‘M''
//│ | | | | | | | | | 2. C {α61'' where: α56' <: (α59'' -> α61'')} <! ‘M''
//│ | | | | | | | | | | DISCHARGE CONSTRAINTS
//│ | | | | | | | | | | | 2. C α56' <! (α59'' -> α61'')
//│ | | | | | | | | | | | | EXTR RHS  ~>  (α62' -> α63')  to 1
//│ | | | | | | | | | | | |  where 
//│ 		α62' :> ⊤
//│ | | | | | | | | | | | |    and 
//│ 		α59'' :> ‘M'' <: α62'
//│ 		α61'' :> α63'
//│ 		α62' :> ⊤
//│ | | | | | | | | | | | | 2. C α56' <! (α62' -> α63')
//│ | | | | | | | | | | | | | NEW α56' UB (1)
//│ | | | | | | | | | | | | | 2. C ‹∀ 1. ('N33'' -> 'N33'')› <! (α62' -> α63')
//│ | | | | | | | | | | | | | | INST [1]   ‹∀ 1. ('N33'' -> 'N33'')›
//│ | | | | | | | | | | | | | |   where  
//│ | | | | | | | | | | | | | | TO [2] ~>  ('N64'' -> 'N64'')
//│ | | | | | | | | | | | | | |   where  
//│ | | | | | | | | | | | | | | 2. C ('N64'' -> 'N64'') <! (α62' -> α63')
//│ | | | | | | | | | | | | | | | 2. C (α62',) <! ('N64'',)
//│ | | | | | | | | | | | | | | | | 2. C α62' <! 'N64''
//│ | | | | | | | | | | | | | | | | | NEW 'N64'' LB (1)
//│ | | | | | | | | | | | | | | | 2. C 'N64'' <! α63'
//│ | | | | | | | | | | | | | | | | NEW 'N64'' UB (1)
//│ | | | | | | | | | | | | | | | | 2. C α62' <! α63'
//│ | | | | | | | | | | | | | | | | | NEW α62' UB (1)
//│ | | | | | | | | | | | | | | | | | 2. C ⊤ <! α63'
//│ | | | | | | | | | | | | | | | | | | NEW α63' LB (0)
//│ | | | | | | | | | | 2. C α61'' <! ‘M''
//│ | | | | | | | | | | | NEW α61'' UB (2)
//│ | | | | | | | | | | | 2. C α63' <! ‘M''
//│ | | | | | | | | | | | | EXTR RHS  ~>  ⊥  to 1
//│ | | | | | | | | | | | |  where 
//│ | | | | | | | | | | | |    and 
//│ | | | | | | | | | | | | 2. C α63' <! ⊥
//│ | | | | | | | | | | | | | NEW α63' UB (0)
//│ | | | | | | | | | | | | | 2. C ⊤ <! ⊥
//│ | | | | | | | | | | | | | | CONSTRAINT FAILURE: ⊤ <: ⊥
//│ | | | | | | | | | | | | | | allVarPols: 
//│ | | | | | | | | | | | | | | norm[-] ⊥
//│ | | | | | | | | | | | | | | | DNF: DNF(1024, )
//│ | | | | | | | | | | | | | | ~> ⊥
//│ | | | | | | | | | | | | | | allVarPols: 
//│ | | | | | | | | | | | | | | norm[+] ⊤
//│ | | | | | | | | | | | | | | | DNF: DNF(1024, )
//│ | | | | | | | | | | | | | | ~> ⊤
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.54: 	succ = s
//│ ║        	^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.45: 	def succ: (forall 'N. ('N -> 'N)) -> (forall 'M. ('M -> 'M))
//│ ║        	                                             ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.45: 	def succ: (forall 'N. ('N -> 'N)) -> (forall 'M. ('M -> 'M))
//│ ╙──      	                                             ^^
//│     = [Function: s]


