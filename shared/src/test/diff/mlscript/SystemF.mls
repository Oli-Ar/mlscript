// https://crypto.stanford.edu/~blynn/lambda/systemf.html

def succ: int -> int
//│ succ: int -> int
//│     = <missing implementation>


(fun f -> f succ(f 0)) (fun x -> x)
//│ res: int
//│    = <no result>
//│      succ is not implemented

// Note: does not type check without precise function type intersections
(fun f -> f succ (f 0)) (fun x -> x)
//│ res: int
//│    = <no result>
//│      succ is not implemented


// [Reset]
id x = x // Polymorphic identity.
// id as [A] -> A -> A
//│ id: 'a -> 'a
//│   = [Function: id]

xx = fun x -> x x // Self-application.
// xx as ([X] -> X -> X) -> [X] -> X -> X
//│ xx: ('a -> 'b & 'a) -> 'b
//│   = [Function: xx]

xx id
iter2 f x = f(f x)
// iter2 as [X] -> (X -> X) -> X -> X
//│ res: 'a -> 'a
//│    = [Function: id]
//│ iter2: ((forall 'a, 'b, 'c. ('c
//│   where
//│     'a <: 'b -> 'c)) -> 'd & 'b -> 'a & 'a) -> 'b -> 'd
//│      = [Function: iter2]

iter4() = iter2 iter2
// iter4() as [X] -> (X -> X) -> X -> X
//│ iter4: () -> nothing -> anything -> nothing
//│      = [Function: iter4]

iter256() = iter4() (iter4()) // 4^4 = 256.
// iter256() as [X] -> (X -> X) -> X -> X
//│ ╔══[ERROR] Cyclic-looking constraint while typing application
//│ ║  l.46: 	iter256() = iter4() (iter4()) // 4^4 = 256.
//│ ║        	            ^^^^^^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 1. {α178'' where: α176'' <: ((α177'',) -> α178'')}›  <:  α640'    PolymorphicType  TypeVariable
//│ ╙──  ... looks like:  ‹∀ 1. {α178'' where: α176'' <: ((α177'',) -> α178'')}›  <:  α192''
//│ iter256: () -> error
//│        = [Function: iter256]

n0 s z = z // Church numerals.
// n0 as [X] -> (X -> X) -> X -> X
//│ n0: anything -> 'a -> 'a
//│   = [Function: n0]

S n s z = s (n s z)
// S as ([X] -> (X -> X) -> X -> X) -> ([X] -> (X -> X) -> X -> X)
//│ S: ('a -> 'b -> 'c & 'c) -> ((forall 'a, 'b, 'c, 'd. ('d
//│   where
//│     'c <: 'a -> 'b -> 'd)) -> 'e & 'a) -> 'b -> 'e
//│  = [Function: S]

res1() = iter4() S n0
res2() = iter256() S n0
//│ res1: () -> ((forall 'a, 'b, 'c, 'd. ('d
//│   where
//│     'a <: 'b -> 'c -> 'd)) -> 'e & (forall 'b, 'c, 'f, 'g. ('g
//│   where
//│     'f <: 'b -> 'c -> 'g)) -> anything & (forall 'b, 'c, 'h, 'i. ('i
//│   where
//│     'h <: 'b -> 'c -> 'i)) -> anything & (forall 'b, 'c, 'j, 'k. ('k
//│   where
//│     'j <: 'b -> 'c -> 'k)) -> anything & 'b) -> 'c -> 'e
//│     = [Function: res1]
//│ res2: () -> error
//│     = [Function: res2]


S (S n0)
//│ res: ((forall 'a. ('a
//│   where
//│     'b <: 'c -> 'd -> 'a)) -> anything & (forall 'e. ('e
//│   where
//│     'f <: 'c -> 'd -> 'e)) -> 'g & 'c) -> 'd -> 'g
//│    = [Function (anonymous)]


// TODO rest...

