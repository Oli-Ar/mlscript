
// From SuperType tests

def True = true
//│ True: true
//│     = true

def inc: int -> int
//│ inc: int -> int
//│    = <missing implementation>

test f =
  let r = fun x -> fun g -> (g x, )
  in (r 0 inc, r True not)
//│ test: anything -> ((int,), (bool,),)
//│     = <no result>
//│       inc is not implemented

// * Precise type:
test f = (f 0, f True)
//│ test: (true -> 'a & 0 -> 'b) -> ('b, 'a,)
//│     = [Function: test]

// * Imprecise type (notice the `(0 | true)`):
// * Note: With inferred first-class constraints and generalized curried functions,
// *  this approximation be avoided (see below).
test f =
  let r x = f x
  in (r 0, r True)
//│ test: ((0 | true) -> 'a) -> ('a, 'a,)
//│     = [Function: test1]

// Same example, a little elaborated
test f =
  let r = fun x -> fun g -> (g x, f x)
  in (r 0 inc, r True not)
//│ test: ((0 | true) -> 'a) -> ((int, 'a,), (bool, 'a,),)
//│     = <no result>
//│       inc is not implemented


:GeneralizeCurriedFunctions

test f =
  let r x = f x
  in (r 0, r True)
//│ test: (true -> 'a & 0 -> 'b) -> ('b, 'a,)
//│     = [Function: test2]

// * Even works with recursive definition because the constrained type is strictly local to the body!
rec def test f =
  let r x = f x
  in (r 0, r True)
//│ test: (true -> 'a & 0 -> 'b) -> ('b, 'a,)
//│     = [Function: test3]
